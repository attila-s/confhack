do 
 you 
 you 
 you 
 you 
 you 
 you 
 um 
 take 
 you are one very serious when you are 
 recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next euro python there that would be 
 fantastic a great city great people 
 great beer that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python the europe python is the 
 gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing a 
 developer setups which we were just 
 doing just now that's really cool 
 during our preparations for europe 
 iphone i've learned some animal parts 
 like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and all those things 
 knowing people and 
 knowing 
 many different society europa society 
 member and finance 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quite just fantastic it's the best 
 people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but i learned quite a lot 
 from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was 
 five minutes prepare for a session share 
 and then after all i got loads of people 
 coming saying thank you and say that 
 they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 take one 
 and action 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things i don't know it's 
 fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 ladies and gentlemen please take a 
 moment to locate your nearest fire exit 
 in the unlikely event of an evacuation 
 please follow the directions of the ccd 
 staff and proceed directly outside 
 please do not attempt to re-enter the 
 building until told that it is safe to 
 do so 
 hello hello good morning everyone 
 oh i don't see the same smiles as i saw 
 yesterday you know 
 i don't like this is it official 
 hangover day today 
 it looks like it 
 well 
 oh so you miss it already that's it 
 that's good that's good news 
 all right 
 perfect so well 
 welcome to day three of your python i 
 hope everyone had fun last night by the 
 faces i judge that you did have loads of 
 fun last night um very good thank you so 
 much for joining us uh this early here 
 again 
 today for well the last day of fun right 
 i mean we still do have two days left 
 but 
 the last day of talks and 
 cool so uh again first things first 
 we strongly recommend the use of masks 
 especially in rooms that have loads of 
 people 
 there's hand sanitizers available 
 throughout the building 
 please if you had to swap or if you have 
 a new badge and just remember to go 
 downstairs and grab your social 
 distancing 
 stickers just so people can know better 
 how to approach you 
 then i also would like to remind you 
 that the source of truth of the schedule 
 is on our website 
 there is a speaker breakout room that 
 happens at leafy board room four 
 and that's your opportunity to have a 
 chat with the speaker of the session you 
 just been in and and ask your personal 
 questions or go with the 
 you know what i don't really agree with 
 what you said so that's the time to say 
 it you know 
 um 
 oh sorry also please join venulis um 
 cool 
 so going for the for today's events 
 we have open space happening on rico 
 hall to a 
 at 11 a.m if you're interested on 
 joining 
 or knowing a little bit more about 
 volunteering with us for next year um 
 please join vb just to chat a little bit 
 about it um at the open space 
 at 11 am 
 then we have a typing and speed up 
 python 
 events happening as well at 12. 
 then there are devtools i think it's a 
 discussion but i'm not 100 sure 
 happening at 2 p.m 
 and well you can also propose more stuff 
 when you just pass by 
 cool so then downstairs at the forum we 
 have a full house of makers today with 
 the 
 northern ireland folks from the 
 raspberry jam 
 and microbes and maker meat people 
 then 
 the pilot is lunch happening at level 5 
 at 1pm with everyone else's lunch but if 
 you're a pie ladies 
 supporter if you want to know a little 
 bit more about it if you're gonna come 
 for a chat it's not only for females 
 you're more than welcome to attend 
 um 
 and then 
 for the fans 
 at 
 305 we have a book signing event 
 with luciano jamalio happening so if you 
 happened to bring your 900 page 
 fluent python book with you on the 
 airplane yeah yes 
 and you're looking for an autograph that 
 is going to be the time and i also heard 
 through the grapevine that we're going 
 to have a giveaway 
 um so i think it's going to be fun 
 cool 
 then yes about the t-shirts so we ask 
 you when you purchase your ticket if 
 you're interested in a t-shirt 
 if you take that box and said yes please 
 go downstairs and pick up yours 
 if you have happened to picked up your 
 t-shirt already and it didn't fit it 
 doesn't fit you uh just please head to 
 the registration next desk and change it 
 and 
 well the remaining ones we are going to 
 sell 
 so after lunch if you haven't take that 
 box and said you wanted one you can just 
 go downstairs and purchase yours 
 and then for the volunteers in the room 
 um please just pick up a t-shirt your 
 t-shirt as well it's yours 
 just be part of the team 
 um 
 cool oh yes and then i just would like 
 to please remind you to be gentle 
 with the doors when you're entering or 
 leaving the rooms for the talks 
 um 
 [Music] 
 yeah as silent as you can please 
 cool then finally we will have the 
 sprints weekend so the day of talks ends 
 today but then tomorrow and the day 
 after we're gonna have sprints so if you 
 have a project you'd like to sign up 
 please just head to that 
 link and sign up your project um 
 and it's also a lot of fun 
 cool and then again quick reminder if 
 everything gets too much and you need a 
 little bit of peace and quiet just head 
 to wicca how to be 
 for the quiet room 
 uh and again 
 please if you have 
 any suggestions if you'd like to let us 
 know anything 
 please just grab a yellow t-shirt person 
 and tell them your thoughts be nice 
 please 
 yeah we're collecting feedback from 
 everyone and we truly appreciate it 
 um a special thank you to all of our 
 sponsors um 
 also yes if you haven't been downstairs 
 collecting your swag and their sponsors 
 at the farm please do 
 uh it's the last day 
 and yes finally thank you so much again 
 for joining us 
 so early and well have fun enjoy your 
 last day thank you 
 and then 
 thank you 
 then now i'm going to call larry who's 
 introdu he's going to introduce our last 
 keynote speaker of the conference thank 
 you larry 
 thank you 
 so i can't find an authoritative source 
 for when we had the first multi-core 
 computer ever multi-first multi-cpu 
 computer i know i had one in the mid 90s 
 dual pentium 
 but the first 
 multi-core 
 single cpu 
 was in 2001 it was an ibm power pc 
 and i think servers 
 and desktop computers went multi-core 
 about 2005. 
 the first multi-core phone was 2010 
 the full first multi-core eyeglasses 
 were 2015. 
 and today you can buy a raspberry pi 
 pico for four dollars that's about the 
 size of a stick of gum 
 and that has a multi-core cpu on it so 
 we live in an increasingly 
 uh multi-core world the world is just 
 saturated with multi-core processors at 
 this point 
 and right now python is not particularly 
 well poised to take advantage of that 
 because you can still only run 
 python code on one core at a time in one 
 process 
 about six or seven years ago i started 
 on a project i called the galectomy 
 which is the superior name 
 but the galectomy the goal was to remove 
 something inside of c python called the 
 gill which is 
 simultaneously something that it relies 
 on very heavily but also the thing that 
 prevents us from taking advantage of 
 multiple cores at the same time 
 i pushed the project for a couple of 
 years 
 i got it to a certain point and i sort 
 of 
 got tired of working on it and put it on 
 the back burner and worked on other 
 things 
 i hit really hard performance wall where 
 i just could not surmount 
 and i was thinking about reviving it a 
 year or two back when i got an email 
 from a guy named sam gross 
 who was working on his own guild removal 
 code and 
 he was already far more successful at it 
 than i was 
 it was so heartening to see because it 
 meant that i didn't have to touch this 
 thing again 
 so 
 i'd like to introduce sam to talk about 
 his work ladies and gentlemen sam gross 
 [Applause] 
 and 
 oops now for the customary av break 
 there we go 
 yes 
 [Music] 
 which slides 
 one second 
 oh boy 
 sorry about this 
 this 
 screen thanks larry for the introduction 
 uh hi everyone i'm sam gross and i'm 
 talking here to talk about my project 
 that i've been working on for the past 
 few years to let python run 
 multi-threaded programs without the 
 global interpreter lock 
 i'd like to start with a bit of 
 background on multi-threading and 
 python's global interpreter lock 
 multi-threading using multiple threads 
 allows an individual program to perform 
 multiple tasks at the same time threads 
 are useful for two related reasons first 
 threads can exploit the parallelism 
 available in multiprocessor and 
 multi-core computers 
 threads can run on separate cores 
 so a program that can divide its work 
 into multiple tasks executed by separate 
 threads can run faster on a multi-core 
 computer than if it used a single thread 
 the second reason is that threads can be 
 useful for structure and concurrency 
 even on a single processor system 
 threads might be used to handle multiple 
 requests in a network server 
 to overlap i o with computation or to 
 perform long-running tasks in a 
 graphical application while keeping the 
 user interface responsive 
 threads aren't the only way to structure 
 concurrency for example modern python 
 includes the async io package 
 to structure concurrent asynchronous 
 code 
 but this project is mostly focused on 
 the first reason we want python to be 
 able to take advantage of the 
 parallelism available in multi-core 
 computers by making multi-threaded code 
 run more efficiently 
 one of the big obstacles to efficiency 
 is that the global interpreter lock or 
 gil ensures that only one thread can run 
 python code at a time 
 when python was first publicly released 
 in 1991 it didn't support threads or 
 have a global interpreter lock 
 support for threads was added about a 
 year later in 1992 together with the 
 gill 
 for context the 1990s saw a number of 
 operating systems add better support for 
 threading and support for computers with 
 multiple processors 
 i think there's an interesting analogy 
 between the introduction of threads in 
 python and multi-processor support in 
 some of these operating systems 
 at least in the cases of linux and 
 freebsd 
 support for multiple processors was 
 accompanied by the introduction of 
 global locks 
 the big kernel lock in linux and a lot 
 called giant in freebsd 
 in the original implementation the big 
 kernel lock ensured that only a single 
 thread could enter the kernel at a time 
 somewhat similar to the way the python's 
 global interpreter lock ensures that 
 only a single thread can run python code 
 at a time 
 over time the uses of the big kernel 
 lock were gradually replaced by 
 fine-grained locking and other 
 techniques to improve scalability 
 the big kernel lock was completely 
 removed from linux in 2011. 
 from a technical perspective the global 
 interpreter lock makes a lot made sense 
 for a few reasons 
 first it's simple to implement it 
 doesn't require a lot of code 
 second the global interpreter lock is 
 really efficient for single threaded 
 code the lock is only rarely touched so 
 it doesn't substantially affect 
 performance if you only use one thread 
 third the global interpreter lock avoids 
 a lot of the potential deadlocking 
 hazards of using multiple fine-grained 
 locks in particular the locking 
 discipline for the gill is pretty 
 straightforward you need to acquire the 
 gill once before calling into python 
 code and you should release the gill 
 before calling an operation that might 
 block the thread 
 finally the global interpreter lock 
 still allows for some parallelism 
 c extensions can release the lock around 
 long-running pieces of code that don't 
 access python objects 
 we're now about 30 years after the 
 introduction of threads to python and as 
 larry mentioned the computer hardware 
 landscape has changed multi-core 
 processors are on desktops laptops 
 servers smartphones and today i learned 
 they're in glasses as well 
 in server environments it's come to see 
 computers dozens of cpu cores or more 
 especially as the core counts increase 
 it's difficult to take advantage of 
 multi-core parallelism from python due 
 to the gill 
 even with the gill there are a number of 
 ways to parallelize python programs 
 today but they all have substantial 
 limitations 
 first in c api extensions you can 
 parallelize operations internally in a 
 way that's invisible to python 
 for example scikit-learn uses openmp to 
 parallelize its k-means operation when 
 you call the scikit-learn's k-mean 
 k-means function from python 
 scikit-learn distributes the work to a 
 number of threads waits for those 
 threads to finish 
 and aggregates aggregates the results 
 and returns back to python 
 this works well when individual 
 operations are large enough to be 
 efficiently paralyzed but not when there 
 are a lot of small steps 
 a lot of scientific computing libraries 
 like scikit-learn pi torch and some 
 versions of numpy and scipy use this 
 technique 
 second capi extensions can release the 
 global interpreter lock around 
 long-running operations so that multiple 
 operations can overlap 
 the previously mentioned scientific 
 computing libraries do this but it 
 usually doesn't scale well beyond a few 
 cores because contention on the gill 
 quickly becomes an issue 
 you can also use multiple processes 
 including through python's 
 multi-processing library 
 processes are like a heavyweight version 
 of threads 
 the main challenge with processes is 
 that communication between processes is 
 usually more expensive and more 
 difficult than communicating between 
 threads i'm going to expand on this 
 point 
 with processes objects need to be 
 serialized to be sent from one process 
 to another you can't share python 
 objects directly like you can between 
 threads 
 this is a performance issue because 
 serialization is expensive 
 and requires making extra copies it can 
 also lead to usability issues because 
 not all objects support serialization 
 additionally many cnc plus libraries you 
 might want to use from python don't work 
 well across processes even if the 
 libraries support multiple threads 
 some libraries have opaque data 
 structures that might be difficult or 
 impossible to share between processes 
 removing the global interpreter lock is 
 a challenge because besides the actual 
 removal of the lock you have to make 
 python safe to run with multiple threads 
 you have to address things like 
 reference counting 
 python primarily manages memory by 
 keeping track of the number of 
 references to each object and the 
 current implementation isn't thread safe 
 without the gill 
 you also have to figure out how to 
 handle concurrent accesses to python's 
 collections 
 things like dictionaries lists and sets 
 once you remove the gill unless you've 
 made other changes concurrent 
 modifications to things like 
 dictionaries would crash the interpreter 
 there are a lot of other internal 
 components 
 in the python interpreter that need to 
 be made thread safe many of these are 
 easy to fix and only require small 
 changes but other require more 
 substantial changes 
 some of the specific internals i want to 
 talk about today are python's built-in 
 memory allocator and the cyclic garbage 
 collector 
 finally all these changes need to be 
 made while keeping good single-threaded 
 performance and while allowing for 
 efficient multi-threaded scaling 
 this project isn't the first attempt to 
 remove python's global interpreter lock 
 i'm aware of three previous attempts in 
 c python 
 the first was in 1996 when greg stein 
 released his free threading patch the 
 patch used atomic reference counting on 
 windows and a global reference count 
 lock on linux 
 list and dictionary accesses were 
 protected by mutexes 
 parts of the patch were actually adopted 
 upstream in particular it introduced a 
 pi thread data structure and correct per 
 thread exception handling both of which 
 live on in python today 
 the second attempt i know of was python 
 safe thread by adam olsen in 2007 adam 
 pursued an interesting design most 
 objects were owned by a single thread 
 which could use normal reference 
 counting operations if another thread 
 needed to modify the object's reference 
 count it would have to pause and wait 
 for the owning thread to give up 
 ownership 
 the implementation also had restrictions 
 on sharing objects between threads 
 you could share immutable objects like 
 numbers and strings and some special 
 objects like a new shared dictionary 
 type trying to share it other mutal 
 excuse me trying to share other mutable 
 objects like a regular dictionary or 
 list would raise an exception 
 the most recent attempt to remove the 
 gill from sea python is larry hastings 
 galectomy which started around 2016-16 
 the golectomy used atomic reference 
 counting for objects and later versions 
 experimented with buffered reference 
 counting to improve performance the 
 implementation used locks to protect 
 accesses to lists and dictionaries 
 the galectomy was the effort that had 
 the most influence on this project i had 
 seen larry's python talks in the 
 galectomy where he described parts of 
 the implementation and the performance 
 challenges 
 i think the biggest takeaway from these 
 previous efforts is the recurring 
 challenges due to reference counting 
 both in how it affects single thread 
 performance and efficient scaling 
 reference counting is by no means the 
 only issue you have to address when 
 removing the gill but it's essentially 
 the first problem you have to solve 
 because the performance impact is so 
 large 
 a number of people have come to the 
 conclusion that reference counting is 
 the biggest obstacle to removing the 
 gill and that we should ditch reference 
 counting and replace it with a tracing 
 garbage collector 
 so why not ditch reference counting 
 the primary reason is that to getting 
 rid of reference counting would make it 
 much harder to get a reasonable degree 
 of compatibility with existing capi 
 extensions 
 i think the effort to get a reasonable 
 degree of compatibility would probably 
 be bigger than just directly dealing 
 with the issues that reference counting 
 poses 
 the most straightforward way to make 
 reference counting thread safe is to use 
 atomic operations 
 the problem with this strategy is that 
 atomic instructions are slower to 
 execute than their non-atomic 
 counterparts for example 
 if you modify python to use atomic 
 reference counting and run the pi 
 performance benchmark suite the 
 benchmarks take on average about 60 
 longer to run 
 this chart shows the slowdown of using 
 atomic reference counting in each 
 benchmark in the pi performance suite 
 there's big variance in individual 
 benchmark performance so don't treat the 
 60 number as particularly precise 
 a few benchmarks aren't affected by the 
 reference counting change while others 
 take more than twice as long to run 
 biased reference counting is an 
 algorithm created to address the 
 overhead of atomic reference counting it 
 was created by jiho toy thomas schull 
 and joseph torreas at the university of 
 illinois at urbana-champaign 
 and published in 2018 
 it's based on the observation that most 
 objects are only accessed by a single 
 thread even in a multi-threaded 
 environment 
 their version was implemented in swift 
 but the same technique can be applied to 
 python 
 bias reference counting works by 
 splitting the reference count field into 
 two parts 
 as well as storing the threat of the id 
 of the thread that created the object 
 the first part of the reference count 
 field 
 stores the local reference count the 
 thread that created the object uses 
 plain non-atomic operations to modify 
 that local reference count field 
 the second field stores the shared 
 reference count 
 other threads modify the shared field 
 using atomic 
 atomic instructions the true reference 
 count is the sum of these two fields 
 because most objects are only accessed 
 by one thread the technique avoids most 
 atomic operations while still 
 maintaining thread safety 
 here's a basic implementation of 
 incrementing the reference count using 
 biased referencing bias reference 
 counting the algorithm checks if the 
 object's threat id matches the current 
 thread id if they match the algorithm 
 increments the local reference count 
 field using normal non-atomic increments 
 otherwise the algorithm increments the 
 shared field using an atomic operation 
 this is faster than just using atomic 
 reference counting because at least on 
 current hardware the extra comparison to 
 check the threat id is cheaper than the 
 cost of an atomic increment 
 this technique has some similarity 
 to the 
 to the strategy used by adam olsen in 
 the python safe thread project 
 both associate a python object with the 
 thread that creates it and that thread 
 uses fast non-atomic operations however 
 biased reference counting avoids the 
 blocking operation present in python 
 safe thread where a different thread 
 accesses the object it has to wait for 
 the original thread to give up ownership 
 here's an updated version of the 
 previous chart 
 atomic reference counting overhead 
 is still shown in blue those are the 
 same results as before 
 biased reference counting is in green 
 the overhead of biased reference 
 counting 
 is much less than the overhead of atomic 
 reference counting although it still has 
 some extra overhead compared to the 
 regular non-thread safe reference 
 counting that's currently implemented in 
 python using python 39 as a base bias 
 reference counting is about 10 percent 
 slower on average across the pi 
 performance benchmarks compared to that 
 60 percent slowdown we saw with atomic 
 reference counting 
 while biased reference counting does a 
 pretty good job of reducing the 
 execution overhead of atomic reference 
 counting it doesn't address the 
 scalability scalability issues when 
 multiple threads frequently modify the 
 reference count of the same object 
 to expand on this i'm going to make some 
 generalizations about how memory 
 operations scale on modern computer 
 systems 
 this table is divided 
 in columns between operations that are 
 read only and operations that modify 
 memory the rows are divided into private 
 accesses that's memory that's accessed 
 only by a single core and shared access 
 memory that's access accessed by 
 multiple cores the check marks indicate 
 if the operations scale well as the 
 number of cores increase 
 the first thing to notice is that 
 read-only accesses scale well with lots 
 of cores 
 memory reads from multiple cores both to 
 the same location scales well as well as 
 reads to different locations the same 
 data can exist in the cache of multiple 
 cpu cores as long as the data isn't 
 modified 
 the second thing i'd like to point out 
 is that write operations scale well if 
 the data is private 
 in other words multiple cpu cores 
 performing write operations scale well 
 as long as they're to different memory 
 addresses or more accurately to 
 different cache lines this includes 
 atomic operations things like atomic 
 increment and decrement are slower than 
 their nonatomic counterparts but both 
 atomic and non-atomic operations scale 
 well if the data is private 
 finally concurrent modifications to 
 shared data doesn't scale well so for 
 example lots of threads concurrently 
 modifying the reference count of the 
 same object won't scale well on 
 multi-core machines 
 this is relevant for python because 
 there are some objects that are 
 necessarily shared between threads and 
 they're frequently accessed 
 for example the constants none true 
 false some small integers and some other 
 objects are shared by all threads in a 
 python program 
 like other python objects they're also 
 reference counted even though they can 
 never be collected during the lifetime 
 of the program 
 absent other changes reference counting 
 on these objects would be a bottleneck 
 for multi-threaded programs once you 
 remove the gill 
 the fix is to skip reference counting on 
 these objects the objects are marked as 
 immortal using a bit in the reference 
 count field 
 the reference counting code is changed 
 to be a no op if the immortal bit is set 
 and the objects are kept alive for the 
 duration of the program 
 this works well because things like none 
 true and false already stay alive for 
 the lifetime of a python program 
 immortal objects aren't a new idea 
 they're used in the swift 
 as well as some alternate python 
 implementations like cinder and piston 
 to go back to the scaling table immortal 
 objects work because we've transformed 
 writes to shared data to read only 
 axises we've gone from modifying the 
 reference count fields of objects like 
 none true and false to only needing to 
 read that field to check if the object 
 is immortal 
 so why doesn't python already use 
 immortal objects 
 well for single threaded code immortal 
 objects aren't clear when 
 the cost of the extra branch branch to 
 check if the object is immortal is 
 typically higher than the work saved by 
 skipping the reference count operation 
 for single threaded code 
 at the language summit however back in 
 april eddie elizondo and eric snow 
 presented an implementation of immortal 
 objects with smaller costs than previous 
 efforts so we might see mortal objects 
 in c python independent of any gill 
 changes 
 early on in this project i decided to 
 test out the implementation on larry 
 hastings fibonacci benchmark from the 
 galectomy project the benchmark is 
 pretty simple there's a function fib 
 that calculates the m fibonacci number 
 and it's called concurrently for 
 multiple threads 
 the fibonacci calculation is 
 deliberately slow it's mostly there to 
 do some work 
 i was running the program with an early 
 version of nogil python with eight 
 threads and i was pretty happy to see 
 the top command show all eight cores 
 being fully utilized 
 if you graph the performance results 
 they look something like this and i was 
 ready to call it a day and indeed this 
 would have been great if the chart 
 showed throughput versus the number of 
 threads but the y-axis here is actually 
 time taken 
 even though the program was using eight 
 cpu cores those cores were being used so 
 inefficiently that there wasn't a speed 
 app in fact adding more threads made 
 things worse 
 here's the same data but inverted to 
 show throughput instead of time taken 
 if things were going well then eight 
 threads would be eight times faster than 
 a single thread but here eight threads 
 are actually only running at 25 percent 
 of the speed of a single thread 
 so what's going on 
 it's the same issue i mentioned 
 previously reference count contention 
 here is so bad the program didn't scale 
 at all and in this case reference count 
 contention wasn't solved by immortal 
 objects 
 let's look at the python byte code i've 
 highlighted the two load global bytecode 
 operations 
 these correspond to the two recursive 
 calls to fib 
 they load the fib function from the 
 global's dictionary and push it to the 
 interpreter stack 
 as part of that operation they increment 
 the reference count of the fib function 
 object 
 later when the function call is finished 
 the object is popped from the stack and 
 the reference count is decremented since 
 all the threads are calling the same 
 function they're also all concurrently 
 modifying that same reference count 
 field on the fib function object 
 we could try making all functions 
 immortal but that has a number of 
 downsides 
 functions don't necessarily live forever 
 in addition they hold a reference to the 
 global's dictionary 
 so making functions immortal would 
 prevent the global's dictionary from 
 being freed which would in turn 
 hold on to global variables unless those 
 variables were explicitly deleted 
 some programs in libraries depend on 
 running finalizers for global variables 
 at exit 
 and making function objects immortal 
 would prevent that from happening to the 
 reference chain from 
 function objects to the global 
 dictionary to global variables 
 this project uses a variant of deferred 
 reference counting to address the 
 reference count contention on function 
 objects 
 deferred reference counting skips the 
 reference counting operation for objects 
 as they're pushed to and popped from the 
 interpreter stack other operations like 
 assignment to a dictionary list use the 
 normal reference counting behavior 
 because we've skipped some reference 
 counting operations we can't free these 
 objects when their reference count 
 reaches zero 
 instead they're only free during the 
 cyclic garbage collection 
 the garbage collector is modified to 
 inspect the interpreter's stack 
 at the start of a garbage collection 
 cycle it looks through all the objects 
 on the interpreter stack adds back any 
 missing references that's the deferred 
 part of deferred reference counting it 
 then does a normal garbage collection 
 cycle and finally removes the reference 
 count that it added in the first step 
 so deferred reference counting avoid 
 some reference counting operations but 
 it also delays the allocation 
 normally that could cause problems but 
 we only enable deferred reference 
 counting for some types of objects 
 module level functions 
 methods and some type objects 
 it turns out these objects would 
 typically only be deallocated during a 
 cyclic garbage collection cycle anyways 
 i mentioned before that function objects 
 have a reference to the global's 
 dictionary 
 well the global's declaring also has a 
 reference to functions defined at the 
 module level 
 functions in python naturally form site 
 reference cycles and there are similar 
 reference cycles for methods and type 
 objects so deferred reference counting 
 on these objects doesn't typically delay 
 deallocation compared to the normal 
 behavior in c python 
 here's the fibonacci benchmark again but 
 with deferred reference counting enabled 
 the results are much better now and we 
 get a nearly eight times speed up with 
 eight threads 
 the nogill project uses a combination of 
 these reference counting techniques to 
 achieve good single threaded performance 
 and avoid a lot of the obstacles to 
 multi-core scaling 
 most objects in nogill python use biased 
 reference counting they are deallocated 
 immediately when their reference count 
 goes to zero with a few exceptions 
 a few types of objects such as function 
 objects methods 
 and 
 some type objects use deferred reference 
 counting within the interpreter loop 
 outside the interpreter loop they're 
 treated like other objects and use 
 biased reference counting they're only 
 deallocated during 
 garbage collection cycles 
 constants such as true false and none 
 are immortal 
 reference counting on these objects is 
 skipped everywhere both in the 
 interpreter and in library code they're 
 never deallocated at least not until the 
 interpreter shuts down 
 now that i've talked about reference 
 counting techniques i'd like to move on 
 to collection thread safety this is how 
 things like dictionaries lists and sets 
 handle concurrent accesses 
 dictionaries are particularly important 
 because they're widely used in python 
 including for storing object attributes 
 and global variables 
 like many previous attempts at moving 
 the guild the nogill project adds per 
 instance locks to collections like 
 dictionary and list 
 i'm going to talk a bit about the locks 
 used 
 the implementation is based on the locks 
 used in webkit the browser engine for 
 safari the design and trade-offs are 
 described in detail by a phil pislow in 
 a blog post called locking in webkit 
 if you're interested in how locks work i 
 highly recommend it it's one of my 
 favorite technical blog posts and if you 
 search locking in webkit it'll be the 
 first hit 
 i'm not going to describe the 
 implementation too much but i'll 
 describe some of the more important 
 attributes of the input of it 
 first the locks are small 
 they can be as small as two bits but due 
 to alignment requirements in c 
 in no-go python they typically 
 require the same space as a pointer so 
 eight bytes in a 64-bit system that's 
 still a lot smaller than p-thread mutex 
 or c plus plus 11 standard media mutex 
 which take 40 or more bytes 
 the locks also only need to be 
 initialized to zero just like an integer 
 it doesn't require any memory allocation 
 it has fast unconsented access that's 
 really important because by far the most 
 common case is that only one thread 
 accesses a given collection at a time 
 finally it avoids thread starvation in 
 heavily contended locks by eventually 
 handing off the ownership of the lock to 
 the threads in the same order that they 
 attempt to choir it 
 alright that's it about the locks 
 themselves 
 one of the challenges with introducing 
 locks to collection types is that you 
 have to be careful to avoid introducing 
 lock ordering deadlocks 
 for example storing a value excuse me 
 storing a key in some dictionary might 
 involve comparing that key to an 
 existing key already in the dictionary 
 for 
 comparing it for equality in particular 
 for string keys that comparison is 
 really simple but user defined types can 
 override the equality operator 
 and if that user's code accesses either 
 this dictionary or some other dictionary 
 while implementing quality 
 then we risk deadlock by holding 
 multiple locks while another thread 
 might attempt to acquire those same 
 locks in a different order for 
 dictionaries a reasonable solution is to 
 unlock the dictionary before calling the 
 equality operator and re-lock it 
 afterwards 
 essentially we make sure that a thread 
 can hold the lock for only a single 
 collection at any time 
 and that's what was implemented in this 
 python excuse me in this project for a 
 while it turns out there's a lot of 
 places you might want to call back that 
 might call back into python and 
 incidentally acquire locks for example 
 the pi decrepit macro can call arbitrary 
 code 
 through an object's finalizer 
 identifying all these places is doable 
 but it's tedious and error-prone it'd be 
 really convenient if we didn't have to 
 be so careful about unlocking and 
 unlocking these locks before calling 
 back into python or calling things like 
 pidecraft 
 notably the global interpreter lock 
 doesn't have this issue 
 you just need to acquire the global 
 interpreter lock once 
 and it's only released in a few places 
 usually implicitly for the most part you 
 don't have to worry about lock ordering 
 deadlocks with the global interpreter 
 lock 
 fortunately we can make these locks 
 behave more like the gill the basic idea 
 is to allow threads to implicitly 
 release locked collections 
 in places where the threads would have 
 normally released the gill 
 we don't do this for all types of locks 
 but instead introduce a new internal api 
 pi begin critical section and pi n 
 critical section 
 pi begin critical section locks the past 
 and lock and then pushes it to a stack 
 of active critical sections for the 
 current thread 
 subsequent calls to pi begin critical 
 section 
 also push onto the same stack 
 when threads would have normally 
 released the gill the threads instead 
 release all the locks for the active 
 critical sections and then mark those 
 sections as inactive this includes times 
 when the thread is blocked trying to 
 acquire a lock held by a different 
 thread 
 in places where the thread would have 
 normally reacquired the gill it 
 reactivates the top most critical 
 critical section and locks the 
 corresponding lock however it doesn't 
 lock any previous critical sections 
 the pi end critical section releases the 
 lock for the top most section and pops 
 it from the stack 
 if there is a previous critical section 
 and it was inactivated it's now 
 reactivated and its lock is relocked 
 the final pie in critical section 
 unlocks and removes the last critical 
 section from the stack 
 the scheme avoids the risk of any lock 
 ordering deadlocks to understand why 
 consider that a lock ordering deadlock 
 requires a thread to hold one lock let's 
 call it a 
 and be blocked while trying to acquire a 
 second lock say b 
 there's also has to be another thread 
 trying to acquire those same locks but 
 in a different order 
 with this api the moment a thread is 
 trying to acquire that second lock b it 
 will release its previously held locks 
 allowing other threads to proceed and 
 avoiding the deadlock 
 so since this avoids lock ordering 
 deadlocks why isn't something like this 
 more widely used 
 well with this sort of scheme there's a 
 lot of places where the help box might 
 be implicitly released and that's not 
 something you really want in a general 
 locking api but it's fine here for 
 replacing the global interpreter lock 
 because the places where these locks 
 might have been implicitly released are 
 the exact same places where the gill 
 could have been implicitly released 
 there's one additional 
 bit to the critical section api 
 sometimes it's useful to lock two 
 collections at once for example when 
 extending a list with the items of a 
 dictionary it's useful to lock both the 
 list and the dictionary 
 the list because it's being modified in 
 the dictionary so that the extend 
 operation sees a consistent view of the 
 items in the dictionary 
 so there's one additional api that locks 
 two mutexes at once 
 locking collections works well for most 
 accesses but there's a few operations 
 where acquiring a lock would inhibit 
 scaling 
 the most important is when accessing a 
 single item in a dictionary because 
 things like globals and object 
 attributes are implemented using 
 dictionaries and a single dictionary may 
 be frequently accessed by many threads 
 just like we saw in the fibonacci 
 example 
 the single element accesses for list and 
 dictionary are implemented without 
 acquiring the collection's lock 
 this is made more complicated by 
 reference counting 
 the acquiring the accessing thread needs 
 to increment the reference count of the 
 returned object 
 but another thread might have 
 simultaneously 
 modified the dictionary and free that 
 object 
 to handle this the fast lock list path 
 only handles the case where the 
 reference count isn't zero and where the 
 value is still in the collection if it 
 fails the operation falls back to a 
 slower path that retries the operation 
 after acquiring the collection's lock 
 normally this scheme wouldn't be safe 
 because when an object is freed its 
 memory including the reference count 
 field is invalid 
 the scheme requires cooperation with the 
 memory allocator to ensure that the 
 reference count field remains valid for 
 the duration of this access even if the 
 object's freed 
 that leads us to the memory allocator 
 python has a memory allocator called pi 
 malloc it's optimized for small 
 allocations 
 and it's used for allocating python 
 objects unfortunately it's not thread 
 safe 
 this project replaces pi malek with me 
 malek a memory allocator written by don 
 leyen at microsoft research 
 me malik's performance is slightly 
 better than pi malloc and it's thread 
 safe so it's like that me mac would end 
 up in python independent of any gill 
 changes and there's an outstanding pr 
 from christian heims that implements me 
 malik into c python 
 me malek with some modifications is also 
 important for the lock list dictionary 
 and list accesses we just talked about 
 finally me malik makes it easier to make 
 python cyclic garbage collector thread 
 safe 
 i'm going to describe how the garbage 
 collector works in python today and then 
 describe the modifications made when 
 removing the gill and how using me malik 
 helps 
 the first challenge with cyclic garbage 
 collection is that the mechanism used to 
 keep track of objects isn't thread safe 
 the current garbage collector relies on 
 a global linked list to find all python 
 objects that support cyclic garbage 
 collection 
 the linked list uses two fields in the 
 object's headers gc next and gc previous 
 objects are inserted into the linked 
 list shortly after they're allocated and 
 removed from the linked list before they 
 deallocated 
 this poses a thread safety issue because 
 threads allocate and free objects 
 concurrently the list also can't be made 
 thread local because objects might be 
 allocated in one thread and deallocated 
 on a different thread 
 this project gets rid of the doubly 
 linked list although the gc next and gc 
 previous fields are still in use for now 
 instead of the linked list the garbage 
 collector uses me malik to find all the 
 objects that support garbage 
 collection these objects are allocated 
 from a separate meemala keep than other 
 data 
 the collector scans each block in the 
 heap to find objects unallocated blocks 
 and objects that aren't tracked by the 
 collector have their least significant 
 bit in the first word set to zero 
 tracked objects have the least 
 significant bit set to one 
 the cyclic garbage collector can't run 
 safely when other threads are accessing 
 or modifying python objects the global 
 interpreter lock previously ensured this 
 but now the collector needs to pause all 
 of their python threads before running 
 python already had a mechanism for 
 requesting threads to handle 
 asynchronous signals and exceptions 
 which we've extended to handle requests 
 to pause for the garbage collector 
 once all other python threads are paused 
 the garbage collector runs the other 
 threads are resumed after the collector 
 finishes identifying unreachable objects 
 i want to talk a bit about compatibility 
 because a frequent concern with removing 
 the gill is that it will break existing 
 python code in extensions 
 for pure python code that is python code 
 that doesn't make use of the c api i 
 don't expect the code to require any 
 changes 
 now that probably won't be 100 true but 
 i think it's pretty close to it 
 importantly things like 
 things that looked atomic with the gill 
 like this dot append still look like 
 they're performed atomically due to per 
 collection locking 
 for c api extensions many don't require 
 any changes and those that do the 
 changes are pretty small i'll talk about 
 a few examples later the most common 
 issue is global or shared data in c 
 that's implicitly protected by the gill 
 a less common issue is due to the use of 
 borrowed references for example pi dict 
 get item and pi list get item return 
 objects without increasing their 
 reference counts 
 this can cause problems if the 
 dictionary or list is concurrently 
 modified 
 most uses of borrowed references aren't 
 an issue for example pi dicget item is 
 frequently used to parse the keyword 
 arguments dictionary and that dictionary 
 is effectively private to the called 
 function it's not shared with other 
 threads 
 i'd like to give some examples from real 
 python packages that use the c api 
 scikit-learn is a python library for 
 machine learning that builds on top of 
 numpy and scipy 
 under the hood it's a mix of python 
 python and some c plus plus 
 thanks in large part to olivier grusell 
 scikit-learn now works without the gill 
 and there's even a continuous build that 
 runs with no guild python i want to go 
 over the bugs we fixed while making 
 scikit-learn work without the gill 
 getting all the scikit-learning tests to 
 pass required fixing ten issues 
 of these five are in the no guild 
 project but unrelated to removing the 
 gill 
 the other five issues were 
 related to removing the gill essentially 
 thread safety issues in these projects 
 if you ran them without the global 
 interpreter lock 
 one of these issues was in the 
 scikit-learn code base directly 
 three of them were independencies two in 
 numpy and one in cython and the last one 
 was invis tracer which isn't really a 
 dependency but a useful profiling tool 
 here's the bug in scikit-learn caused by 
 removing the gill this is an excerpt of 
 some python code 
 used to compute k-means 
 when run without the gill and with 
 openmp parallelism enabled the operation 
 would give an incorrect result 
 triggering test failures 
 the problem is that cython's with gill 
 construct won't prevent multiple threads 
 from running at the same time if you've 
 already disabled the gill 
 the fix was pretty simple we just 
 replaced with gil with a different lock 
 since the code is already using openmp 
 we use an openmp-based lock 
 the actual pr that landed in 
 scikit-learn is a bit larger than this 
 because the same pattern is repeated a 
 few times in the file but this is the 
 essence of the fix 
 i'll only briefly go over the other 
 issues that cropped up when removing the 
 gill 
 for numpy there were four total issues 
 but two of those were fixed before the 
 scikit-learn effort 
 of the four issues three were issues due 
 to caches that were no longer thread 
 safe without the gill 
 some of those caches could just be 
 disabled when running with no yield 
 python 
 but one of the caches had to be 
 protected by a lock 
 one issue was due the use of borrowed 
 references in numpy that was no longer 
 safe without the gill that was fixed by 
 switching to an api that returned a new 
 reference instead 
 cython had an issue with locks allocated 
 from a pool that wasn't thread safe 
 without the gill 
 but it turned out those locks weren't 
 needed if atomic operations were 
 available 
 finally vis tracer the profiling tool 
 had some internal state and c that 
 needed to be protected by a lock 
 the critical section api came came in 
 handy there 
 the fixes for scikit-learn and vis 
 tracer have landed upstream in those 
 projects but the changes to numpy and 
 sci psython are still in forks 
 maintained by me 
 overall the changes were relatively 
 small 
 this scikit-learn test depended on a 
 total of 25 other python packages other 
 than the changes i mentioned here those 
 dependencies didn't require any other 
 changes 
 the other project i'd like to talk about 
 is work done by my colleagues at meta ai 
 on hanabi hanabi is a card game that's 
 been proposed as a benchmark problem in 
 ai hanabi is an interesting ai challenge 
 for a few reasons 
 first it's a cooperative game two to 
 five players work together to place down 
 cards in numerical order 
 it's also an imperfect information game 
 you can see other players cards but you 
 can't see your own cards 
 and to play well you need to think about 
 your partner's behaviors and how they'll 
 respond to your actions and the limited 
 information that you're allowed to share 
 my colleagues have developed agents bots 
 that play hanabi both with other bots 
 and with people 
 the bots use artificial neural networks 
 to decide what actions to take 
 and they're trained using reinforcement 
 learning techniques 
 the code is partly in python using pi 
 torch and numpy and partly in c plus 
 using pi bind 11. 
 here's a diagram of the system used to 
 train the bot 
 the system stimulates thousands of games 
 that's the section marked environment at 
 once using multiple threads 
 each thread is responsible for 
 simulating more than one game 
 the inference model and the training 
 model are the bot's neural networks 
 the inference model determines what 
 action the bot will take 
 in the simulated games the results of 
 those simulated games are fed into the 
 training model to improve the bot's 
 behaviors 
 every so often the training model is 
 copied back to the inference model 
 the navi system was built with vanilla 
 python and with the global interpreter 
 lock in mind the worker threads in 
 inference loops have to avoid running 
 python code 
 only the training loop and the training 
 model run the python interpreter 
 this means that many pieces of code had 
 to be written in c plus or like an 
 inference model written in a subset of 
 python called torch script that's 
 serialized to representation that can be 
 executed from c plus plus without 
 invoking the python interpreter 
 having so many components in c plus plus 
 made it harder to explore new research 
 ideas 
 my colleague hang yan implemented a 
 version of the system designed for 
 running without the gill 
 most of the components were moved to 
 python including the worker threads the 
 inference model 
 and 
 and the logic for each player 
 the environment that's the component 
 that implemented the rules of the game 
 stayed in c plus plus because there 
 isn't a compelling reason to move it to 
 python the research ideas don't involve 
 changing the rules of hanabi 
 as i mentioned before the project uses 
 numpy pi torch and pibin 11. those 
 projects were already patched to work 
 without the gill although we found and 
 fixed another issue with the pi bind 11 
 patch in the course of this work 
 i'd like to show the performance of this 
 system and the steps we took to optimize 
 it 
 first here's a chart showing the 
 performance of the new mostly python 
 system with the global interpreter lock 
 the x-axis shows the number of worker 
 threads and the y-axis shows the number 
 of games simulated per second 
 the gill is pretty clearly a bottleneck 
 here using more than one worker thread 
 doesn't improve performance 
 here's the performance once the gill is 
 removed now adding more worker threads 
 improves performance at least up to a 
 bit this only shows up to eight threads 
 but the computer it's running on has up 
 to four has 40 hardware cores 
 this is the same system no gill but with 
 even more worker threads up to 80 
 instead of only up to eight 
 we hit a bottleneck pretty quickly 
 increasing the number of worker threads 
 beyond 10 didn't improve performance 
 running with more worker threads 
 actually hurt performance 
 to investigate this i used linux perf 
 tools and gdb 
 perf top showed the majority of cpu time 
 was spent trying to acquire a lock but 
 didn't give much information beyond that 
 gdb narrowed the issue further 
 at any given point most of the threads 
 were stuck trying to quire out at the 
 same lock 
 this is a lock i added to our patched 
 version of pi by 11 to make it thread 
 safe 
 pi bind maintains an internal hash table 
 called registered instances that map c 
 plus pointers to their corresponding 
 python wrappers 
 this is done so that if you run this 
 that if you return the same c plus 
 object multiple times you always get 
 back the same python wrapper object the 
 lock i added to protect the hash table 
 was the source of the bottleneck 
 there are a lot of techniques for 
 implementing concurrent hash tables but 
 one of the simplest is to split the 
 table into multiple pieces 
 each a hash table with its own lock the 
 key in this case the c plus plus pointer 
 is used both to determine which sub hash 
 table to use and to index into it 
 this worked surprisingly well and was 
 easy to implement the turquoise bars 
 show the performance 
 after splitting up the registered 
 instances table this new system can 
 simulate nearly 1200 games per second 
 with 60 workers which is about a 20 time 
 speed up compared to if we ran this 
 program with the global interpreter lock 
 enabled 
 i suspect there's still opportunities to 
 further improve scaling but we think 
 this system has performance comparable 
 to the original c plus plus heavy system 
 and having more of the components in 
 python made it much easier to explore 
 new research ideas 
 you can try out the nogil version of 
 python yourself 
 both urls here go to the same github 
 page 
 the easiest way to install it is pi end 
 a python version management tool for 
 linux and mac 
 there's also a docker image or you can 
 build nogil python from source if you 
 prefer 
 you can 
 you can pip install most packages 
 including many scientific computing 
 libraries please let me know if 
 something doesn't work by filing an 
 issue on the project's github page 
 in the next month or so i'll be working 
 on a python enhancement proposal or pep 
 proposing to remove the global 
 interpreter lock from a future version 
 of python using these projects using the 
 ideas from this project 
 to help address compatibility issues 
 i'll propose placing the gill changes 
 behind a compiler flag 
 so that the default build will still 
 have the gill enabled 
 i expect this to take some time but in 
 the meantime i'd appreciate your 
 feedback on the project either on github 
 or elsewhere and if you're interested in 
 efficient multi-threaded python programs 
 please try out nogil python thank you 
 all right 
 we have time for a couple of questions 
 i've been asked to ask a couple of 
 questions first 
 so sam you didn't know this was going to 
 happen did you 
 my experience in working on the 
 golectomy i had a miserable time 
 debugging because 
 debugging across multiple threads makes 
 it so hard to go back and reason about 
 who changed what and how it happened i 
 relied very heavily on what's called 
 reversible debuggers um what has been 
 your experience with debugging see 
 python figuring out what happened 
 uh yeah so that was actually one of the 
 things i took from your project so i 
 didn't use the same reversible debugger 
 i used rr which is a project for mozilla 
 which is another reversible debugger and 
 it made debugging both 
 thread safety issues and 
 reference counting bugs much easier 
 because you could go to the source the 
 failure and then just go back in time to 
 figure out 
 what operation was responsible for 
 corrupting the data 
 okay 
 we're if if people have questions by the 
 way you can line up with that mic and i 
 might call on you 
 um 
 so you talked about how you're um 
 i can't remember that there's five or 
 six different like x reference counting 
 and y reference counting um the one 
 where you're the bias reference counting 
 that's perth that has the per thread 
 local count and then the global count so 
 one of my first experiments with the 
 galectomy was to switch to atomic 
 reference counting for everywhere 
 and 
 performance was tragic 
 and in particular the really tragic 
 thing was that the more threads you 
 added the slower it got 
 and i'm not good at computer 
 architecture but my understanding is 
 that 
 essentially the way that atomic anchor 
 and decker works is that there is an 
 internal bus that's shared by the cores 
 on your cpu that they use to talk to 
 each other to tell each other things and 
 in particular when you atomic inger and 
 decker it's like 
 there's one cpu telling the other cpus 
 hey forget about this cache line because 
 i've blown it away because i did a 
 right to that 
 and the more anchors and deckers that 
 you do 
 atomic the more contention there is for 
 that bus and so that's a place where 
 you're where you're going to have 
 scaling issues where like atomic king's 
 record is going to fail you so how 
 much overhead did you find like you 
 talked about a certain amount of of uh 
 of overhead like did you see problems 
 with this contention where adding 
 threads made the atomic contacts get 
 worse because you were doing enough of 
 them um so 
 my understanding of the way caches work 
 now is that there isn't a global bus 
 lock i think that was the like early 
 implementation on multiple when they 
 were like multiple not a bus lock but a 
 bus where they have to communicate with 
 each other and they have to well i guess 
 i'll lock you okay um 
 so 
 caches are confusing um i'm pretty sure 
 if i say something it's going to be at 
 least a little bit wrong maybe a lot 
 wrong but 
 so atomic increments and decrements 
 don't do a global lock anymore 
 they effectively lock the cache line 
 what that actually means in how it's 
 implemented hardware is a little bit 
 complicated and i don't think i can 
 explain it 
 but 
 what it means is that atomic increments 
 and decrements to different cache lines 
 still scale well 
 so 
 that's only kind of relevant to the 
 reference counting here it means that if 
 you have a bunch of threads and they do 
 some atomic reference counting it still 
 works fine as long as they're not to the 
 same object 
 but biased reference counting doesn't 
 really address the scalability issue it 
 only addresses sort of the single 
 threaded overhead 
 and the way scalability is addressed is 
 by avoiding contention reference 
 counting contention on shared objects so 
 mostly skipping the reference counting 
 either by deferred reference counting 
 for functions or 
 immortal objects or immortal like 
 skipping reference counting entirely for 
 mortal objects 
 there are some objects that are going to 
 be shared across threads 
 and they're going to have multiple 
 threads modify the reference count 
 and that's often okay it's sort of a 
 matter of scale like reference counting 
 is 
 just incredibly frequent so doing it 
 everywhere doesn't scale at all but like 
 doing a little bit is okay like having 
 some objects that are shared is still 
 fine and that's what we saw in the 
 hanavi system is that there's a bunch of 
 python objects that are shared between 
 the threads 
 and it didn't 
 affect performance too much it was only 
 the few things that were accessed so 
 frequently like the dictionary lock or 
 the function objects that really 
 affected perform scaling 
 okay that's heartwarming we do have a 
 question from the audience 
 thank you for the amazing talk um i just 
 wanted to understand do you think in the 
 future we will be able to get some 
 semantics behind the wool work of uh 
 paralyzing python removing the gill 
 because of course introducing uh 
 removing the gill is going to introduce 
 some edge cases in a lot of stuff 
 do you think we'll be able to have 
 formal 
 guarantees on what we have in the python 
 card more or less or a model or a proxy 
 especially because you've shown a lot of 
 research ideas like buys the reverse 
 counting so 
 looks like it's possible 
 um 
 so i think one thing that would be nice 
 is to have a formal model of what 
 operations are performed atomically but 
 i don't think that's practical because i 
 think it'd be hard to come up with a 
 formal model of how things behave 
 currently in python and keeping existing 
 behavior i think is more important more 
 important than formalizing the model 
 one of the challenges with both 
 the way the current implication works 
 and nogil works is that there are a 
 bunch of operations that are seemingly 
 atomic if they're performed on simple 
 types but might not be atomic if they're 
 performed on types that like override 
 equality or some other function and it's 
 really hard to reason about that 
 in general so i think what will be 
 necessary is sufficient documentation 
 but i think a formal model will be 
 pretty difficult 
 and also if i can ask another question 
 do you have you consider log free data 
 structures for some 
 structures in python 
 um 
 so 
 i think lock free data structures might 
 make sense in some places 
 i rejected block free data structures 
 for things like the built-in dictionary 
 type because in general the lock-free 
 algorithms are slower to execute for at 
 least for like single thread cases than 
 algorithms that use locking 
 and the most common case here is a lots 
 of threads or threads accessing 
 individual objects without any 
 contention 
 thank you very much 
 yeah next question please 
 hi thank you for the talk um 
 i 
 you mentioned the critical section uh 
 technique and that it works because um 
 because 
 of the current uh design with the gill 
 um once it's removed is there anything 
 you need to we need to do like 
 for further uh maintenance to make sure 
 that 
 nothing breaks 
 yeah that's a great question um so one 
 thing i didn't mention in this talk is 
 that the apis that currently exist to 
 acquire or release the gill like pi 
 begin 
 allow threads i think in pi end allow 
 threads are still used and are still 
 important in this project 
 the good thing is that means existing 
 code continues to work but it can be a 
 little bit confusing and it was one of 
 the things that came up in the hanabi 
 project is that 
 my colleague 
 wrote code not using this and it ended 
 up 
 causing issues essentially the 
 you still have to use those macros at 
 places before the thread would block 
 and it's important for two reasons one 
 is like the critical section api and the 
 second is to allow the threads to pause 
 at the correct place for garbage 
 collection if you don't use the if you 
 skip over that and block while 
 i guess still attach the python 
 interpreter you can risk introducing 
 deadlock in the same way that if you 
 block a thread while holding the gill 
 you can risk causing deadlock 
 so they're still necessary but they're 
 used in exactly the same places 
 right thank you 
 okay one more from the audience 
 thank you i love this work so thank you 
 so much um 
 so i have a question more about the the 
 community in the process so you're 
 you're in the process of submitting this 
 as an upstream patch to to the course 
 device interpreter 
 and 
 i i know that you have been in 
 conversations with people from the 
 corporate development community and 
 the same way that in previous times they 
 say no that's 60 slowdown is too much 
 i'm guessing you have some guesses off 
 what do you need to achieve before 
 saying okay this is ready 
 do you have information about yeah these 
 are the goals that have been reached and 
 the ones that i still have to do more 
 work to reach before 
 the community accepts this yeah that's a 
 great question um in terms of sort of 
 what's acceptable performance 
 i don't know i think it's something 
 we'll sort of have to figure out 
 but to answer the question is no i don't 
 know 
 okay 
 and other things beyond performance like 
 impact on other libraries or stuff like 
 that 
 um 
 so i i mean having low impact in other 
 libraries is clearly important but again 
 it's one of those things where it's it's 
 much harder performance itself is kind 
 of hard to quantify um but impact is 
 even harder so i think it's 
 it's going to be hard to know what the 
 like 
 requirements there are they'll know when 
 they know it so i guess yeah so 
 yeah 
 all right i'm going to take my uh 
 session chair privilege i'm going to ask 
 one more question before i let you go 
 um sam you get to borrow somebody's 
 magic wand for 10 minutes 
 if you could would you give up on 
 reference counting in python and 
 actually go to tracing gc because as we 
 saw from your slides 
 you've had a very complicated and 
 difficult trail to get to where you are 
 with performance 
 so reference counting is now very 
 complicated and it's still causing 
 performance issues 
 my understanding is that tracing garbage 
 collection in a multi-threaded system is 
 just fundamentally more multi-threaded 
 friendly so would you prefer if you 
 could change 
 python history would you go to tracing 
 garbage collection if you could 
 um 
 so the short answer is no i wouldn't um 
 and well this is a tough question so i 
 think i think the like 
 the like typical answer would be yes 
 like it's much easier to get like better 
 scaling there's a lot of issues you can 
 avoid 
 wouldn't have been great if we had gone 
 to cyclic garbage collection but one 
 thing i really like about reference 
 counting in python is that it means that 
 destructors are called 
 as soon as the reference count goes to 
 zero essentially as soon as the object 
 is no longer referenced as long as 
 there's no cycle which is the common 
 case 
 and i found that this makes it much 
 easier to to integrate some c plus plus 
 apis especially ones that handle 
 external 
 resources either lots of like 
 memory in on the cpu or gpu memory 
 before this working on this i worked on 
 pi torch and before that torch 7 which 
 was written in lua 
 and lua has a cyclic garbage collector 
 it doesn't use reference counting and we 
 ran into issues 
 pretty frequently due to the garbage 
 collector 
 so switching to python and reference 
 counting was actually really nice in the 
 process as we were going from torch to 
 pie torch so i i i like reference 
 counting i feel like that might be a 
 little controversial but um 
 yeah i'd keep it it's good news and bad 
 news for pie pie yeah all right thank 
 you ladies and gentlemen uh it's coffee 
 time now so go get your caffeine on 
 [Applause] 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python as well the people the people 
 real quite just fantastic it's the best 
 people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 was i got five minutes five minutes 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and to say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 [Music] 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 so 
 [Music] 
 so 
 [Music] 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at europe when i learned about 
 how the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europe python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing uh 
 developer setups which we were just 
 doing just now that's really cool 
 [Music] 
 during our preparations for europe 
 iphone i've learned some animal parts 
 like 
 giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 and python 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python as well the people the people 
 real quiet is just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd cam for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing was i got five minutes five 
 minutes to prepare for a session share 
 and then after all i got loads of people 
 coming saying thank you and say that 
 they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 so 
 [Music] 
 [Music] 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess the 
 community the people 
 and talking 
 and learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europe python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing uh 
 developer setups which we were just 
 doing just now that's really cool during 
 uh our preparations for your python i've 
 learned some animal parts like uh 
 that giraffes have actually vocal 
 vocals and they can speak everything 
 everyone does with python and that's 
 probably one of my favorite things and 
 is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i thought i learned 
 a lot about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about europa 
 is well the people the people real quiet 
 is just fantastic it's the best people 
 i've ever met 
 for me it's like a 
 nerd come for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that talk 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 it was i got five minutes five minutes 
 to prepare for a session share 
 and then after all i got loads of people 
 coming saying thank you and to say that 
 they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny i think it's 
 just fantastic i highly recommend europe 
 python and hopefully see you next year 
 [Music] 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 so 
 [Music] 
 take one 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to 
 organize maybe the next europe python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the european is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for europe 
 iphone i've learned some animal parts 
 like 
 the ravs have actually 
 vocal vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and all those things 
 knowing people and 
 knowing 
 many different society europa society 
 members and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quite just fantastic it's the best 
 people i've ever met 
 for me it's like a 
 nerd camp for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 it was i got five minutes five minutes 
 to prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and they say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 so 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to 
 organize maybe the next european there 
 that would be fantastic a great city 
 great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europa python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python 
 okay 
 so good morning and welcome back 
 we hope 
 you enjoyed the keynote sort of a cool 
 ideas there for performance which is 
 always nice 
 but the day is only beginning and now 
 we have here 
 uh with us 
 luciano himala 
 luciano is 
 the author of fluent python it's a 
 python book 
 published in nine 
 languages he's a principal consultant at 
 the thoughtworks 
 and also a fellow of the python software 
 foundation 
 lucian is here to present uh 
 typing pro typing.protocol 
 type hints video intended welcome and 
 the floor is yours 
 [Applause] 
 thank you very much 
 uh i think this is the fanciest 
 auditorium that i've ever 
 spoken to 
 i'm 
 hoping to be up to the task so typing 
 protocol 
 type hints as we do intended 
 the title of the talk 
 is a reference to this t-shirt which i 
 wish i i wish i had but i don't right 
 programming the way we indented it 
 so 
 so yeah that's my book 
 um 
 every almost everything that i'm gonna 
 show you today what came out of a lot of 
 research that i did while writing the 
 book 
 the second edition has more than 100 
 pages about type hints and other new 
 stuff 
 so 
 we're going to talk about 
 four things 
 what is a type 
 the four modes of typing 
 some typing protocol examples and a 
 conclusion 
 okay 
 so 
 what is a type 
 so this is a direct quote from pep 483 
 the theory of type hints 
 which was written by widowfan josue and 
 ivan lewinsky 
 so there are many definitions of the 
 concept of typing the literature here we 
 assume that type is a set of values 
 and a set of functions that one can 
 apply to those values right 
 uh 
 for me my first understanding of types 
 was very 
 very much focused on on the 
 the set of values because you think 
 about okay so you have the set of 
 the complex numbers and then you have 
 the real numbers and then you have the 
 integers 
 and so on 
 but that's in the beautiful pure world 
 of mathematics 
 in the real world 
 there are some 
 small issues right reality is 
 complicated reality is more complicated 
 than math 
 so 
 i have an integer 
 and then i convert it to a float 
 looks all right except that one is not 
 equal to the other 
 right actually in the set of floats 
 there is no float that represents 
 precisely that number 
 and 
 if you import the decimal module 
 it can when you when you when you create 
 a an instance of decimal it shows you 
 then 
 a string representation with full 
 precision 
 and as you can see 
 they are not really the same number 
 although they are pretty close 
 right 
 so yeah 
 a little side note it's interesting that 
 the float type 
 has been has been around 
 for a long time it's basically embedded 
 in all modern cpus right 
 the 
 all the 
 basic operations with floats are 
 embedded in the cpus 
 but it's a type that is more useful to 
 scientists and engineers than for people 
 for instance who 
 deal with money 
 right 
 which is i guess 
 most of us or many of us i don't know 
 so i i i always 
 thought this was kind of weird that uh 
 most mainstream languages don't have a 
 really good way of representing money 
 uh and people try to use float for that 
 but it's not great so decimal is an 
 alternative in python to do that 
 but the set of values definition is not 
 useful for other reasons also 
 because python does not provide 
 practical ways to specify types as sets 
 of values 
 except for a noun 
 in practice in the standard library we 
 have very small sets like 
 the set of the nun type which has only 
 one instance none 
 boo which has two instances 
 and then on the other hand you have 
 extremely large ones with billions of of 
 uh instances right 
 uh the init and the string types for 
 example 
 the 
 the possible values are only limited by 
 uh 
 the width of the pointer in the machine 
 uh 
 so 
 and and also we have no way to say for 
 instance that a quantity type that i 
 would like to use for instance in an 
 e-commerce application to validate that 
 orders are not 
 placed with zero 
 of an item 
 or more than a thousand this could be an 
 interesting safety measure right usually 
 it's rare that you order a thousand or 
 more of something in a retail 
 uh store 
 so you can't say that there's no way in 
 the in python to say that in the type 
 system to express that right 
 for instance also there's no way to say 
 that our airport code is the set of all 
 the 17 
 576 
 three-letter combinations of uppercase 
 ascii letters 
 neither of those 
 sets 
 can be expressed in the in the type 
 systems 
 at least not in the type systems of 
 mainstream languages and certainly not 
 in the type system of python 
 so in practice it's more useful to think 
 that int is a subtype of float because 
 it implements the same interface 
 basically the interface of float has to 
 do with 
 arithmetic 
 and all the operations also apply to 
 integers 
 right 
 and 
 but inks also have a few other methods 
 like for instance those that do bit wise 
 manipulation shifts right shifts left 
 things that wouldn't make sense in a in 
 a float 
 so that's the main reason why we we can 
 think of it as a subset of 
 not a subset a subtype of float 
 because it implements all the types of 
 the the entire interface of float and an 
 additional few methods 
 i put a couple of 
 asterisks here because 
 just yesterday i discovered there are a 
 few float methods that it does not 
 implement okay but they're kind of 
 bizarre one of them is one that 
 generates a hexadecimal representation 
 of the 
 of the 
 of the float 
 but anyway as a good approximation we 
 can think of subtypes and in general 
 that's true for subtypes that they 
 implement the 
 entire interface of the super type in 
 addition to more methods right 
 so for instance here i continue that 
 example 
 by showing that the pipe operator which 
 is the bitwise or 
 you can use it with an integer but you 
 cannot use it with a float 
 right 
 and another example of how 
 it's more useful to think about the 
 the interface 
 is that in in python's 
 static type system 
 we have now the any type 
 and 
 and basically 
 because 
 any value can be assigned to an object 
 variable and any value can be assigned 
 to any variable you can say that you 
 know they are like the universe 
 types right uh 
 but the the the 
 super important difference between them 
 is that the object type implements a 
 narrow interface 
 right 
 pretty much every subli 
 the classes that we create from objects 
 add methods right that don't exist in 
 objects 
 and but any 
 on the other hand is this magical type 
 that is required because of the 
 because of the nature of the gradual 
 type system that we have 
 which means that you know sometimes you 
 you may have a piece of code that is not 
 annotated 
 or you're using a library a third party 
 library that is not annotated so you get 
 a result from there and all that the 
 the 
 type checker can 
 infer is that the return is any 
 right 
 and any satisfies every interface is 
 like this magical interface that 
 contains all possible methods that exist 
 today or that will ever exist 
 right so this is a crucial difference 
 between them 
 so in general if you think of of 
 subtypes 
 as sets 
 you get uh 
 the the biggest set 
 is in the top right object is the set of 
 everything and then you go down down 
 down down to more specific types more 
 specialized type that usually have 
 fewer instances but on the other hand 
 the interface 
 grows 
 right 
 at the top of the our class hierarchy 
 the interface is 
 narrower 
 and as you go down it gets wider more 
 specialized and gets more methods 
 so from that definition of pep 
 483 we are going to adopt 
 that point of view that 
 a set is a set of functions that one can 
 apply to those values a set is defined 
 by the set of functions that you can 
 apply to an object 
 right 
 and then here's another another quote 
 from 
 from small talk 
 and 
 i'm not talking about small talk just 
 because i have a great beard i'm talking 
 about small talk because it's really 
 very it's the type system of small talk 
 is very similar 
 to the type system of python 
 just like the type system of ruby and 
 the type system of javascript 
 and in this motor community they they 
 use this term protocol right so this 
 this this quote is from one of the 
 designers of small talk 
 every object in small talk even a lowly 
 integer has a set of messages a protocol 
 that defines the explicit communication 
 to which that object can respond 
 in small talk there was no explicit way 
 to declare a protocol 
 but some 
 browsers that you use to code to code in 
 small talk did present 
 clusters of methods 
 as a protocol 
 and of course a class could implement 
 several protocols 
 so that was 
 the way they used it more as a as 
 metadata for the programmer than 
 something that was checked 
 right 
 so 
 the main takeaways from this first part 
 is that types are defined by interfaces 
 and protocol is a synonym for interface 
 right so that's where the name from 
 the name of the typing protocol class 
 that we're going to talk about comes 
 from 
 now let's talk about 
 duck typing 
 so last time i looked alex martelly 
 who is my friend and also one of the 
 reviewers of the first edition of my 
 book 
 is credited 
 was credited by wikipedia for being the 
 first person who used 
 in a written message 
 that you can find online 
 this dark metaphor 
 i don't know if he invented it but he 
 was the first one who used it in a in a 
 python mailing list to talk about 
 you know to respond to a question about 
 polymorphism 
 that had to do with type checking python 
 you know many years ago when there was 
 no static typing 
 right so 
 the the the idea is that 
 you don't check whether 
 something is a deck 
 you check whether it works like a duck 
 or walks like a duck 
 etc depending on exactly what subset of 
 duck-like behavior you need 
 right 
 i started using python in 98 
 and at the time there was no abcs there 
 were no abcs in the standard library 
 so 
 in the beginning i was a little bit 
 mystified by 
 the appearance of of phrases like 
 oh this function takes a file-like 
 object 
 okay 
 what is that there was no definition 
 anywhere right 
 but it was a common practice to to have 
 these kinds of uh of expressions i think 
 there's still 
 phrases like that in the documentation 
 a buffer-like object is another thing 
 that is super important for data science 
 there was a then there was some 
 formalization of what that means but um 
 the interesting thing is 
 the precise meaning of a file like 
 object depended on the context 
 right 
 sometimes all you needed was i need 
 something that has a read method that 
 returns bytes for instance 
 that's file like enough for me in this 
 moment 
 does that make sense 
 in another situation maybe you need 
 something that has a closed method or a 
 right method things like that right but 
 it was always very very informal similar 
 to how it was informal in 
 in small talk as well 
 so one definition that you can give if 
 somebody asks you what's the difference 
 between a 
 a protocol in an interface 
 uh you know if we are not talking about 
 static typing 
 you can say that protocols 
 traditionally were informal interfaces 
 that were not defined 
 explicitly in code 
 but where but 
 where the code depended on 
 one of 
 those interfaces 
 or on a few matters to do something 
 right 
 so 
 for instance when i i i've talked python 
 to lots of people and most of my 
 students over time 
 came from 
 statically typed languages like 
 java mostly in 
 simplest plus c sharp 
 and so i always like to show them this 
 example of a very 
 simple function double 
 to illustrate uh 
 duct typing right 
 so i create this single function double 
 and i can i can use it with 
 an int 
 with a float 
 with a 
 complex 
 with fractions 
 and those are all numbers but i can also 
 use it with sequences 
 right 
 so 
 what is the 
 the idea here is what is the 
 the protocol that double expects 
 x to fulfill 
 double expects that the argument x is 
 able to multiply itself 
 by an integer 
 that's what is implicit in that code 
 and this is 
 why all of those objects support that 
 because 
 under the covers they implement a method 
 called 
 thunder move 
 right 
 so 
 thunder double on the scar in front 
 behind and 
 uh 
 some special name 
 then their mu is the is they actually is 
 actually the method that's 
 any class that you write can implement 
 to support the 
 the multiplication sign this operator 
 right 
 now here's another example a more 
 dramatic example 
 so i have this simple class that 
 represents a train 
 okay 
 and it's only attribute is a length 
 that is 
 established when it's 
 constructed 
 and so then we have the dunderland 
 method that returns the length and we 
 have the 
 undergear item method 
 [Music] 
 and basically checks whether the 
 the i 
 is uh 
 within the range right from zero to 
 length minus one 
 and if it is then it returns a string 
 saying card number search and such right 
 otherwise it raises index error 
 so for instance 
 if i have 
 if i build a train with three cars 
 and i ask the length of the train i get 
 three so this is the typing right 
 notice this class inherits uh implicitly 
 from objects there's no other special 
 class that i'm using here 
 so what makes something work with len in 
 python is 
 basically 
 for butanes python has a shortcut okay 
 built-in and extensions like extensions 
 written in c or rust or or 
 other languages can implement 
 in in those lower level using this the 
 python c api what is called as lot 
 that will 
 respond to the land but even if you 
 don't do that there is also you know 
 some uh 
 it's funny because the c code of python 
 is kind of object oriented c okay not c 
 plus plus object-oriented see there's 
 this kind of a nested structures 
 uh in which the 
 everything that has a a limb 
 everything that has multiple items in it 
 uh has a field that python can inspect 
 immediately to know 
 how many items there are 
 okay so that's very fast because it 
 doesn't involve any method call but if 
 that 
 field doesn't exist 
 then python will try and find whether 
 there is a dunderland 
 implementation either in the 
 low-level language or in python if it's 
 a python object right so that's how lan 
 works 
 and it's 
 an example of duct typing right 
 you don't need to inherit from anything 
 to implement to support land you just 
 implement that method 
 the second example is 
 uh 
 what triggers the undergrad item method 
 right 
 uh 
 and 
 again another example of of duck typing 
 but the third example is really dramatic 
 because 
 the the the target of a for loop 
 in this case the the t 
 is supposed to implement an interface of 
 iterable right 
 uh and how do you implement the 
 interface of iterable formally you 
 implemented under ether methods 
 that returns 
 an iterator which by which is another 
 interface that implements that then the 
 next method 
 however i didn't implement the 
 underrated here 
 okay 
 but anyway in regular in a regular duck 
 type of language you would any class 
 that would implement then they really 
 would work for iteration 
 but python goes even further than that 
 because that's so fundamental 
 iteration is so fundamental to the 
 language 
 and also to support legacy codes 
 it's it just so happens that uh 
 the python machinery 
 this is actually built in the ether 
 butane function 
 the the attributing function 
 looks to see if the object implements 
 the underrated 
 but if it doesn't then there is a 
 fallback and the fallback is 
 does it implement then they get item 
 and then it tries to send uh 
 a zero you know it tries to call the 
 undergrad item with a zero arguments 
 and if that works then it starts 
 iterating by providing 
 more indexes 
 until the underground item returns index 
 error right so this is kind of an 
 extreme example of duct typing right of 
 the the machinery of the language trying 
 to use the the object even when the 
 object doesn't 
 implement one particular interface it 
 falls back to another interface and 
 and 
 does what you expect 
 right 
 okay 
 so 
 now i'm going to show the first example 
 of uh of a protocol 
 and this i think is the best example of 
 a protocol in the whole talk 
 is 
 the most similar to the kinds of 
 protocols that you are likely to use in 
 your 
 in your job 
 so what i'm saying here is i have a 
 function called run file 
 and it takes one argument called source 
 file which is a text reader 
 and then immediately above there's a 
 definition 
 right of a class that inherits from 
 protocol 
 right 
 and that definition is exactly like it's 
 like i wrote it here the the ellipses in 
 line 203 is part of the syntax 
 okay 
 the ellipses is telling you that um 
 the body is omitted instead of pass 
 which explicitly say 
 says this doesn't do anything 
 it's what what this is saying is 
 the body will be defined somewhere else 
 it doesn't matter what the body is 
 so 
 in order to satisfy that 
 that protocol 
 an object any object in the world can 
 satisfy that protocol by implementing a 
 read method that returns a string 
 that's it 
 okay 
 so and often you you you will see code 
 like that where the interface is defined 
 right above the place where it's used 
 this is common we see that a lot in go 
 code and why am i talking about go code 
 because go 
 is the first mainstream language that 
 that is statically typed but also 
 supports this idea 
 of declaring protocols 
 notice that 
 whatever clas whatever class i use to 
 pass to produce a text reader doesn't 
 need to inherit and in fact they won't 
 inherit from text reader 
 all they have to do is to implement the 
 interface 
 okay 
 so the benefits of using typing protocol 
 are that you can preserve the 
 flexibility of duct typing 
 so you can let your clients know what is 
 the minimal interface expected 
 regardless of of class 
 hierarchies 
 you can support static analysis 
 right ides in linters can verify that an 
 actual argument 
 that appears in a call site for the 
 run file function 
 doesn't does satisfy the the protocol 
 right and you reduce club coupling 
 because the the client classes don't 
 need to subclass anything 
 just implement the protocol and this 
 also makes testing easier 
 right 
 because 
 if you need to create some kind of mock 
 to test 
 all you have to do is implement that one 
 method you don't need to inherit from 
 anything 
 right so 
 let's talk about the four modes of 
 typing 
 we all know there's this 
 duality between you know static typing 
 dynamic typing 
 and this has to do with when the types 
 are checked right static typing 
 is designed to support static checking 
 which is checking them by tools and 
 compilers and so on and runtime checking 
 is 
 i mean dynamic typing is it was invented 
 to support runtime checking all right 
 the authors of the of the type of the 
 type hints pap promise that python will 
 remain dynamically typed okay 
 but actually the situation is more 
 interesting than this the situation is 
 that we have 
 uh 
 this act this two axis 
 where 
 besides the static checking and runtime 
 checking we also have the issue of how 
 the types are defined 
 or identified 
 so in static typing 
 of languages like java 
 you have nominal types things belong to 
 a type because it's explicitly declared 
 you inherit from something or you 
 implement an interface 
 right 
 but 
 with duck typing what we have is 
 structural types which means objects 
 belong to a type because they implement 
 a certain interface 
 but they don't need to explicitly 
 declare anywhere that they do implement 
 they just have to actually implement it 
 right 
 so these are like the two opposites 
 but this diagram actually has all other 
 other areas 
 this area alex martelly when uh he was 
 uh reviewing my first the first edition 
 of my book he invented this term goose 
 typing 
 i'm not i don't have time to talk about 
 that 
 but basically that's the use of abc's 
 to do explicit type checks at runtime 
 and then uh 
 lucas langa and others 
 lucas is speaking right now at another 
 room here 
 they uh 
 proposed pap4 pep 544 which 
 structure of the typing or 
 the idea of i mean structural subtyping 
 or the idea of static duct typing right 
 like typing 
 static typing 
 so and that's supported by typing 
 protocol 
 okay there are other languages that that 
 support things in those quadrants 
 see go appears in the static like typing 
 quadrants 
 but also in the goose typing quadrant 
 because it has mechanisms for type 
 assertions at runtime 
 and so on 
 okay so let's see some more examples 
 we were talking about the double 
 function how do we how could we 
 annotate that with a protocol 
 so can we do that 
 yeah okay 
 this has a serious problem 
 the problem is 
 the type checker will complain 
 that the object type doesn't implement 
 another move 
 does that make sense so this code 
 without looking at anywhere else the 
 type checker knows that this code is 
 invalid 
 okay 
 can i use any 
 yes 
 but it's useless because it's the same 
 thing as no annotation 
 the any 
 annotation pretty much defeats type 
 checking 
 you have to use it very carefully and 
 like an emergency 
 exit 
 i could do this and say that 
 x is a sequence of t 
 and here i have to introduce this idea 
 of the type var right because uh 
 sequences is a generic 
 uh 
 abstract based class so i have i'm 
 saying this if i get a sequence of of 
 floats i'm going to return a sequence of 
 floats if i get a sequence of strings 
 i'm going to return a sequence of 
 strings this is what the type variable 
 is doing 
 right 
 when the type checker analyzes this 
 it gets a you know a concrete example of 
 a call site it looks at the type of the 
 of the 
 of the elements in the sequence and then 
 it binds t to that type 
 and then it will and and infer that the 
 return is a sequence of that same type 
 okay 
 so this only works with sequences it 
 doesn't work with numbers 
 so the solution is to create a a 
 repeatable protocol 
 so the repeatable protocol is saying 
 that uh 
 is anything that implements under move 
 and that takes a repeat account which is 
 an integer 
 okay 
 and now i can say that x is a repeatable 
 and this returns a repeatable 
 are we done yet 
 no 
 because now when i call double 
 the result that i get 
 is inferred to be something that only 
 implements the move 
 and if you need to do other kinds of 
 operations with the object you won't be 
 able to the the type checker won't let 
 you of course at runtime everything 
 happens right because that's the 
 characteristic of the gradual type 
 system of python at runtime only the 
 dynamic types exist there's no 
 constraint but the type checker will 
 point out that you know if you try to do 
 something else with this result 
 notice the result only supports than the 
 move because that's what it says 
 so 
 the way to solve this 
 is a little bit more involved you need 
 to 
 to create another type var 
 so the protocol is the same 
 okay the new thing here is this type var 
 here 
 and here i'm saying that 
 rt 
 can be bound to any type 
 but it has to be limited by i don't like 
 the keyword argument bound i think they 
 should have used another word for this 
 maybe limited or upper bound or 
 something but because there's this the 
 binding of the variable and the bounds 
 which is kind of a 
 a boundary right 
 what this is saying is that 
 we rt 
 can only accept 
 something that is repeatable 
 but because of the way that this 
 variable is declared 
 the actual type of it 
 will be preserved as well 
 so if i if i pass 
 a float 
 this will uh the type checker will be 
 able to infer 
 first it will be it will it will accept 
 the float because the float implements 
 the remove 
 and it will uh 
 understand that this returns a float 
 okay 
 so that's uh one thing that we need to 
 do in this case 
 so 
 when i discovered these things i was 
 doing research for the book and that was 
 the time of python 3.8 when 
 typing protocol was introduced 
 there is this project called type shed 
 right which has the type annotations for 
 the standard library and other projects 
 and i i contributed several fixes by by 
 implementing protocols there so for 
 instance this there was this bug that i 
 found 
 that there's a 
 the medium low the median low 
 function in the statistics module 
 actually works 
 with 
 strings with a list of strings 
 okay and there's an example 
 just like that in the documentation 
 so but it wasn't but at the time 
 we had a false positive which was 
 that if i passed if i 
 submitted this code to a type check it 
 would complain and why is that because 
 the 
 the annotation at the time was saying 
 that 
 the argument had to be 
 an iterable 
 of an of number 
 and number was a 
 type that they invented there which was 
 the union of eighth float and complex 
 that they are influence 
 fraction i think 
 anyway 
 it didn't work with with strings 
 the annotation although the function did 
 work with strings right so the solution 
 was to create this sortable 
 protocol and again you see the same 
 formula that we saw before right you 
 have a protocol 
 and you have 
 a type var which is bound to that 
 protocol and then i can use that type 
 var 
 to say that median law accepts an 
 iterable of sortable t 
 which is the type the type of r 
 bound to sortable 
 and it returns a sort of ut 
 right 
 when i when i contribute that that i 
 looked around and i found many other 
 places in the python 3.9 standard 
 library where we could improve 
 the 
 annotations by using protocols 
 okay 
 and then there was the biggest challenge 
 for me at the time was the max function 
 the max function is super powerful right 
 like i said i've taught python many 
 times i never saw a student say that oh 
 max is super complicated to understand 
 no 
 it's pretty simple you can pass it an 
 iterable 
 or a series of arguments and then if 
 it's an iterable then you it will return 
 the biggest 
 item in the interval if it's a series of 
 arguments we will find the biggest of 
 the of the arguments right but then 
 there is some 
 optional arguments and so on so it's 
 very flexible easy to use i like this 
 api 
 okay 
 but then 
 somebody posted a bug about that and i 
 tried to fix it 
 the old type hints were like that 
 so overload 
 is something that comes this decorator 
 comes from the typing 
 module and it's its 
 mission is to allow 
 you to 
 to 
 do multiple type annotations uh to 
 different ways of invoking a single 
 function 
 right so it was already pretty 
 complicated my time is running up so i'm 
 not gonna 
 delve into the details here 
 but this wasn't working this was 
 producing that bug 
 that this person reported the bug was 
 that 
 if you passed five and top where top was 
 none it exploded 
 and 
 the solution was this 
 it took me several hours actually a 
 couple days and with support of people 
 more experienced than i 
 in the type system to get to this 
 my first attempt had eight overloads 
 then 
 one of the maintainers of top shed 
 showed me how to simplify and reduce it 
 to only six 
 okay in order to do that because max is 
 written in c i wrote it in python 
 uh 
 to test and so on and what caught my 
 attention was that my implementation was 
 shorter than the declarations to satisfy 
 the type 
 okay 
 so there was a lot of stuff that 
 happened after that if you go look at 
 the code it's not like that anymore i 
 won't go into this details here but it's 
 just for 
 you know for you to know that 
 with time super supports less than 
 became supports greater than and then 
 they invented another name and then they 
 created now what they are using 
 is supports rich comparison which is a 
 union type of 
 supports done the lt and supports the 
 under gt which means that 
 in most of those functions that appear 
 in this 
 list here 
 that have to do with ordering stuff 
 what they do is they accept 
 the current annotations accept something 
 that supports either less than or 
 greater than either way it will work 
 okay 
 there are some protocols in the standard 
 library 
 most of them have to do with numbers 
 because unfortunately the numeric tower 
 remember the numeric tower 
 it's completely broken for use with type 
 typing 
 and why because the base class of the 
 numeric tower which is called number has 
 no methods 
 which means 
 that objects of that class are useless 
 you can't do anything with them 
 so 
 but anyway so they invented those uh 
 uh 
 protocols that have to do with 
 whether something supports a conversion 
 right 
 and one of them for instance are using 
 in one example in the book which is 
 supports index so parts index is a 
 particular 
 protocol that means 
 that the object implements then their 
 index 
 which as opposed to then their inks 
 which floats also support 
 to convert to ink then they're uh 
 their index is supposed to be 
 implemented only by integral types so 
 for instance if you use numpy all the 
 integral types of numpy supports 
 implement the thunder index method so 
 they can use be used as indexes 
 okay 
 so to summarize 
 i recommend that you use typing protocol 
 to build pytonic apis 
 in fact 
 you can see that the standard library is 
 very platonic although there are parts 
 of it that i don't consider very pytonic 
 but most of it is very platonic 
 and the standard library really cannot 
 be annotated without the use of typing 
 protocols right so 
 you you should use typing protocol 
 because then you can support that typing 
 with type hints 
 and duct type is the essence of python's 
 data model and standard library 
 this allows you to follow the integrated 
 segregation principle the i in the in 
 the 
 solid principles 
 which means that 
 client code should not be forced to 
 depend on methods that it does not use 
 you know i remember when i used to code 
 in java 
 sometimes you had to implement methods 
 just to satisfy the compiler right 
 and 
 this is a recommendation that i learned 
 from 
 studying go 
 okay 
 pro narrow protocols are 
 the best okay 
 most protocols that come in the go 
 standard library have only one method 
 and that's how your protocol should 
 should 
 do as well 
 that's why 
 trying to think of an interface in terms 
 of an abc or a java interface with the 
 many methods is not a good way of 
 getting started with designing a 
 protocol okay 
 closing words i have to say these things 
 and every time that i talk about python 
 typing okay 
 being optional is not a bug or a 
 limitation of python type hints 
 it's the feature that gives us the power 
 to cope with the inherent complexities 
 annoyances 
 flaws and limitations of static types 
 so 
 please do not decide in your team that 
 everything has to have type hints always 
 okay that's the only way to use a type 
 checking this is in the strictest 
 possible mode this is really bad it's 
 like deciding that every code has to be 
 a hundred percent test covered 
 no 95 percent is good enough a lot of 
 times okay 
 so that was my talk 
 thank you so much i don't know if you 
 have time to go for questions maybe one 
 question yes 
 thank you very much 
 we have time for one question just 
 remember to go to the microphone so that 
 everybody can hear it 
 yes please hey obrigad thank you for 
 your talk lucian i'm asking as a 
 beginner in typing 
 i could not follow why when we define 
 the repeatable protocol 
 why do we say that mo will return 
 something 
 that's also repeatable why don't i say 
 that i'm just returning 
 anything let me see 
 so 
 the repeatable pro 
 this 
 yeah yeah exactly so yeah so what's the 
 specific question 
 why am i saying that then thermal will 
 return t 
 is it is it something that either side 
 or is it the typically the thing that 
 makes sense 
 yes it's something that you decide but 
 this is how i i i it this is how i see 
 the 
 because the idea of this double function 
 is that it repeats something 
 if it's a number that means multiplying 
 by two but if if it's a sequence it's 
 repeating it 
 and that's actually how why i called it 
 repeatable and repeat counting in 
 in both of those cases the type will be 
 the same 
 the output type will be the same as the 
 input type 
 does that make sense yeah 
 yeah actually this is the right solution 
 right 
 sorry that one was has the problem and 
 that this one is the one that is correct 
 because it uses the 
 bound type var 
 okay 
 okay so uh 
 you can uh catch up with uh luciano uh 
 well during off break or during lunch 
 thank you very much for the presentation 
 and let's give him wrong applause 
 [Music] 
 oh 
 no no okay 
 so 
 cool uh so for our second uh talk this 
 morning so we have lisa ushua liza is a 
 developer working towards a more diverse 
 and fun python community 
 she's an organizer of by ladies munich 
 and also a developer advocate 
 for ivan 
 she helps users understand databases and 
 cool things with them besides python she 
 likes cyberpunk movies tea and human 
 languages welcome and the floor is yours 
 hello 
 so 
 good afternoon good morning 
 today we're going to be talking about 
 super search with open source and python 
 my name is laissez 
 so a little bit about me i work for ivan 
 actually at ivan we manage open source 
 databases and i really like python i 
 worked with python for a long lot of 
 years 
 and i happened to live in the city of 
 munich and i decided to organize 
 palettes munich 
 chapter there 
 you can follow me if you want to know 
 more about python events i'm always 
 attending 
 so today what we're going to be talking 
 i'm going to talk about what is open 
 search 
 why should you consider open search in 
 your project 
 and i will also 
 show you how to write some search 
 queries in a live demo so wish me luck 
 because live demos almost never work 
 so what is open search 
 uh if you are familiar with alaska open 
 source is a direct fork of elasticsearch 
 version 7.10 it actually has been a year 
 and 
 now open search is in the version 2 
 already and they do monthly releases 
 kind of yeah it's very frequently the 
 releases for open search 
 if you don't if you're not familiar with 
 alaska open search is also okay uh i'll 
 also explain you that so open search as 
 it says in the name is open source and 
 is also a search engine name it has 
 support for rest api so if you are a 
 back-end developer or front-end maybe 
 you're already familiar with it and you 
 don't need the extra language to deal 
 with open search but it does have 
 support for 
 many languages in part python is one of 
 the 
 go php and java 
 it also offers you analytic suite i 
 think it's offensive word to tell you 
 that you can actually draw some 
 insights from your code or from your 
 data and with the open source dashboards 
 and a lot of companies actually use open 
 search not for search engine but to 
 analyze their logs so they kind of send 
 the logs there and it gives you a great 
 overview 
 very very fast open search is very fast 
 so why should you consider open search 
 uh when i think about open search i try 
 to actually focus in the superpowers of 
 open search so 
 if you think oven search would be a 
 superhero 
 what kind of superhero would open search 
 be 
 so i would say that open source would 
 speak several languages because it does 
 have support for more than 30 languages 
 so for example not 
 programming languages human languages 
 like germa spanish portuguese so when 
 you're sending your data to open source 
 you can specify which language it will 
 be 
 it's defined for and we will optimize 
 for search 
 i also thank you for massage would be a 
 hero it will be able to 
 read your mind 
 because you can 
 you can implement auto completion i 
 think this is something that you may 
 have seen 
 uh in such engineers you are typing 
 something and kind of tells okay maybe 
 this person is looking for this base in 
 your relevance or some 
 information about you 
 so this is something that you can also 
 do with open search 
 and if you think that 
 open source could understand so many 
 languages more than 30 
 uh the question would be can open search 
 understand my broken english 
 the answer is yes because you do have 
 fuzz searching so even if you mistype 
 something or yeah if you have small 
 mistakes open source still will be able 
 to bring your results 
 and if you're familiar with 
 different databases that actually you 
 have to provide a mapping or 
 some sort of 
 definitions from the beginning 
 with open source you have something 
 called dynamic mapping what is that with 
 dynamic mapping it actually you can just 
 send your data to open search and it 
 would 
 figure out what kind of field is in the 
 data is it a text is it a float or 
 any kind of material so but you can also 
 define you so you have this flexibility 
 so it's quite cool 
 so this would be some of the reasons uh 
 i would say 
 why you should consider open search in 
 your projects 
 now i'm gonna go over some search 
 queries uh 
 actually for that i have we're gonna be 
 using the python open search client uh 
 lots of data uh we almost in the launch 
 so i pick up some launch some recipes 
 for us work and you can find it here in 
 this repository you can scan the qr code 
 or you can just go in the github and 
 work it 
 the data looks a bit like this so you 
 can see the directions like how to 
 prepare the food and there are several 
 fields here like data categories etc etc 
 so 
 i will show you now if you go to the 
 repository you can see it here in the 
 readme 
 where do i take this data from 
 what kind of support 
 is there or what kind of queries i have 
 it here so i took the data from the 
 kegel recipes and you can also take it 
 from there 
 and yeah you can see it here how to 
 install and how to get started so for 
 our first 
 i already have a open search cluster 
 running so i'm not going to set up 
 everything and i already sent the data 
 but it's also you can find it here in 
 the repository how did i do this so now 
 i will focus on the queryings the first 
 one that i decide to 
 look for so actually you can just go 
 here and look for help and it will show 
 up what kind of 
 queries you have it here 
 so let's go to the first one is the 
 match 
 so if i look for here and i look in the 
 match and in the match i'll be looking 
 in the title 
 for something very exotic so the most 
 exotic thing i could think about was 
 chocolate and garlic so that's what 
 recipe that we're gonna try to find out 
 i'm not sure who would eat this but i 
 think i would eat this actually i like 
 to try new things so let's see if we can 
 find out something here so if i press 
 enter and you can see it here that 
 actually i do find some recipes 
 the first one is chocolate garlic like a 
 toaster bread and the other ones are 
 just have garlic on the title 
 you must be wondering like okay if i'm 
 looking for chocolate garlic why is that 
 i'm getting just recipes with garlic 
 the question the answer is that when 
 you're working with the mesh square 
 there is an operator that by default 
 uses or so actually what he's doing is 
 looking for chocolate 
 or garlic or chocolate garlic and it 
 will bring this results based in score 
 so that's why the first one is actually 
 the most 
 uh that has the two words but if you we 
 want actually to find 
 only chocolate and garlic we could also 
 define the operator 
 and 
 that's what i will do now whoops 
 here so you can see that i can i found 
 out yeah there is just one and i will 
 definitely try 
 you must be wondering like what is the 
 syntax i will also show you so in the 
 match square the syntax kind of looks 
 like this so i do have a open search 
 client 
 and there is a method called search 
 and i have to specify which kind of 
 index i'll be looking for 
 and i write the body with the query 
 which is a python dictionary and here i 
 define which kind of query it is which 
 is the match one and which field i'm 
 looking for this 
 and cherra we have it here chocolate 
 garlic i have specified the end operator 
 here so it's pretty straightforward 
 now b1 you must be wondering for example 
 if i try out here 
 if i change the 
 position between chocolate and garlic 
 i start with garlic and finish with 
 chocolate would i still get some 
 match 
 do you think i've still got so much can 
 you raise the ring 
 okay i think everybody knows a lot about 
 open search but yes 
 you would get some matured you still got 
 the same one that we saw 
 the thing is with the match the position 
 of the words that you are looking they 
 are not important they are not so 
 relevant you still will bring results 
 but in some case for example if you are 
 looking for someone's name in a database 
 and if you 
 switch the surname with the name uh 
 maybe you end up with someone different 
 so in some cases you do want to consider 
 the order of your query 
 so for that you would use match phrase 
 and i will show you with an example what 
 is the match phrase 
 so if i have here 
 search.by 
 match 
 oops 
 match phrase 
 and i'll be looking title 
 and i can define what i'm going to be 
 looking for for example if i'm looking 
 for 
 cake coconut 
 and we're going to see what we can find 
 actually we don't find anything here 
 but i wonder okay i do have 20 000 
 recipes 
 i didn't find anything correct here 
 because in the match phrase here as it 
 is right now 
 it is looking exactly for those words in 
 this order nothing between nothing 
 swapped anything so of course if i 
 correct that for coconut cake with the 
 right word in english 
 i can see some results 
 and this makes sense right but 
 yeah even if you still want to see like 
 okay the relevance of the uh is a bit 
 important and but i'm wondering okay can 
 i give some flexibility to the metaphase 
 yes so in this case if we want to 
 correct the previous one and give some 
 flexibility in the match press there is 
 something called a slope parameter so if 
 the slope parameter works like this it 
 allows the allowed distance between the 
 words 
 in this case by default is 0 so it means 
 that these words have to be in this 
 order to actually bring some result but 
 if i 
 if i actually now give a slope of one 
 it should work so yeah actually here you 
 can see that now i've i found cake with 
 coconut and so on if i give a slope of 2 
 it also works and now we have even more 
 because i'm giving more flexibility how 
 this position of these words would be 
 but i'm a very visual person and even 
 with this uh maybe it's a bit confusing 
 what is actually the slow parameter 
 so i will show you what this little 
 parameters of here is a document that we 
 inquired and this is our query so in 
 this case 
 if we try to identify slope has one what 
 we 
 what it tries to do is actually okay let 
 me see a combination of this if i change 
 the position of one of this word would 
 still work 
 yes so basically the coconut could be in 
 position three and the distance would be 
 just one and it would work 
 another example i could give you is like 
 that i fixed the coconut cake or the 
 cake coconut 
 because they are swapped so if actually 
 i try with a slope of two uh if you will 
 bring the 
 position two to the position one and the 
 position one to the position two and 
 then you will find it so i hope this was 
 a piece of cake to understand it's 
 pretty interesting this kind of 
 flexibility because you don't expect 
 always that the reader 
 writes exactly what they want so it's 
 important to give this flexibility 
 now we're talking about fuzzness and for 
 that 
 i try to think about an example that 
 it's 
 a bit complicated for me sometimes for 
 example they 
 i'll be using the match one and i'll be 
 looking in title for something that 
 sometimes it can get wrong like the word 
 dessert 
 so that is desert and that is dessert 
 and they're very similar they even sound 
 similar when you say it but one is salty 
 i guess and the other one is sweet so if 
 i try to mistype here and look for fruit 
 so if i'm looking for a dessert here 
 i will probably not find anything 
 because it's incorrect word but there is 
 something called like fuzziness 
 which we can define 
 let me see if i wrote correct 
 has one for example and now we can 
 actually find something because the 
 difference between desert and dessert 
 is 1s so the fastness if you configure 
 it to one you will be able to get some 
 results 
 how would it like be in a more 
 conceptual way or like more general one 
 so for example if words are uh different 
 or for example if you 
 remove words or actually increase words 
 this all count has one distance 
 it's it uses something called leverage 
 time distance to actually calculate this 
 but it's pretty straightforward is about 
 uh this last one is about transpose of 
 two uh 
 letters that are close to each other for 
 example and this is how you calculate 
 the firstness 
 but you know i think sometimes like you 
 just have your data you don't know what 
 is 
 how many mistakes are there or what 
 would be the best way 
 actually there is a parameter called 
 auto that i want to show you that you 
 can do that for easily so here is like 
 how the syntax works 
 you have the match and you have the 
 title and in this case you have the 
 query and you give the fastness and then 
 you can also put auto so in this case if 
 i actually have it here has with auto it 
 will automatically look for what would 
 be the best fastness to be used 
 depending on the size of the word so for 
 long boards we're going to be use a 
 little bit more and for smaller words a 
 bit a bit less 
 this is important to notice that 
 if you don't configure your fuzziness 
 correct you may end up with no relevant 
 results because if you swap everything 
 it may become an another word and it's 
 not relevant for you 
 the last one that i want to show you is 
 actually i want to try to find out 
 one recipe with a guinness i know you 
 can't drink it but can you cook with it 
 so let's see if we can find something 
 so 
 i would just use 
 the match one again and 
 actually i have to specify the file and 
 i was match 
 and i was a title 
 and the look for the word 
 guinness which i hope i write correct 
 if i'm not you have to tell me 
 but yes so for example this one is quite 
 simple i'm just looking for guinness and 
 match square it use it gives you this 
 card so you see it here there's more 
 starter which probably not nice but 
 there are some cakes too here so i think 
 that's 
 it but i have just to show you 
 dashboards so open source also have open 
 source dashboards would be similar to 
 the kibana ones uh but yes looks like 
 this you can 
 draw visualizations out of the box and 
 you can also do queries from there 
 without any with rust api for example so 
 that's it for today and you can find the 
 demo here uh yes 
 thank you 
 okay so um thank you very much for the 
 talk we do have uh 
 time for questions and uh again 
 just 
 come to the microphone 
 so that 
 people watching online can also hear it 
 and people on back so 
 yes 
 do you know what the difference is 
 between 
 elasticsearch and open search 
 from the version 7.10 they are the same 
 but since then they are different 
 projects and they are developing 
 different so actually i didn't look so 
 much in the chain of log of alaska 
 search more what was the last release of 
 open search 
 thank you welcome 
 so do you have any other 
 question in the room yes 
 so you are seeing that 
 we can 
 replace 
 elasticsearch with open search 
 is a question right it depends on your 
 user case because there are some plugins 
 or some things that they didn't allow uh 
 compatibility so it really depends uh 
 what kind of tools are you using but 
 from the client if you are using the uh 
 and a way to migrate it like if you are 
 writing in the latest one and one you 
 have to go back from last search version 
 7.10 and then do the migration to open 
 search one zero zero and then go to open 
 search to zero zero that would be what i 
 would do if i would be migrating clients 
 okay 
 thank you 
 welcome 
 actually open search maintainer is also 
 here so if you have more questions you 
 can also talk with him 
 he's right there 
 yes 
 thank you for your contribution 
 so uh do we have any other other 
 questions 
 they are hungry we have a few minutes 
 no it's okay so if you want to talk with 
 me we can also talk after the talk thank 
 you very much 
 [Applause] 
 thank you 
 oh my god 
 oh 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next euro python there that would be 
 fantastic a great city great people 
 great beer that that will be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europe python is the gathering of 
 different groups different faults 
 different ideas 
 and but everybody is sticking together 
 with a common language which is python 
 something i really liked learning about 
 which was really cool was these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing uh 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparation for your python i've 
 learned some animal parts like uh that 
 giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things 
 and it's the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and all the things knowing 
 people and knowing 
 many different societies europe is 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python as well the people the people 
 real biter is just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd come for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing was i got five minutes five 
 minutes to prepare for a session share 
 and then after all i got loads of people 
 coming saying thank you and they say 
 that they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today well i learned 
 that there is a great python community 
 in prague 
 and it would be great to organize maybe 
 the next euro python there that would be 
 fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python europe python is the gathering 
 of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 the 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for europe iphone i've 
 learned some animal parts like 
 giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and uh knowing 
 many 
 different societies europa society 
 member and python 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate and join this 
 community i think my favorite thing 
 about euro python as well the people the 
 people real quiet is just fantastic it's 
 the best people i've ever met 
 for me it's like a 
 nerd camp for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing 
 i got five minutes five minutes prepare 
 for a session share and then after all i 
 got loads of people coming saying thank 
 you and they say that they loved it so i 
 think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 take one 
 you are actually very serious when you 
 are recording me 
 what did i learn today well i learned 
 that there is a great python community 
 in prague and it would be great to 
 organize maybe the next euro python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 um well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during our preparations for your python 
 i've learned some animal parts like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 okay 
 so welcome back everyone so we are here 
 for the 
 final talk on this slot 
 and 
 this is 
 game development with circuit python and 
 it will be 
 presented by 
 radomer doperovsky here so he's a 
 python programmer and electronics 
 hobbyist 
 and 
 also 
 into circuit python so enjoy and the 
 floor is yours 
 hello everyone 
 i'm rodondo pierowski and 
 yeah i i in my free time i like to play 
 with circuit python maybe 
 build those nice cool devices and 
 program them 
 but 
 why would you want to make video games 
 with those 
 basically 
 you know 
 when you go to an opera or when you go 
 to a 
 rock concert 
 you can see that there are all those 
 professional 
 people who 
 worked for weeks or months to make to 
 together to make that 
 event happen or even at a conference 
 like this 
 you have a lot of 
 work put into a single event 
 and 
 that's a little bit like an aaa game 
 that you normally buy from a shop and 
 play this is a huge effort of a large 
 number of 
 professional people who who do it full 
 time 
 but uh sometimes that's not the only way 
 to like listen to music to go to our 
 concert right you can 
 you can go to a pub 
 and 
 have some live music in there or even 
 you know have a jam session with your 
 friends or there is a busker on the 
 streets just playing whatever instrument 
 they play 
 uh just on the street 
 and this is the kind of 
 game making i'm thinking about not the 
 aaa professional 
 thing where you know you spent two years 
 a hundred people putting their efforts 
 together but just uh 
 you know a 
 single person 
 sitting down and 
 you know in two hours having a snake 
 or a flappy beard or whatever it's still 
 super fun it's still you can still do it 
 with friends and 
 it's super satisfying and it's a great 
 way to learn 
 so 
 i have some rationals in here basically 
 if you don't want to do it with python 
 on your computer 
 there are all those hoops you have to 
 jump through 
 it used to be much worse now you have 
 the mu editor you have pi game zero you 
 have uh 
 all those tools that make it a little 
 bit easier 
 but 
 it's still 
 difficult if you want to for instance 
 package your game and distribute it so 
 that others can see it 
 and 
 somehow you get this feeling in the back 
 of your head that it's not really a real 
 game like it's it's still feels like a 
 toy 
 but 
 the what if you could uh you know 
 program your own handheld game console 
 uh 
 that that's real enough the games for 
 handheld consoles usually are not 
 that complex 
 they tend to be a little bit 
 simpler and and 
 require less work 
 not always of course 
 so 
 that's why 
 it's nice to to to do it in hardware but 
 why you circuit python 
 with that 
 well it's a real programming language 
 it's uh 
 not 
 like a block based or or you know like 
 scratch or 
 something where you have uh 
 like half of the job is already done for 
 you you just have to fill in the gaps 
 and here you are really in control you 
 are really learning how the game works 
 inside you have to actually write all of 
 the code 
 for it 
 the python language is popular for 
 education so 
 most teachers are already familiar with 
 it 
 and it's also pretty nice for teaching 
 there is great documentation for python 
 itself that translates into circuit 
 python so if you already know python you 
 know circuit python 
 and because the everything is in start 
 on the device you are going to use 
 the circuit python runs on the device 
 directly you don't have to install 
 anything on your computer 
 so if it's a workshop or a lesson like 
 one-time 
 thing 
 you don't have to waste your time 
 installing things on participants 
 computers 
 you also don't need the permissions well 
 you need the permission to use the usb 
 ports of course on the on the computer 
 but that's all 
 and 
 next thing is you are not going to break 
 your computer you are not going to 
 i don't know install something that 
 makes your computer behave differently 
 or you don't you will not have to 
 reinstall your system afterwards 
 because uh all you are changing is that 
 one device you have connected to a 
 computer and that device also 
 is very difficult to break 
 if even if you write code that doesn't 
 quite 
 work correctly or or somehow corrupts 
 the device you can switch it off and 
 along again and it's back to how it was 
 so it's uh 
 you can also feel very safe while you're 
 experimenting and i think that's crucial 
 that you are free to experiment and do 
 the stupidest things 
 knowing that you are not 
 able to 
 break the device with your code 
 next thing is that because this is 
 python this is an interpreted language 
 you don't have to compile anything you 
 don't have to create a hex file and drag 
 and drop it onto the device you don't 
 have to mark about with you know 
 connecting through some serial or 
 holding the device next to your screen 
 to to flash it or something like that 
 it's just uh 
 it's just 
 it comes as a disk and 
 you just see the files that you edit 
 them i i will show in a moment 
 and the last thing is portability so one 
 one advantage circuit python has over 
 micro python 
 is that it has the same interface on 
 every microcontroller that is supported 
 on it 
 so if you write your code for say 
 raspberry pi pico 
 it will still work with maybe minimal 
 changes for for screen or something 
 on the pie gamer or on the 
 piper 
 to get started of course 
 to to make a game for hardware 
 you will need hardware 
 so 
 how how to find that hardware if you go 
 to circuit by circuit python's 
 main website at circuitpygon.org 
 and go to the downloads page 
 i can 
 this is the website 
 this is the download 
 you have a list of every single device 
 that is supported by a circuit python 
 and 
 of course not all of them are suitable 
 for making the kind of gains you want 
 you probably want some kind of a display 
 you probably also want to have 
 buttons on it like here this pie badge 
 looks promising 
 if you if you click on it you will get 
 some more information about the thing 
 you will get 
 links to 
 uh firmware if you need to install it on 
 the device some of those device come 
 already with circuit python installed on 
 some of them you will have to 
 install it on the device first before 
 you can use it 
 and yeah you usually get a link or where 
 you can purchase this device as well 
 and 
 yeah i prepared a short list of 
 devices you can 
 uh 
 you can use 
 like those the most obvious those that 
 have 
 screen and 
 direction pad and you know fire buttons 
 on them of course 
 nothing stops you from making games that 
 don't have don't use buttons use 
 accelerometer or use the touch screen 
 and so on so that's not 
 such a 
 full list 
 yeah so i this is the 
 part where 
 i show you some of those devices 
 so i will start with the 
 devices that with the simplest one of 
 them those are the pupil 
 which uh that's actually upside down 
 and you might be familiar with the 
 batch from uh from 
 euro python from 2019 
 uh that looks like that 
 every participant got one back then it's 
 basically the same device it's just a 
 little bit bigger 
 and 
 yeah with this uh you can use the pew 
 uh library that i will talk about uh in 
 a moment 
 uh 
 there is also if you want to like more 
 advanced games if you want some graphics 
 you can use devices that have screen on 
 them 
 adafruit sells those two devices one is 
 called pi gamer one is called pi badge 
 and the pi badge also has 
 a light version and it has a version for 
 machine learning 
 in there they also will work 
 and they come with both the pure library 
 so they kind of simulate this 8x8 
 display 
 on the screen but they also come with 
 the stage and display or libraries that 
 i will explain in a in a moment 
 oh and i also made a pupil version with 
 the display that you can 
 you can't get it anymore because it's 
 out of stock but 
 a 
 curiosity it does exist 
 and 
 there are also more recent devices like 
 kittenbot has made this 
 meow bit device 
 that is kind of compatible with the 
 micro bit because it has the same kind 
 of connector on it but you can also 
 install circuit python on it and uh 
 make the same kind of games 
 uh as on the other devices 
 and pymoroni has made a 
 pico system 
 that's a very nice solid 
 aluminum case 
 and 
 240 by 240 display you can also use it 
 with circuit python 
 yeah and of course there is always the 
 homebrew option there are things like 
 display modules uh buttons that you can 
 just connect to 
 whatever device you have 
 whatever microcontroller you want to use 
 and 
 you know 3d print your own case or laser 
 cut it 
 and build your own 
 device 
 from scratch i will not be covering this 
 but it's completely possible there is no 
 magic in that 
 okay 
 we can start with the pew pew 
 so i already 
 told you this is the 
 thing 
 that we used as the badge three years 
 ago we only on also had some workshops 
 on europe i don't we will have more 
 workshops during the sprint so if you 
 are interested 
 in trying this out and getting one of 
 you for yourself you can you can come to 
 the sprints and 
 try uh working on them with us 
 they have uh 
 eight by eight display with uh pixels 
 that can have one of the four levels of 
 of 
 brightness basically and they have six 
 buttons for directions and for a and b 
 basically 
 this seems very very 
 simple and very limited but you can 
 actually make all sorts of interesting 
 games with this starting with this 
 snake game you know from the nokia 
 phones 
 but also tetris soccer band 
 boulder dash 
 we have frogger 
 we have otello a logic game 
 with actual 
 computer player that plays against you 
 you could do trackers 
 i guess because 8x8 that's perfect for 
 crackers 
 so there's a there is all sorts of of 
 simple game you could do flappy beard 
 you know 
 and 
 because this is only 8x8 you don't have 
 to create your own graphics so it's 
 super 
 fast for you 
 there is this problem with making games 
 where people start doing the graphics 
 and they just stay there 
 and they get stuck in you know because 
 making graphics is fun 
 but 
 the goal is to finish the game in during 
 during the workshop so 
 if you remove this time consuming part 
 maybe it's a bit less fun but at least 
 you get to finish the game 
 the devices themselves are pretty 
 affordable you can 
 get the pew pews themselves for about 
 ten dollars plus shipping 
 so 
 you also will need batteries for element 
 of course 
 and they are open hardware so if you 
 need your own version of a pew pew you 
 just download the design files modify it 
 in any way you want 
 send it to the manufacturer and any 
 manufacturer you choose 
 and 
 they will make it for you 
 right 
 there 
 sorry about that 
 the library documentation is literally 
 one page of 
 a4 format but we also have 
 example games in there we have step by 
 step tutorials so and we are working on 
 on uh 
 making 
 more useful materials for for 
 teachers basically 
 for lessons 
 by the way if you're a teacher and 
 you're interested in this please find me 
 and talk to me because 
 i'm we we only have basically experience 
 with workshops 
 so any feedback from articular what 
 works in a lesson one what works in a 
 school environment would be very useful 
 to us 
 okay 
 the next one the next one is the one 
 that does actual graphics i can show you 
 i'm sorry 
 and let me switch it on 
 so this is the game selection menu and i 
 can 
 let's say we will select this one 
 so this is an example game 
 written in using the stage library in 
 circuit python 
 of course it also uses some graphics 
 that 
 you have to 
 draw yourself 
 and 
 yeah you can walk around 
 you can shoot you can 
 jump 
 you can climb the layer 
 there sorry for the oh and you can die 
 of course 
 otherwise it wouldn't be a game right if 
 you can't fail 
 so this kind of 
 this kind of 
 games is what i'm talking about here 
 and 
 the library itself is already built in 
 in pi gamer and pi batch and of course 
 the pupil m4 
 you get graphics depending on the device 
 the resolution is a little bit different 
 but you can scale it to the to fill the 
 screen 
 you get sprites you get 
 tiled backgrounds uh you can display 
 text and you can do beeps and that's 
 basically it but it's all you need 
 all the sprites uh all the graphics you 
 use is 16 by 16 images so they are 
 pretty fast to draw 
 they are not too many pixels 
 you only get to use 16 colors in them 
 and 
 you get maximum of 16 frames of 
 animation for them but that's 
 enough for for you know a simple game 
 like this 
 right now we only have two example games 
 in there there is not much documentation 
 there is a learn guide on in the 
 adafruit system but it's just a bouncing 
 ball 
 we don't really have tutorials for a 
 proper game we are working on that it's 
 it's like community effort 
 how it actually works so if you look at 
 the screen from screenshot from such a 
 game 
 you can see there is actually a quite a 
 lot of detail the problem with 
 microcontrollers is that you don't have 
 that much uh ram memory in on them 
 like the the smallest devices i use only 
 have 32 kilobytes of ram 
 that's 
 that's not enough to even fit the image 
 of the screen in that 
 so how do you display anything if you 
 can't even fit your pixels in your 
 memory 
 the idea is that you divide your screen 
 into tiles 
 and each tile uses a smaller pixel a 
 smaller picture 
 and those because those pictures repeat 
 they use much less memory and here you 
 can see we have two la two 
 layers of those tiles 
 one is doing the 
 blue background and the 
 ladders in there 
 and the second one is actually shifted 
 by half a tile to 
 easier make the corners of the of the 
 of the bricks in there 
 and 
 uses a different set of of 16 by 16 
 tiles and then on top of that of course 
 you don't always have 
 things that align to tie two tiles you 
 have you want to have things that move 
 freely like the enemies and the player 
 character and so on 
 so on top of that you can also have 
 sprites 
 and those layers can be mixed in any 
 [Music] 
 in any 
 order you want so you can have tiles 
 that are in front of the sprites as well 
 and you can have text in there as well 
 so that's the basic idea with this 
 the graphics are actually bmp files that 
 contain 16 
 frames in each of the file 
 and 
 yeah those are the 
 example ones from the 
 from the game except i replaced the 
 pink background with white 
 because 
 the pink color is a special code that is 
 transparent in this in this game engine 
 so yeah as i said you use bmp rgif 
 files 
 actually give files the prono proper 
 pronunciation is gif 
 uh 
 and the pink color is transparent if you 
 need to have something pink but not 
 transparent you need to like make it one 
 of 
 a little bit less pink than 
 usually you can tell the difference by 
 looking at it 
 you can create the sprites themselves 
 using 
 the 
 aseprite or liberal sprite open source 
 programs or you can even use pskel which 
 is a web-based 
 graphics editor for sprites 
 so that's 
 you still don't have to install anything 
 on your computer 
 and 
 you also have sound you can play wave 
 files and the 
 easiest way to generate like computer 
 like 
 computer game like sounds like beeps and 
 laser sounds and things like that 
 is to use a utility program that's 
 called sfxl 
 it also has a web-based version 
 so you also don't have to install it 
 you have a lot of 
 you know 
 knobs to turn there to generate the 
 exact sounds that you like and then you 
 it generates a wav file that you can use 
 and then of course you will have to make 
 some maps for your game and things like 
 that and here the engine doesn't help 
 you you will have to be creative and 
 either use text files or maybe json or 
 whatever 
 to make those for itself 
 uh 
 to to actually 
 get the details on how to use this 
 circuit by uh this state library there 
 is a url in here 
 i won't get into details i won't be 
 showing you code because we simply don't 
 have enough time for this 
 and 
 the last way i want to 
 talk to you about 
 making games is by using the 
 display io library so the stage library 
 was uh written by me 
 specifically to make this kind of simple 
 games like platformers shooters and so 
 on and it has a lot of limitations all 
 the sprites have to be 16 by 16 you only 
 get 16 colors you only get a limited 
 number of layers and so on 
 uh i did that all to make it as fast as 
 possible and as fluent as possible in 
 there 
 but 
 there is a 
 library built into circuit python itself 
 that's called display io 
 that 
 sorry 
 that lets you do the all the same things 
 and more 
 without those limitations so you get uh 
 sprites of any size you get 
 bitmap graphics that are loaded directly 
 from the disk so they don't use up from 
 you still get sprites and tiles in there 
 but you also get like vector graphics 
 shapes 
 circles rectangles rounded rectangles 
 text labels uh 
 you get 
 different fonts you can load so the 
 state library has a one built-in font 
 that you can use in here you can 
 you know 
 just 
 use any pdf font you you find 
 the downside of it 
 is that it's a little bit less fluent 
 and might require a little bit 
 faster microcontroller to run 
 and maybe more memory as well 
 but 
 you know it's still and of course it's a 
 little bit more complex to use so 
 uh 
 but it's only for graphics so you 
 game your game is usually not just 
 graphics so you will you have to use 
 also other libraries in uh 
 in circuit python but don't worry they 
 are older they are available there is 
 image loader library that lets you load 
 bmp or gif files 
 uh easily 
 there is audio core audio i o 
 and then 
 either audio pwm i o audio boost o or 
 audio i o itself 
 for outputting sound depending on how 
 you have your speaker connected to the 
 device you will use one of those 
 there is audio mixer and audio mp3 for 
 you know advanced use for sound you can 
 have several things making sounds at 
 once and you can 
 even play mp3 files 
 if your microcontroller is fast enough 
 for that of course 
 and then you have the keypad library and 
 the 
 touch io and analog io libraries for 
 doing the buttons or like 
 you know fruits used as buttons or 
 you know 
 a joystick or whatever you need 
 in your particular device 
 yeah so 
 basically that's it that should get you 
 started you can 
 find me 
 and you can come to the sprints if you 
 are 
 interested in like seeing more details 
 there is also 
 excellent documentation and excellent 
 help available from adafruit adafruit is 
 the company that develops circuit python 
 it's an open source project 
 and it's developed in the open but they 
 hire several full-time developers to 
 work on it and they pay them for for 
 that so so that project is really 
 developing 
 on uh on a good pace 
 there is they have a help with circuit 
 python channel under discord 
 which is the single best place to 
 ask questions about anything related to 
 circuit python 
 and you can also find me on 
 master.technology 
 my nic is the shippo 
 and if you are interested in my other 
 projects and 
 my hardware hacking 
 you can go to hackaday io and 
 search for the shipu 
 you can see everything i 
 do with with hardware in there 
 that's 
 everything i have thank you 
 [Applause] 
 okay so thank you very much for the talk 
 we do have time for questions so uh if 
 you have any questions you can just walk 
 to the 
 mic uh so that everybody can hear it 
 yes hi thank you for a great talk i i am 
 a teacher 
 and so i was interested in those links 
 have you have you tried these out at 
 kids clubs at all um in um sorry can you 
 repeat that have you tried out some of 
 these um devices with kids clubs 
 programming clubs and things like that 
 no so far i have only done workshop with 
 adults 
 and 
 the problem is i'm not very good at with 
 kids i'm a bit scared of doing this with 
 kids so 
 that's one reason why we want 
 feedback from teachers 
 we have made like five or six workshops 
 with 
 with 
 people from all sort of experience with 
 python from python developers to people 
 completely new to python but it was 
 always adult 
 cool 
 do you have any other question 
 any question from remote attendants 
 no okay 
 um so 
 yeah so i got one question just uh to 
 ask uh 
 in the 
 development flow from somebody having an 
 idea of uh 
 developing some game with circuit python 
 and implementing it could could you give 
 us an overview of how that works from 
 well implementing some code i suppose 
 and then how the workflow comes of 
 course 
 actually i can i can show you how you 
 would 
 do it 
 that's actually a great idea 
 i didn't think about it so i have a 
 micro usb cable here 
 and i have the secret python 
 and the 
 batch from 
 three years ago 
 i switch it on 
 it was switched on and it ran out of 
 batteries so 
 maybe i will use a different one 
 yeah by default it displays a menu that 
 lets you select from the games that are 
 already on there 
 but if i connect it to the 
 computer 
 [Music] 
 and of course the law or 
 of life demos 
 sorry about that 
 okay it comes as a disk 
 and on that disk you can see the python 
 files that are on the device 
 now 
 by default it will run the main.py file 
 that's where the menu is 
 coded you can see the code for the menu 
 here 
 actually 
 but if you create a code dot py file 
 instead 
 it will 
 run this by default and you can see the 
 screen is empty because the file is 
 empty it finished executing that file 
 uh 
 i can open it 
 and i can start reading my code so i 
 will start by 
 importing 
 let me make the font habits 
 bigger 
 i'm importing the pure library i need to 
 initialize it 
 i will make a screen 
 image 
 that is by default 8x8 
 i can 
 i can put a pixel that is at coordinates 
 three by three and has color three 
 and i can 
 display it on the display 
 and i will need to have a 
 empty loop at the end 
 because otherwise it will go to the 
 ripple immediately and we will 
 not be able to see anything 
 you can see the display is here that the 
 pixel is visible on the device 
 so if i wanted to make it move 
 from instance i would 
 i would need to check 
 what buttons are 
 pressed 
 and 
 if say 
 i would 
 move this 
 in here 
 if case and 
 pew dot key up is pressed 
 then y 
 is 
 reduced by one 
 we will put 
 x and 
 y as the coordinates 
 we need to initialize them 
 of course 
 and we will need to delete the previous 
 uh 
 website position of the 
 pixel 
 and that should 
 no 
 we will need 
 oh we don't need this like 
 okay that should give us some 
 interaction 
 and i got an error 
 okay so because we don't have a display 
 here i can see the error 
 so 
 the solution is either to use an editor 
 like mu that gives you the access to the 
 serial console or use server console 
 from the terminal i can do that 
 module object has 
 no attribute get pressed 
 that is 
 because 
 it's not called get pressed i mixed up 
 with a different library it's called 
 keys 
 oh i forgot to 
 show it on the screen of course 
 and 
 let's initialize it to something else 
 than 0 0 because 
 we only have moving up here so we have 
 our pixels 
 pixel and if i 
 press the up key it's very fast moves up 
 because i forgot 
 to 
 wait 
 we can wait for 1 6 of a second 
 to have it move slower 
 so that's uh 
 how that's how you begin with the pew 
 pew with a very simple game 
 i want i can't really show you how you 
 begin with graphics and so on because 
 this is you you start 
 with spending two hours drawing your 
 graphics of course so we don't have time 
 for that but we can do that during the 
 sprint if you are interested 
 okay yeah that was that was very clear 
 thank you thank you very much for the 
 for the live demo do you have any other 
 any other question in the room yes 
 is there any emulator where you could 
 run this while you get your hardware in 
 case you start off with a like online 
 course while you 
 build uh momentum for people 
 so 
 there is no emulator for this stage and 
 display io i think there is some 
 work on doing making display io work 
 with blinker 
 blinker is an emulator for circuits 
 python in general on devices like 
 raspberry pi 
 however if you go to the pew pew but 
 we have a pumulator 
 which is basically a 
 library that uses a pie game to display 
 this this 8x8 display and give you the 
 key presses so if you just drop pure.py 
 next to your 
 uh next to your code file and just run 
 this code file with python 3 
 you won't be emulating the circuit 
 python it will be python 3 instead so 
 some things can be a little bit 
 different like you would suddenly have 8 
 gigabytes of memory for instance 
 but 
 you can develop your games on your 
 computer and it can also be a bit more 
 convenient that way so you don't have to 
 you know look at the device all the time 
 however because of the differences you 
 you are encouraged to also test it on 
 the device at the end because uh 
 sometimes i i write a game using the 
 accumulator and it then doesn't fit on 
 the device which is a very sad thing 
 thank you okay thank you very much 
 do we have any other question in the 
 room 
 no 
 well got a final one for you 
 so when you 
 you demonstrated the sprites and the use 
 of 
 assets in in the game so do you when 
 you are running the game do you have a 
 run time that offers your file system or 
 you need to do something with those 
 assets so that they work on the game no 
 no you you just copy the all the assets 
 to the disk same as as the code so it's 
 just 
 sitting right there 
 you can make like sub directories to 
 sort this of course to make it more 
 manageable but 
 it's just a simple drag-and-drop i think 
 you just have to make sure that bmp 
 files are 16 color not really really you 
 know not the 16-bit color but 16 colors 
 four beats okay thank you very much so 
 last chance for questions 
 and if not so let's uh give our speaker 
 another round of applause thank you very 
 much 
 and thank you very much for the mirror 
 thank you 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the european is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing uh 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for your 
 python i've learned some animal parts 
 like 
 that giraffes have actually vocal 
 vocals and they can speak everything 
 everyone does with python and that's 
 probably one of my favorite things and 
 is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing many different society europa 
 society and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quiet is just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 i got five minutes five minutes to 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and to say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic highly 
 recommend europe python and hopefully 
 see you next year 
 um is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits find out how imnitza 
 can give you complete control and 
 insight across your technology 
 portfolios book a live demo today at 
 umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 take one 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to 
 organize maybe the next europe python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europa python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for europe 
 iphone i've learned some animal parts 
 like 
 the ravs have actually vocal 
 vocals and they can speak everything 
 everyone does with python and that's 
 probably one of my favorite things and 
 is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i thought i learned 
 a lot about the streaming and video 
 cameras and other things knowing people 
 and 
 knowing 
 many different society europa society 
 members and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quite just fantastic it's the best 
 people i've ever met 
 for me it's like a 
 nerd cam for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing 
 i got five minutes five minutes to 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and they say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend your python and hopefully see 
 you next year 
 is the enterprise technology management 
 solution that consolidates data from 
 existing siloed tools to provide a 
 single source of truth for endpoints 
 applications cloud networking and 
 accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 yes 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well 
 i learned that there is a great python 
 community in prague 
 and it would be great to 
 organize maybe the next european there 
 that would be fantastic a great city 
 great people great beer 
 that that will be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europa python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing uh developer setups which we 
 were just doing just now that's really 
 cool 
 during uh our preparations for europe 
 python i've learned some animal parts 
 like 
 graphs have actually vocal 
 vocals and they can speak everything 
 everyone does with python and that's 
 probably one of my favorite things and 
 is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i thought i learned 
 a lot about the streaming and 
 video cameras and all those things 
 knowing people and 
 knowing 
 many different society european society 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quiet is just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing 
 i got five minutes five minutes to 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and they say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend your python and hopefully see 
 you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 so 
 [Music] 
 [Music] 
 so 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to 
 organize maybe the next european there 
 that will be fantastic a great city 
 great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python python is 
 the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for europe iphone i've 
 learned some animal parts like 
 giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and knowing 
 many different society europa society 
 member and finance 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about 
 europaiston is well the people the 
 people real quiet is just fantastic it's 
 the best people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that talk 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 it was i got five minutes five minutes 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and say that they loved 
 it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend your python and hopefully see 
 you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 take one 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to 
 organize maybe the next europe python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 um well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun we had a really 
 interesting discussion about euro python 
 society and you know how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at europa python i learned 
 about how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with the common 
 language which is python something i 
 really liked learning about which was 
 really cool was these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for europe iphone i've 
 learned some animal parts like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 member and finance 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 around python is just fantastic it's the 
 best people i've ever met 
 for me it's like a nerd cam for all the 
 nerds so it's really nice to meet all 
 the people that i see only once per year 
 at the conference 
 talks are really nice i 
 i learn for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 it was i got five minutes five minutes 
 to prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and say that they loved 
 it so i think that was a great job and i 
 had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend your python and hopefully see 
 you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 so 
 [Music] 
 [Music] 
 do 
 [Music] 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today well i learned 
 that there is a great python community 
 in prague 
 and it would be great to 
 organize maybe the next europe python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered uh 
 for us to be more community centered how 
 we can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different vaults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing uh 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for your python i've 
 learned some animal parts like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and knowing 
 many different societal 
 neighborhood 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python as well the people the people 
 real quiet are just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd camp for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing it was i got five minutes 
 five minutes to prepare for a session 
 share and then after all i got loads of 
 people coming saying thank you and say 
 that they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 so 
 [Music] 
 [Music] 
 so 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next euro python there that would be 
 fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about european society and you know how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um 
 and more specifically just be more 
 closer to the community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of 
 the europe python 
 is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for europe iphone i've 
 learned some animal parts like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and knowing 
 many 
 different society europa society and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quiet are just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd cam for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about winters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 i got five minutes five minutes prepare 
 for a session share and then after all i 
 got loads of people coming saying thank 
 you and say that they loved it so i 
 think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umnitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 take 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer 
 that that would be fantastic 
 [Music] 
 today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europe python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for europe 
 iphone i've learned some animal parts 
 like 
 giraffes have actually vocal uh 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and knowing 
 many 
 different societal side neighbor and 
 python 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python as well the people the people 
 real quite just fantastic it's the best 
 people i've ever met 
 for me it's like a 
 nerd camp for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing was i got five minutes five 
 minutes to prepare for a session share 
 and then after all i got loads of people 
 coming saying thank you and they say 
 that they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 yes 
 you are actually very serious when you 
 are recording me 
 what did i learn today well i learned 
 that there is a great python community 
 in prague 
 and it would be great to organize maybe 
 the next euro python there that would be 
 fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the european is the gathering of 
 different groups different faults 
 different 
 ideas and but everybody is sticking 
 together with a common language which is 
 python something i really liked learning 
 about which was really cool was the 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during our preparations for your python 
 i've learned some animal parts like uh 
 that giraffes have actually vocal uh 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and it's the surprises you get 
 from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different societies 
 and society member and typhoon 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python as well the people the people 
 real fighters are just fantastic it's 
 the best people i've ever met 
 for me it's like a 
 nerd cam for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing 
 i got five minutes five minutes prepare 
 for a session share and then after all i 
 got loads of people coming saying thank 
 you and to say that they loved it so i 
 think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 foreign 
 [Music] 
 [Music] 
 do 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today well i learned 
 that there is a great python community 
 in prague 
 and it would be great to organize maybe 
 the next euro python there that would be 
 fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about europa python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source 
 organizations and more specifically just 
 be more closer to the community 
 so today at europa python i learned 
 about how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python the european is the gathering 
 of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during our preparations for europe 
 iphone i've learned some animal parts 
 like 
 giraffes have actually vocal 
 vocals and they can speak everything 
 everyone does with python and that's 
 probably one of my favorite things and 
 is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa side 
 neighbor and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quite just fantastic it's the best 
 people i've ever met 
 for me it's like a 
 nerd camp for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just 
 was i got five minutes five minutes to 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and to say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitsa.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today well i learned 
 that there is a great python community 
 in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 europe python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during our preparations for europe 
 iphone i've learned some animal parts 
 like 
 giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and all those things 
 knowing people and 
 knowing 
 many different society europa society 
 and python 
 community members but i think it's very 
 important if you want to be occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quite just fantastic it's the best 
 people i've ever met for me it's like a 
 nerd camp for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learn for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing was i got five minutes five 
 minutes to prepare for a session share 
 and then after all i got loads of people 
 coming saying thank you and say that 
 they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories with imnitza you can 
 automate processes from purchase to end 
 of life achieving five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 do 
 so 
 [Music] 
 yes 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next euro python there that would be 
 fantastic a great city great people 
 great beer that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered uh 
 for us to be more community centered how 
 we can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for your 
 python i've learned some animal parts 
 like uh that giraffes have actually 
 vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind and that's 
 that's really really cool this year in 
 europe i learned a lot about the 
 streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different societies europa society 
 member and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about europa 
 as well the people the people real quite 
 are just fantastic it's the best people 
 i've ever met 
 for me it's like a 
 nerd cam for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that talk 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 was i got five minutes five minutes 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and say that they loved 
 it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 within itsa you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 so 
 [Music] 
 [Music] 
 do 
 [Music] 
 [Music] 
 take 
 one are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the european is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during our preparations for europe 
 iphone i've learned some animal parts 
 like 
 giraffes have actually vocal 
 vocals and they can speak everything 
 everyone does does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and all those things 
 knowing people and 
 knowing 
 many different society europa society 
 and 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quiet are just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learn for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 was i got five minutes five minutes to 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and say that they loved 
 it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 so 
 [Music] 
 yes 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next europe python there that would 
 be fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europe python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for europe iphone i've 
 learned some animal parts like giraffes 
 have actually vocal 
 vocals and they can speak everything 
 everyone does with python and that's 
 probably one of my favorite things and 
 is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 and python 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about europa 
 is well the people the people real quite 
 just fantastic it's the best people i've 
 ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learn for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 i got five minutes five minutes to 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and say that they loved 
 it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic highly 
 recommend europe python and hopefully 
 see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 don't you just say the wrong thing 
 so 
 let's go into 
 yeah sure do not disturb mode 
 hello how's lunch 
 everybody is good 
 yes good are you awake 
 [Laughter] 
 nobody answered so i'm not sure um so 
 uh thank you so much for coming we have 
 a very exciting education panel here um 
 so first of all i would like to 
 introduce our chair today is amy from 
 michael benz and she would basically uh 
 you know ask the panelists questions and 
 at the end we'll have a section for q a 
 hopefully if we have time um so yeah 
 without further ado i will let amy take 
 us away thank you thank you hi everybody 
 i am amy fagan from the microbit 
 educational foundation so for those of 
 you not familiar with the microbit it's 
 a tiny programmable computer designed 
 for education we've got a fantastic 
 brand new python editor that's going to 
 be launched in about two months time and 
 you can get a preview of that downstairs 
 uh in the 
 main forum room so 
 that's my little plug over with i'm 
 gonna hand uh pass along the panel now 
 to introduce our speakers so i'll go to 
 you first 
 hi everyone my name is roshin fatherty 
 i'm a lecturer in computer science in tu 
 dublin on the telecampus 
 and i'm also part of a research group 
 called cs inc which stands for computer 
 science inclusive and as part of that 
 group i go out to both primary and 
 secondary schools but more lately more 
 secondary schools doing outreach in 
 computer science 
 great 
 i'm sarah jane carey i'm a computer 
 science teacher in colossae breed which 
 is a large girls school in clindalken 
 and computer science is a new subject 
 for the leaving search was introduced 
 four years ago so this will be the first 
 year that we'll have non-coverage proper 
 run at the course and 
 i also 
 work with other pre-service teachers to 
 help them to teach computer science and 
 in terms of python and i actually did a 
 python course with vicky about 12 years 
 ago 
 to try and teach myself over a weekend 
 before computer science was there i used 
 to do a 
 make-up project based type thing and 
 with my students once a week and i went 
 in to try and you know improve my 
 learning and so i literally started 
 learning python to teach my students so 
 i'm coming like i'm enthusiast now but 
 i'm still just a beginner really just a 
 learner and use it to teach the course 
 so i'm delighted to be here 
 hello everybody my name is chris rayna 
 so i have a company called maker meet 
 we're makers you probably might see us 
 downstairs we have all of the flammable 
 cardboard 
 which is running a python game and 
 we do maker-based education so we do 
 steam workshops and things in both 
 primary secondary third level and beyond 
 sometimes even preschool things like 
 that uh so a lot of what we do is trying 
 to incorporate many different things of 
 steam into one project and no more than 
 our project downstairs which is all 
 cardboard 
 with a bit of paper as a screen but it 
 is running a raspberry pi with python on 
 it so we try to mix stuff up as much as 
 possible in doing project-based learning 
 thanks chris and we've also got kelly hi 
 kelly joining us remotely 
 oh we don't have time for kelly i don't 
 think 
 my fad 
 habit of keeping on my mute hi everyone 
 i am kelly schuster paredes and i'm a 
 teacher that codes 
 i am coming from sunny south florida 
 where i'm a middle school teacher and 
 that we teach python to sixth seventh 
 and eighth grade students and um some of 
 you may know me as the co-host of the 
 teaching python podcast with sean tiber 
 and i 
 started coding about four years ago and 
 i like to tell everybody i'm really good 
 at 
 teaching 
 kids basic python so that's my story 
 amazing well thank you all for being 
 here and thank you all for being here 
 both in person and remote it's great to 
 be here in dublin at the beautiful 
 convention center 
 so to kick us off i'm going to ask um a 
 question to the group i'm going to pass 
 you routine and go to first um 
 but one of the original goals of the 
 python language was to be easy to learn 
 and intuitive 
 um and these qualities as i'm sure many 
 of us understand it it makes it a very 
 effective programming language for 
 education 
 um but i'd love to hear from each of you 
 about your perspective on what other 
 features you find work well in education 
 well i'll start if that's okay yeah and 
 i suppose i might take a slightly 
 different slant on that question if 
 that's okay so 
 um we use python to teach cs1 in first 
 year in tu dublin and we've had many 
 debates in the department about which 
 language to teach first c c plus plus 
 java python at the moment it is python 
 and it does work well as an introductory 
 programming language but earlier this 
 week i was at a different conference and 
 was very very interesting to hear 
 comment from titus winters from google 
 and he was talking about the gap between 
 um education and industry 
 and it made me think a little bit about 
 the python language and what it is 
 really simple for first year coding or 
 cs1 and a lot of the detail behind the 
 code is hidden from the students just to 
 give one example you can define a 
 variable and you don't have to know what 
 data type that variable is which is 
 brilliant because there's no confusion 
 for the students but titus's point was 
 that when they get to industry how 
 fluent are they in the language yes they 
 can solve a problem but are they solving 
 it in the best way so i suppose it 
 throws up that question again and i'm 
 sorry amy's not really an answer but it 
 shows up that question again you know 
 python is easy to learn and it's very 
 intuitive and it works well for first 
 year programming and a third level and 
 but do we need to look at the bigger 
 picture and where that fits in in say a 
 four year degree and program and how to 
 ensure that by using python in the early 
 years we also turn out graduates that 
 are fluent in programming so that when 
 they come into industry and they're able 
 to do the jobs that are required of them 
 yeah 
 that's amazing and in secondary school 
 we would have students coming in to do 
 computer science in fifth year 
 and 
 coding is available as a junior cycle 
 subject so some students and that's in 
 our school it's not in every school so 
 some students might have been exposed to 
 python 
 if they've done coding they'll all have 
 been exposed to scratch most schools try 
 to do a bit of scratch and i know um 
 that there is scratch in primary school 
 and they're doing great work in primary 
 schools and what i find is when they 
 come into fifth year i'll have a mixed 
 bag of students some of them have never 
 done coding before and some of them 
 maybe have done junior cycle coding and 
 then some of them might be 
 real enthusiasts and are really big into 
 coding themselves outside school so 
 you're trying to teach 25 students in a 
 room like that 
 and and 
 i kind of like python because it's 
 natural it's english based it's readable 
 for them particularly for the students 
 who've never seen it before so and they 
 can get quite advanced and and again 
 there's always that argument of should 
 we be educating students to prepare them 
 for industry or for education's sake you 
 know so from my perspective python is a 
 good language to start with because they 
 can get quite far with it and then we 
 can integrate it into other aspects of 
 the course like there's an embedded 
 systems course part of the course and 
 they would use microbit or raspberry pi 
 and we use micro in our school but um 
 now that there is python in the platform 
 we can use the block based coding to 
 kind of hammer home the concepts they 
 can see something happening on the micro 
 but the hands-on that physical thing 
 where you know you get the question why 
 are we doing this and then i can say 
 well you're doing that so when you walk 
 by this little bit of kit an alarm will 
 go off just very simple example but now 
 that we can switch very easily in the 
 platform from right from 
 block code to python i can say to them 
 now look this is what it looks like in 
 python and it's not such a big gap when 
 we get to actually do the python section 
 of the course if that makes sense yeah 
 absolutely 
 yeah so i would um i suppose my love of 
 python comes from again as as everybody 
 said in terms of the simplicity of using 
 it and the ease of use to get into so 
 i suppose i deal with all levels so 
 primary secondary and even third level 
 um 
 in ireland anyway certainly 
 unfortunately um 
 really python is or any text-based 
 language is rarely seen until the second 
 level my 
 fervent hope 
 is that because of python's ease of use 
 in education as you were saying 
 it would be amazing to be able to pull 
 that back 
 to primary 
 so that they can start very young 
 students can start very young 
 doing block based whether it's blockly 
 whether it's scratch it doesn't matter 
 and then move 
 to a text-based language like python 
 yeah the the arguments that roshin said 
 are absolutely true you know is it you 
 know is it appropriate for industry well 
 yes it is but it's also a tool like any 
 other python is absolutely appropriate 
 for certain tasks java is appropriate 
 for others css html whatever language 
 you want to choose is appropriate you 
 know does it tie into databases very 
 well 
 uh you could argue that okay but in 
 terms of education 
 the other bonus for me 
 is um as sarah jane pointed out it's tie 
 into iot devices or 
 um single board computer devices so 
 again like the micro bit like the 
 raspberry pi like lots of other boards 
 um it ties directly to that and for me 
 as a maker 
 introducing 
 making 
 and code 
 it's absolutely 
 perfect 
 to make that leap from block-based 
 languages into text-based languages 
 because it's just 
 it is that little bit easier to code 
 than other languages are in my opinion 
 obviously other people would probably 
 disagree with me but that's yeah that's 
 it 
 thank you chris 
 kelly love to hear your thoughts on this 
 as well 
 well i mirror a lot of the a lot of the 
 comments that have already been made but 
 i have to say i mean this is my only 
 language that i've ever coded and coming 
 from a non-computer science background 
 this language just really 
 took over my heart and became something 
 that i really just loved and it was the 
 act of problem solving and critical 
 thinking and finding something that i 
 could connect to 
 that helps me love python and that's 
 what i bring with the students and i 
 find that the libraries themselves 
 allow 
 this diversity and this inclusivity in 
 the classroom i can pull kids in an 
 interest that they like to be in 
 i use the pillow 
 library or arcade or turtle or micro 
 python library 
 and just that diversity of all these 
 libraries that are easy to use easy to 
 access you can give an eighth grade or a 
 seventh grader this this library and get 
 them started is amazing 
 and then second point i'd have to make 
 is the community 
 as a as a teacher who knows i always 
 tell the kids like ten percent of this 
 language maybe five percent i need a i 
 need a support group 
 and the twitter community has just been 
 awesome and all the people that we meet 
 on the podcast if i have an issue and i 
 can't solve with a student 
 we tend to show the kids hey let's use 
 social media and and the twitter 
 community just of the python 
 family they just 
 love to help out and so even silly 
 problems that i just can't see the 
 the debug 
 in like one two minutes they're 
 answering questions for 11 12 year olds 
 so if you can imagine that power 
 of not only teaching python but teaching 
 that you can use your passions and you 
 have a whole family to help you it's 
 just amazing so that's what i love about 
 python 
 amazing you're here 
 thank you kelly any other reflections on 
 what kelly said there guys before we 
 move on no i just think it's a great 
 point i think it's an absolutely great 
 point and it's something even i have in 
 my own notes here in terms of the 
 libraries that 
 again that plug-in capability of the 
 library's capability just for students 
 also helps because it's the same in 
 block based coding fine you fire up 
 scratch look you can pull the micro bit 
 libraries you can pull any kind of 
 library you like and students understand 
 that and the same is true with python do 
 they understand it 
 in a text-based language 
 no not yet 
 but they will 
 because they have something to relate it 
 to and that's just yeah absolutely kelly 
 absolutely 
 and just even on the community aspect as 
 a teacher in secondary school like 
 there's 
 a very small number of of teachers 
 you know who would have a computer 
 science degree i 
 like this very small number and and 
 we're looking for teachers to teach 
 computer science so 
 the fact that you can go on twitter and 
 ask a question it's really like the 
 computer science community the computer 
 science teachers the tech teachers 
 community they're so supportive and so 
 helpful and 
 and like you could need that mid class 
 and literally get the answer by the end 
 of class which is amazing i don't know 
 any other subject area where there is 
 that 
 support just from all over the world you 
 know just a community of enthusiasts who 
 are so passionate about it that they 
 will help anyone to kind of spread the 
 gospel yeah 
 and what's what i love about that is 
 that you're that students are seeing 
 that happening live as you're doing it 
 and that's exactly what the community is 
 all about which is comforting to 
 students as well to know that they can 
 get answers from 
 a tremendously wider community 
 and to know that it's okay to ask to see 
 their teacher saying i haven't a clue 
 let's go on here and look this up and 
 somebody from somewhere will come out 
 like just to to learn that it's okay not 
 to know stuff and ask questions and 
 somebody will help you yeah yeah it's so 
 empowering for the for the students to 
 see and and to let them know that 
 there's no way that any coder can know 
 everything and that it's our job to be 
 able to figure it out and if it means 
 calling on a friend in the in the 
 twitter verse then go for it so yeah 
 yeah i have students in third level who 
 would use the community a lot and you 
 know they especially in first year 
 they're surprised when they get a 
 response with the delight of it and then 
 they're hooked they and that makes my 
 job so much easier so thank you 
 it's great i love it um well i think 
 that's a nice kind of 
 progression on to our next question 
 which is and i'm going to start with you 
 for this one kelly is what are your 
 favorite tools to teach python and you 
 know what resources do you use and do 
 you find stuff online 
 and what maybe is missing right now what 
 have you been looking for anything that 
 you can't yet find that this community 
 might like to to hear about as well 
 well we um at my school we make a lot of 
 stuff up as we go so a lot of our is our 
 own 
 curriculum 
 but i do pull a lot of extra resources i 
 like to make these things called choice 
 boards and they allow students to learn 
 in the way that they 
 best see fit 
 for example i will i'll make my own 
 screencast but then i'll call upon real 
 python short videos or some of the real 
 python articles 
 we use pi bytes the newbie bytes 
 with bob and julian we use the moo 
 editor 
 and again we use the twitter community 
 but 
 i find that you can find a lot of things 
 out there but it just depends on the 
 student and the learner so we i provide 
 a lot of choice on what they can find 
 one other thing that's really good is 
 the grok learning 
 platform that comes out of i think 
 australia 
 and so right now i haven't found that 
 there's too much too much missing 
 i do feel sometimes that the 
 documentation is a little bit 
 overwhelming to newbies so i tend to 
 avoid a lot of the documentation 
 but microbit just came out with that 
 that great new editor with all the 
 documentation kind of parsed out and 
 that seems to be something easier for 
 the students 
 to to look over i think when they go to 
 that document there's just text and no 
 pictures they kind of 
 turn off that website right away so i 
 try to find 
 videos and short 
 short tidbits for them 
 great thank you kelly 
 um sarah jane how about you 
 yeah um again we like the level we would 
 go to is 
 probably really basic compared to third 
 level or to all to all you people in the 
 audience here and 
 but we would use things like um 
 like there's loads of stuff online but 
 if i was teaching it there's it has a 
 platform called techno.i.e that does 
 little bite size things that are kind of 
 aligned to the course and there's one on 
 python and we do something like code 
 club we use the microbit resources to 
 teach specific parts of it and you're 
 kind of pulling it's similar to you 
 kelly actually you're pulling and kind 
 of creating your own course and we have 
 a book as well this computer science 
 book from golden key publishing that 
 goes through 
 bits of it and then what i find is you 
 put something in front of the students 
 and they'll find their own stuff like 
 that's what i like doing in class you 
 know go and find a video on this and we 
 do some of the you know the youtube ones 
 that you mentioned and 
 so it's a kind of a mixture of 
 everything and then we would have 
 certain problems that we would have 
 gotten in teacher training and 
 csinc has a platform that 
 goes through python and 
 html and all the different things that 
 we would need for beginners and you can 
 use those in class and the students can 
 work at their own pace because computer 
 science is a course it's very 
 project-based and hands-on and there's a 
 lot of collaboration 
 there's not a lot of a student sitting 
 there on their own 
 it's all group work and so they tend to 
 find what works for them and then we 
 will share it with the class and so yeah 
 there's lots out there and again because 
 similar to kelly like i don't know 
 i probably don't know enough to know 
 what i would like you know i can't 
 compare it to other languages where i 
 can say well that's in that i'd love if 
 that was there you know yeah brilliant 
 what about you roshi yeah echoing what 
 everyone else has said really i suppose 
 two different hats on one that the 
 university had i would say that very 
 much like you kelly we have our own 
 curriculum we build the resources for 
 that curriculum for the students and and 
 yes they're drawn from lots of different 
 areas and we would also give 
 supplementary material things like w3 
 schools it's great 
 yeah yeah for some exercises and things 
 like that 
 and 
 so 
 yeah we'd use lots of of different 
 resources uh different videos and again 
 like like you said jane i mean the the 
 students tend to find things and share 
 as well with each other and with us and 
 then we pick out the best of that and 
 and and follow through and what i'd like 
 to see and i don't know if there's a 
 tool like this out there but i find um 
 from third level probably one of the 
 brick walls that our students come up 
 against 
 aside from learning the language is um 
 errors and how to navigate solving an 
 error so when i get an error how do i 
 fix that error and if i get an error how 
 do i know what that error is and i think 
 it would be really nice if we had more 
 tools using maybe ai or something that 
 could direct the students to fixing 
 those errors without giving them the 
 answer because we don't want that but we 
 want them to 
 not hit an error and go oh my god i 
 can't make head or tell this and step 
 away from it and i know from like saying 
 primary school they do three before me 
 you know 
 and we would try and do that as well 
 three different things but when they hit 
 an error they find that very difficult 
 and to navigate the solution to that and 
 tracing through we go through and so on 
 but if there was a tool or built into 
 python that would direct them to 
 solving that error i think that would be 
 amazing if we had something like that so 
 you've heard it here first everybody if 
 anyone's working on anything 
 don't forget there's the the python 
 tutor i don't know if you've ever seen 
 that where you can visualize the steps 
 yeah um 
 that one was pretty good for debugging 
 that helped me actually learned a lot 
 yeah i've seen that and we do use the 
 debugging tools as well but i don't know 
 whether it's a mental block that 
 students have and again remember even 
 though computer science there's been and 
 that even start has run for a number of 
 years now we're still getting a lot of 
 students on the course that may never 
 have done coding for and not be fully 
 aware of computer science so when it 
 doesn't work and it stops and you get a 
 box at the end with an error in it it's 
 i don't know if it's panic or roadblock 
 or what but they just tend to stop and 
 even though you might show them the 
 debugging tools they tend to be a little 
 bit intimidated by that in first year 
 and especially for a semester so it 
 would be nice if there was something 
 that hand held them through that 
 initially 
 but yeah 
 [Laughter] 
 or do you have a solution 
 um well interestingly i uh earlier this 
 morning i had a conversation and 
 it's a plug if the guys are in the 
 audience great if they're not go have a 
 look i've only just met them this 
 morning so 
 full transparency um but there's a group 
 downstairs called clean code and that is 
 exactly what they're doing 
 actually 
 yes so they have a debugging tool it's 
 not just for python but it's for all 
 languages 
 and it's free for personal projects 
 which seems to cover a wide 
 variety of projects really so um and 
 look i only saw a demo but it looked 
 pretty cool actually to be honest um 
 in terms of tools 
 and things like that i i fully agree 
 with roshi in terms of like a built-in 
 i don't i don't want to say a built-in 
 debugger because but i also want just 
 something again i'm thinking almost for 
 younger students 
 not third level not second level 
 necessarily but something like that that 
 would encourage them in some way i don't 
 know what that is i don't have an answer 
 to that but i absolutely agree with 
 w3schools is brilliant um what else do 
 you put down the python themselves the 
 wiki python's wiki is really really good 
 it's a little bit text heavy maybe but 
 yeah still really good for finding 
 information um i really like 
 developers google python site as well 
 which is excellent uh codecademy as well 
 you've used as well which is quite 
 stepping through processes as well it's 
 good for kids in terms of apps um 
 funny absolutely because cross-platform 
 brilliant things like that and 
 uh my absolute go to um is moo as well 
 as you as you said as well just 
 um and uh i was lucky enough to meet my 
 my the mu creator my hero who's sitting 
 over there in the corner waving at the 
 moment so that's fine so he's there if 
 anyone else would like to meet him as 
 well 
 one thing i say because because we teach 
 very diverse across the board 
 like we might go into a school and have 
 students with androids tablets or 
 students with ipads or students with 
 nothing 
 or anything 
 i've actually found and just because i 
 happen to be an apple educator it's 
 nothing to do with this but i have found 
 the tools 
 seen to have on ios have gone from 
 absolutely terrible tools to absolutely 
 amazing tools on ios and the step 
 through in the walk through on ios is 
 really really good and just the two 
 pythonista and pyto 
 are those two apps um they're both i 
 think about a tenor something like that 
 and you know 
 i just found those really good on ios 
 and frankly um so in terms of creating 
 resources no more than yourselves which 
 is interesting actually um i create my 
 own resources depending on projects and 
 things that i'm doing or 
 again it's a little different because 
 we're going in doing a project using 
 that particular language with students 
 so i will actually create the resources 
 and bring those in 
 and do the screenshots and make the pdf 
 file and provide the pdf file and things 
 like that so 
 um but it's interesting we're all 
 creating our own resources for that 
 that's i just find that interesting 
 actually that's kind of but we're all 
 pulling from some very very similar 
 places yeah i just think that's that's i 
 wonder why why are we doing that why why 
 can't we pool our resources i was just 
 about to ask you that that wasn't going 
 to be yeah i think we should pull our 
 resources definitely and why we invent 
 the wheels but i think for me it's it's 
 because 
 each year i change my resources and that 
 is because after a couple of weeks in 
 front of your class you see who you have 
 yeah and you're changing the resources 
 to suit the students in front of you and 
 it's never the same 
 so you're always trying to give the best 
 to them so it's constantly changing 
 and plus python 2 python 3. yeah i don't 
 have to jump yeah you know i see some of 
 that now they're going yeah yeah you 
 know i know 
 and i feel that teaching's very personal 
 so when we are in it and we're pulling 
 out the resources that 
 best enhance what we've just taught i i 
 think it's hard to go here here's my 
 curriculum you go teach it it doesn't 
 work that way so although we pull the 
 resources that we use 
 giving someone else your curriculum 
 sometimes doesn't work i know when sean 
 and i were teaching we both had the same 
 kind of objective but the way that sean 
 taught that objective was completely 
 different than the way that i taught 
 that objective so it's it's unique but 
 yeah that's i think that's why teachers 
 pull so much of their own stuff sure 
 absolutely yeah yeah the idea of sharing 
 resources is the best way to go about 
 doing that and 
 still we have the people here to do it 
 yeah we certainly do right i'll set up a 
 google doc after this 
 uh fantastic i think we've we've kind of 
 started to touch on this a little bit 
 already but the next thing i wanted to 
 ask you all worlds that if you had a 
 magic wand 
 and you could change one feature 
 in python i have a feeling you'll you've 
 got a sense of what you might say 
 routine but uh if you could if you just 
 yeah you think you probably have but 
 yeah if you could change on python 
 feature what would it be and why well 
 i'm gonna go to you first chris for this 
 okay um 
 very little i have to say very little 
 i i've only ever had one experience and 
 it wasn't an educational experience it 
 was a corporate experience in terms of 
 helping in fact not even the coding but 
 helping design the graphics for a 
 project um that was being written in 
 python and we just ran into again i 
 wasn't actually the coder i wouldn't be 
 that good of a coder to do what they 
 were doing 
 but it was 
 it just kept crapping out it was a 
 memory memory 
 runtime errors it just kept going 
 basically is all it was 
 it was only ever once to be fair only 
 ever once it happened um and it was a 
 number of years ago to be fair as well 
 too but apart from that little enough um 
 as a maker 
 i want to see our i want to see 
 libraries for everything i want to see 
 them for 
 micro bits i want to see them for 
 everything 
 absolutely everything is what i want to 
 see them for you know arduino um 
 just everything i want a library for 
 everything 
 apart from that that's all ready to be 
 honest yeah i don't have not asking not 
 asking for much 
 have it used here then 
 yeah again um 
 it basically does what we needed to do 
 for the course 
 and personally i'm not advanced enough 
 yet i'm gonna say yes still learning 
 this time next year i might have a whole 
 list and but yeah it does everything we 
 need to do at the minute i mean what 
 routine suggested about the 
 helping the students uh see what the 
 error was and not giving them the answer 
 but like in teaching you have assessment 
 of learning versus assessment for 
 learning so we want them to learn as 
 they're coming into these difficulties 
 you know and uh work through it so that 
 would be nice 
 brilliant not really i think i'd agree 
 with you chris i think the libraries for 
 everything really important i mean the 
 libraries we use them all the time as 
 well and and some of the more advanced 
 ones for the ai the sk learn and things 
 like that invaluable to us absolutely 
 invaluable and but yeah i agree like 
 there's not much i change in python it 
 is it works for us for cs1 and the 
 students learn very well from it and 
 yeah if i had a magic wand that would be 
 it then help them to find helps help 
 them to sort out when they hit a ball 
 like that 
 yeah 
 now i'm just checking i'm not sure if 
 we've lost kelly she's her pictures 
 disappeared off the screen 
 um 
 we'll just give her a second um 
 yeah no i think well i'll go to the next 
 question and get kelly back i'll read 
 i'll ask it again um i'm going to start 
 with you for this sarah jane giving your 
 teeth you're in in the classroom you're 
 teaching and you're covering the leaving 
 cert subject at the moment what is the 
 biggest challenge you're coming up 
 against i mean i know we've touched on 
 obviously bugs and errors and you know 
 that resilience that you're trying to 
 help students with but you know 
 anything else to add to that that is a 
 challenge you find you're coming up 
 against and when you're helping students 
 engaging with this for the first time 
 and anything that might help overcome it 
 um yeah well i think and i've mentioned 
 it before students who have had no 
 experience of 
 computers or coding and so 
 the challenge as a teacher and i suppose 
 for every subject is the different 
 levels in the classroom and they do find 
 some of the core concepts are quite 
 difficult for them to get like something 
 like a variable like you spent 
 weeks teaching what a variable is and 
 you know uh recursion things like that 
 but then again the hands-on stuff really 
 helps with that you know and 
 so when they can see it uh you know and 
 things like storytelling really works 
 with that you know so as a teacher you 
 have to be a storyteller as well as 
 everything else and to try and give them 
 examples of what it means so they're 
 kind of what i would see in the 
 classroom and then there's the other 
 issues like yeah and it's not to do with 
 python or programming at all it's just 
 the access you know so some students 
 wouldn't have access 
 to a computer or something they can work 
 on at home 
 so 
 in a school you'll open up labs you'll 
 have coding clubs and things like that 
 where they can go to but if they can't 
 practice it at home 
 and it does make a difference you know 
 for the course they have to be doing a 
 lot of work at home 
 and 
 and then 
 yeah i think that that type of thing 
 and just the other thing is the the 
 self-belief yeah like it kind of tied 
 into the resilience and again i'm in a 
 girls school right so we're lucky we've 
 had we've a 
 class a year we had class a year for the 
 past four years since it started one 
 group and they choose it as an option 
 for fifth year but the self belief that 
 they can do it like i would get students 
 into the class and they're all different 
 you know walks of life different shapes 
 and sizes different groups you know in 
 in high school you have in america you 
 see the films with all the different 
 gangs and all the different types it's 
 not as marked here or something but and 
 we have different people from all kind 
 of walks of life and 
 some of them 
 like have no idea what a coder looks 
 like you know or they have a specific 
 idea of what a culture looks like and 
 that's not what it is at all so you find 
 a lot of the time 
 you're trying to tell them no you you 
 can actually do this you look what you 
 did that's amazing keep at it and and 
 that uh challenge of not feeling bad 
 when they fail 
 so that takes 
 a while at the start when they come in 
 you're trying to make them see that it's 
 okay and you're you can't you have your 
 posters up but if we haven't failed 
 we're not learning you know the right 
 answer if you haven't done it a thousand 
 times and then got to the answer you're 
 doing it wrong you know that's that kind 
 of thing and and that takes a while to 
 work about now we're at it in school for 
 we've had it in school for four years so 
 i think that's breaking down a bit um 
 so those are kind of i mean again it's 
 not quite unrelated but you know they're 
 the relevant subject overall isn't it 
 keeping that interest up and yeah 
 exactly and still in that kind of 
 confidence and the success like building 
 in success that's why python is really 
 good for that because you can show them 
 what success will look like and they can 
 get success with the program really 
 quickly you know whereas some of the 
 other languages they might it take them 
 a long time 
 absolutely 
 and kelly i think we might have you 
 might have dropped out this i'll just 
 repeat the question so you're not um 
 wondering what are we talking about and 
 we're talking about just the biggest 
 challenge that you find that students 
 face when you're when you're covering 
 python with them for the first time 
 and you know what might help overcome it 
 so be great to hear your thoughts on you 
 know the positives and as well as the 
 negatives 
 absolutely so um 
 the biggest thing is that power of yet 
 um 
 we like to talk about the mindset a lot 
 yeah and of course the six the sixth 
 graders the year ten uh the 
 ten-year-olds that come in they're happy 
 and excited you get them to print hello 
 their mindset is still positive they 
 still have this 
 imagination and this ability to i could 
 do anything but as you start to get 
 older 
 um the 13 14 15 year olds they start to 
 understand that i'm not as good as 
 as so and so next to me and this mindset 
 of i can't i i can't do it 
 i can't code i'm not a coder i can't do 
 math and so we work a lot on that power 
 of yet and we talk about climbing the 
 steps and saying that 
 you know we're here at the top and i 
 can't answer all the questions either 
 yet 
 but one day i will and and we talk a lot 
 about just saying 
 change that that word i can't code and 
 add in the sentence i can't code yet 
 and it is a it is a good struggle but 
 it's not just coding that it applies to 
 so 
 in our classroom it's not just about 
 learning how to use python because 
 python god forbid um will be gone in you 
 know 20 years and they have to learn 
 another language or they might be doing 
 some other thing 
 they need to be able to overcome 
 whatever challenge is put in front of 
 them 
 and by 
 having an open mindset a positive 
 mindset 
 that's going to help them regardless if 
 they're playing basketball they're doing 
 geometry they're studying for an ap 
 physics exam 
 they may not be able to accomplish it 
 but they will do it one day so 
 i really like that thought it's very 
 uplifting and i was one of those 
 students not good at math technology 
 yeah scary you know some of that 
 thinking would have really helped me 
 along the way if it 
 if it had been happening haven't you 
 obscene any further down i'm really 
 excited to hear sarah jane and kelly 
 speak and because 
 i've been involved as i said primary 
 secondary mostly third level by the time 
 i get them in third level we have huge 
 problems especially with females with 
 imposter syndrome 
 they feel they can't do it they feel 
 they're not as good as the boys and and 
 we need to catch that earlier so it 
 makes you so happy kelly to hear that 
 you're working on and then sarah jane 
 and i know with see i think i'm trying 
 to work on that too and it's about kind 
 of breaking down those uh perceptions 
 and as you said the i can't it's just i 
 can't yet and seeing that sometimes 
 i can't you know whether kelly can't do 
 that sarah jane can't and that that's 
 okay we're all still learning it's a 
 journey and so yeah i couldn't i 
 couldn't agree more i think 
 that is that is very much a challenge 
 and at the moment it's a huge challenge 
 in third level and in particular 
 interesting just some of the research 
 i've been involved in and female 
 students self-efficacy which is the same 
 thing and is is is lower than males 
 but and this is the big both the st the 
 female students who stick out the degree 
 outperform the males traditionally by 
 the end of it so very interesting 
 statistic so if we can get them to 
 believe in themselves they have the 
 potential to go very very very far 
 and that's just some educational 
 research i'm involved in and then i 
 think the other more mundane challenges 
 that we have and again not directly 
 related to python but it's always those 
 threshold concepts in first year so it's 
 the ifs and the loops would be the two 
 big ones and then when you move into 
 maybe second year it's moving into more 
 object-oriented and what is an object 
 and and that could be in python or any 
 language it doesn't matter but if the 
 python community could help with um 
 improving or helping us with uh 
 educating students around those 
 threshold concepts that will be very 
 welcomed as well 
 great so yeah all of your uh suggestions 
 we're welcome we're looking forward to 
 hearing them afterwards so thank you 
 chris any more on that with regards to 
 maybe maker projects and 
 i mean 
 it's a bigger discussion and 
 i would 
 sit here all day talking about it um 
 but in terms of what everyone else has 
 said 
 i can only repeat it probably not as 
 good 
 especially in terms of gender encoding 
 i'm a guy i code fine but i'm a maker 
 first and foremost and in terms of 
 quote unquote failing 
 at doing something 
 it's a mindset it's a systemic mindset 
 not only in i would say probably almost 
 every education system on the planet 
 but 
 in society as well 
 and 
 it's women 
 that unfortunately suffer at that 
 mindset 
 and i'm going to say that bluntly as a 
 man 
 and it shouldn't be that way 
 under 
 any circumstances 
 i won't relay the story that we were 
 talking about earlier 
 but the reality is is that 
 it's not about the code 
 it's not about the job 
 and this is me speaking with my maker 
 hat on 
 it's about the feeling you all get 
 when you finish a project 
 or when a bit of code works 
 and that's a good feeling 
 it's a positive feeling 
 and that as a maker 
 is 
 in my opinion how it should go through 
 if you make 
 pasta 
 and you burn the pasta 
 that's fine you failed burning the pasta 
 just make it again 
 and remember it's only 20 minutes not 40 
 minutes whatever it is doesn't matter 
 the same is true for code we've all 
 failed at making code that's okay 
 but let's encourage 
 other people everybody 
 to 
 let's help them get through that 
 and do it and that's a maker mindset 
 it's not exclusively you make her 
 mindset by any stretch of the 
 imagination but 
 it's just the mindset of 
 trying to be inclusive 
 of everybody that because it's better 
 for the community no more as kelly was 
 saying in terms as we're all saying in 
 terms of the community like python 
 community is really an amazing community 
 it genuinely is 
 and 
 why can't we share that i think we 
 should share that with in fact not only 
 share it i think we should teach other 
 people how good this community is 
 and i just feel that that's really 
 important i just think that's really 
 important i know it's kind of vaguely 
 off topic i was going to talk about 
 syntax 
 i started getting stuck into that sorry 
 but i just i really do genuinely think 
 in terms of that um it's just it's 
 extremely extremely important it's 
 extremely important 
 yeah 
 i love that chris i um can i just add 
 real quick 
 um going in about that that mindset i 
 think it's also that hook that getting 
 that 
 fail turned into a positive it's those 
 positive endorphins 
 that that's the challenge another big 
 challenge that i have in the middle 
 school because i want them to go on to 
 secondary school and i want them to go 
 into the career but it's it's my job i 
 feel it's my job to find that thing that 
 makes them have those positive 
 endorphins so if it means that one child 
 is doing ear sketch 
 in music and another child is making 
 something in cardboard like a basketball 
 game with the micro bit and another 
 child's doing something on circuit 
 python my classroom is chaotic and i 
 have a headache when i go home but 
 but those kids are finding their 
 their endorphin lighter and and they're 
 getting they're getting that stuff that 
 we get when we solve problems and that's 
 what it means to to fail and and move on 
 because failing and failing and having 
 those negative endorphins doesn't help 
 anyone and that is a challenge sometimes 
 when people pick up coding 
 so finding those libraries those things 
 that make them 
 you know that glint in their eyes when 
 they're smiling and saying look what i 
 made 
 that's a challenge for every teacher i 
 think 
 i love that kelly we we talk about this 
 all the time in the microbit foundation 
 and we call it the microbit moment like 
 that first exposure where you've you're 
 you're you've coded something and then 
 you've downloaded your microbit 
 it does the thing and i remember the 
 first time i had that experience and i 
 was at a bet show like years ago and i 
 was like so excited so you know that but 
 it doesn't have to be that device we 
 were talking about this earlier chris 
 around device agnostic it's that feeling 
 almost isn't it that you're you're 
 creating that feeling in whether it's 
 maker projects it's in the third level 
 it could be wherever but you're it's 
 about kind of capturing that feeling 
 isn't it and helping others right or 
 past it yeah 
 i don't know if i'm coming to your house 
 for pastor chris now but 
 no matter what you make absolutely 
 absolutely no i think that this is this 
 is it's really fascinating i think 
 what i'd like to kind of move on to now 
 just is we're talking a lot about what 
 we can do as a community of python and 
 educate educators but i wonder about 
 policymakers and 
 actual systemic change that we've been 
 talking about being so necessary and 
 obviously sarah jane you've been heavily 
 involved in the leaving cert subject 
 well you 
 all you all have your own uh hand act to 
 play in in in the way that these things 
 are happening but i wonder from a policy 
 point of view what what needs what needs 
 to happen or what what can be done you 
 know at this stage to improve things 
 from that kind of systemic point of view 
 yeah it's it's it's um that's a 
 difficult one because again you could 
 you should have asked me to prepare that 
 question if i could wish for anything i 
 want computer science to be in every 
 single school i want science to be 
 compulsory in every single school and 
 yeah it's difficult i mean at the minute 
 there is a there's a 
 there's not enough teachers um to teach 
 computer science and that's an issue so 
 you know if anyone here would like to be 
 a teacher of computer science look into 
 it you know there are loads of courses 
 you could do it outside of your working 
 life and 
 i think 
 there there is a lot of work being done 
 like um 
 coding and computational thinking is 
 being introduced at primary school level 
 and that's filtering through into 
 secondary school which is great coding 
 is a new junior well new ish junior 
 cycle subject computer science is a 
 brand new subject it's just to keep it 
 to keep the momentum up and obviously 
 covert hit in the middle of it but you 
 know to try and get it into every school 
 and to get teachers interested in 
 teaching it and 
 and students and parents to realize that 
 it's not just in terms of careers it's 
 not just one particular picture of 
 somebody sitting on a computer all day 
 like it's such a va it can open up a 
 vast world and there are countries all 
 over the world now who are introducing 
 just computational thinking to every 
 student never mind the coding just the 
 mindset around us you know and even in 
 terms of 21st century skills 
 like the python community 
 embodies the 21st century scale of 
 collaboration you know like just the 
 fact that you're this massive group 
 working together to promote the subject 
 we're trying to bring that into every 
 subject every classroom the whole time 
 so it is quite difficult but i mean that 
 you know that would be my policy change 
 would be that computer science is 
 offered in every school yeah 
 we'll reflect on you saying that one day 
 i'm sure but it's not being recorded 
 i remember when sarah jane told us 
 definitely need more teachers 
 and and i think that's probably one of 
 the biggest problems with the computer 
 science leaving cert but also i've 
 worked very hard through this inc to try 
 and change perceptions of computer 
 science and 
 from 
 a primary and secondary level and we 
 need help with that like we're one small 
 group of five people working out of tu 
 dublin we've traveled all around the 
 country we've reached 10 10 000 students 
 over three years which is great but it's 
 still not enough and work has to be done 
 on this to break down the perceptions 
 around computer science so that it does 
 become 
 more open more equal more diverse 
 because we need everybody involved in it 
 and so i think that's that's definitely 
 something that is huge for me and in 
 terms of policy i mean i think the 
 department of education has an excellent 
 policy in the living certificate 
 curriculum and one of their quotes is 
 computers for all and i think that's 
 really important and i think we have to 
 always remember that there's always the 
 risk with the leaving cert that it 
 becomes an extra subject or the subject 
 for after school for the elite students 
 it cut we have to work really hard to 
 make sure that isn't the case it has to 
 be 
 for all and then i know my colleague 
 keith quill is working very hard in the 
 background too to draw up kind of a 
 policy and procedures for bringing this 
 into primary school chris he'll be happy 
 to hear and i also think that's so i 
 think we need the pipeline there i think 
 we need to look at primary school start 
 early yeah and even though the coding is 
 there for junior cycle because it's not 
 part of the 
 formal curricula 
 that can also pose a problem because not 
 everybody has to do that or it's not 
 open to everybody and sometimes those 
 extra courses while they're very 
 valuable for people who are interested 
 in them it's those perceptions i'm not 
 interested i'm a girl you know we need 
 to expose them to these so i think it's 
 coming 
 i think it's it's it's on its way but i 
 think we need a kind of a joint of 
 thinking now between the department of 
 education third level and industry and 
 second and primary level as well to join 
 up and and push this through to make 
 sure that um 
 we have a fully uh ecosystem in our 
 education system from from primary right 
 through and apparently that can be 
 cross-curricular like what you were 
 saying it doesn't have to be computer 
 science it can be 
 you know um computers in geography 
 computers for history 
 yeah climate change looking at all of 
 these different things so i mean there's 
 no reason why we can't bring this in 
 across the full range of our educational 
 system i'm very passionate about that 
 absolutely no and and kelly i'll come to 
 you as well obviously with the us 
 perspective and there's great work going 
 on obviously code.org csta but you know 
 what what would you like to see more of 
 or from an international point of view 
 you know how can we all help well having 
 having taught in london and 
 and south america and the us it's it's 
 pretty much worldwide the the same and i 
 could go on and on about the needs of 
 education and computer science but i'll 
 stick only for what the python community 
 can do for us i i 
 mirror all the comments um 
 definitely finding teachers 
 that can do the job and getting teachers 
 out of that mindset of 
 i'm a science teacher because i'm a 
 biology major 
 and i teach code so i think we need to 
 tap into 
 those risk takers those teachers that 
 like to problem solve 
 in their curricular activities and and 
 move them into code and i think it 
 mirrors what some of the talks that we 
 saw yesterday 
 servasta he made a 
 really good point that he we need to 
 break down that stigma that computer 
 science only works 
 in the computer classroom why is that um 
 we read across the curriculum we do 
 maths across across the curriculum we we 
 can bring social studies across the 
 curriculum 
 or you know civics across the curriculum 
 why can't we bring 
 code across the curriculum so many areas 
 where um 
 math and and code and even coding the 
 constitution i attempted that that 
 wasn't very successful but coding the 
 constitution in 
 allows those students to break down the 
 the problems 
 so one of the things i think that the 
 python community can do is 
 really be that 
 that source to get the teacher that's 
 not a coder 
 into coding and i remember the first 
 year at pycon i had been coding only six 
 months and everyone was so welcoming and 
 i kept saying oh my god i can't believe 
 i'm here with all these smart people 
 but but why is that why is that that's 
 the initial feeling when you get into 
 code i think that needs to break down 
 yes we are all smart people but 
 everybody's smart in their own sense and 
 and if we work hard at something we all 
 can code and i think that needs to be 
 pushed that it's not just these smart 
 people that 
 go to these great colleges and take 
 computer science all their life and play 
 computer with computers all their life 
 it's everyone can do it if they want to 
 so that's my my plea for the python 
 community amazing thanks kelly and chris 
 yeah i definitely echo all of that um 
 and i'm i'm absolutely heartened to hear 
 kelly saying that she's teaching python 
 to you know 10 year olds and things like 
 that again exactly as roshan said as 
 well and it's great that you know that 
 you guys are doing that work in order to 
 bring it back um because 
 i just think it's a situation and that's 
 kind of what we do as well too you know 
 i actually don't think it's about the 
 code 
 as i kind of said before i think it's 
 about mindset as you were saying and 
 it's about 
 um problem solving it's about critical 
 thinking it's about lots of other things 
 all those skills are coding skills 
 but they're not just coding skills those 
 as you said kelly those are what are 
 required across the curriculum 
 and 
 i normally speak from the bottom up if 
 that makes sense but 
 amy and i had this talk from the top 
 down from industry 
 there's a lot of companies industry 
 leaders 
 that do not want 
 clones of everybody anymore 
 because it cost them a lot of money to 
 hire 
 and then rehire three months six months 
 eighteen month whatever it is 
 and re-hire those people 
 that cost companies money but if you 
 have an employee 
 who has a diverse range of skills 
 that is based in critical thinking 
 then that 
 those employees are much more valuable 
 to the company so if the company changes 
 direction 
 in a year or two years or the third 
 quarter of 2025 or whatever it is 
 then those employees can be kept on and 
 there's no need to retrain or rehire and 
 that's really important 
 and as a systemic change i think those 
 companies 
 need to speak 
 to government 
 and third level institutions 
 to try to engineer that change and push 
 it down 
 all the way to primary schools 
 so that 
 those critical thinking skills those 
 21st century skills 
 those maker skills whatever you want are 
 employed across the board in every 
 single subject because they're valuable 
 in every subject are they valuable in 
 coding absolutely 
 you know 
 but 
 if you're a coder 
 and i'm sure many of you are if you're a 
 python coder how many of the languages 
 do you know i would suspect most of you 
 know other languages apart from python 
 that makes you a much more valuable 
 employee to a company you're working for 
 if you're working for a company that 
 makes you much more valuable but imagine 
 if you take those critical thinking 
 skills and say well yes i can drive a 
 forklift i can crunch a spreadsheet of 
 numbers i can do whatever 
 so you're not just coders you have other 
 valuable skills and i think that needs 
 to be pushed from corporate down that's 
 right absolutely that's my fault thank 
 you chris yeah and i think that point 
 around improving diversity in 
 in this space right the way through in 
 research in third level in primary in 
 teaching 
 and that kind of message 
 really 
 would really land i can imagine where 
 you're thinking i'm good at 
 there's certain things you can learn 
 there's certain things you've got a 
 natural aptitude for and i think it's 
 less scary i think if you if you open 
 people's eyes to that you know you can 
 see possibilities for themselves and i 
 think it's it's 
 incumbent on us all i suppose to think 
 about those messages and how they get 
 out there you know we do it obviously 
 within the foundation but it's you know 
 you've got a you've got a lot of 
 influencing to do around with parents 
 obviously with you know head teachers as 
 i'm sure you've done 
 um i'm conscious of time and we i could 
 obviously sit here all day having this 
 wonderful conversation but um i think we 
 should definitely go for some questions 
 now from the audience i think remotely 
 uh we 
 i'm not sure how we will see them but 
 they might nope 
 okay well then i think guys if anyone 
 has any questions the microphone 
 right there 
 so please don't be shy come on up and 
 ask a question to the group yes please 
 hi thank you so much for the panel it 
 was really interesting um 
 i'm a civil engineer and 
 a python developer and in my department 
 in my work 
 i act as a teacher of python many times 
 and i get a lot of questions so i'm 
 really interested in the 
 things 
 you mentioned of not answering the 
 questions 
 and letting 
 the students uh 
 find out by themselves 
 do you have maybe a rule of thumb that 
 you can apply when to answer when not to 
 answer 
 uh thank you 
 thank you 
 that's a really difficult question 
 because every student is different so 
 and i think 
 right back to the primary school rule of 
 three at three before me so 
 have you tried three things have you 
 checked the web have you 
 traced to your code have you so three 
 things before you come to me and at that 
 point then potentially 
 again 
 i don't i think it's 
 more valuable that they see it 
 themselves so maybe not give an answer 
 but direct you know towards this 
 piece of code seems to be causing the 
 problem in this area have another look 
 so always be pushing them towards 
 solving it themselves and i i on and i'm 
 in a classroom of 40 or 50 students on 
 my own for one hour i make the mistake 
 of going oh look he just missed a 
 semicolon next person i'm always doing 
 that but 
 theoretically it's not the the best way 
 to do it so i would always try and 
 help each other so if they do team 
 coding or if there's a buddy system in 
 the organization that always works 
 really well as well and because they're 
 in it together and then that person has 
 shown me and that i found something else 
 i'll show to them so that kind of works 
 hope sorry i jumped in to answer that 
 there does anyone that's great i i can't 
 help 
 i always say google's your friend 
 obviously that's your first source but 
 we talk about keywords 
 and i forgot i was reminded to mention 
 that all the work that on andre roberge 
 is doing on the friendly tracebacks so a 
 lot of the times when students come to 
 me i make them read 
 the traceback out loud 
 it sounds like a little childish thing 
 but 
 sean always did it to me he's like what 
 does the traceback say how what words 
 can you pull from that traceback and now 
 that they're the tracebacks are a lot 
 clearer 
 you can have the students or the 
 learners adult learners even what are 
 the key words in that in that era is it 
 a syntax error where is it pointing 
 and i find that just having them 
 read 
 out loud 
 helps them to start to think about the 
 solution right away and yes it is the 
 hardest thing not to give the answer 
 because you know you've said it and you 
 can see the the problem right there in 
 their face but 
 they will never learn and do it 
 resist the temptation thank you so much 
 everybody we'll go to the next question 
 thank you 
 hi thanks very much i'm a teacher as 
 well and um what you're saying and 
 starting about python being a nice 
 beginners language i think is it's true 
 um when i come to a conference like this 
 and find out some of the really complex 
 things that python can do and that's 
 great as well but i i sometimes struggle 
 with the kind of a middle ground how do 
 you get students from kind of the 
 prints and simple loops and things onto 
 things like um you know gooeys and um 
 the more the more tricky things have you 
 got any recommendations for sort of good 
 intermediate steps which i can take 
 um 
 that's that's a perennial problem that 
 we have into dublin so we would teach at 
 python in first year and then we jump to 
 the django framework in second year and 
 it's something that we're currently 
 reconsidering because 
 as you know we have somebody going from 
 kind of console based output and then 
 trying to integrate to a framework with 
 guise and output it's such a big leap so 
 um it isn't it isn't an easy answer and 
 i think that um 
 it's more about how you introduce those 
 as opposed to i think it has to be done 
 so i think our leap from first second 
 year still has to be done but i think 
 it's how you introduce that and um maybe 
 taking um 
 smaller steps so we kind of go straight 
 from the console to the framework maybe 
 bring in the gui before that and then 
 the framework but to be totally honest 
 there's no 
 golden answer for that one it's it's 
 tricky 
 packaging will be another way you know 
 packaging packaging your python to into 
 an app depending on what you're doing 
 obviously but do you know to try and 
 introduce okay you're going to build an 
 app you're going to build a self-running 
 app and then now you have to package 
 that and and attach the graphics to it 
 the gui you could attach everything to 
 it and that can be a little bit 
 intimidating as well but yeah i would 
 agree with you russia there's no 
 it's difficult yeah it is difficult 
 i generally at the lower i say the lower 
 end i don't need lower end but i'm 
 generally at the primary secondary end 
 so i don't often encounter that but i 
 would say i do know um in terms of 
 sometimes doing things my experience has 
 just been 
 when i'm starting in python or when i'm 
 doing python with students and things 
 it's to a specific goal 
 and sometimes that goal python is not 
 is not the correct language to use so 
 what i might and then is say okay well 
 look 
 you've used python you're vaguely 
 familiar with it let's try a different 
 language that might achieve this goal 
 better 
 and that can be a whole nother thing but 
 then i'm not in a classroom situation so 
 it's a very different thing as well the 
 other thing that does tie things 
 together very well for them is the 
 projects i don't know if you do any of 
 that but the project work um in terms of 
 having a set goal so they define their 
 project and i think that that really 
 helps and i think once they define the 
 project and the outline of it then as 
 educators we can direct them to 
 the pathway to integrate more guise and 
 the database at the back end the front 
 end and the coding in the middle and i 
 think we can we can they're more engaged 
 in it because it's their idea 
 and that helps a lot as well 
 100 
 great thank you so much one and one last 
 question yeah thank you getting the 
 students to install stuff for the 
 lessons on their machines can take up a 
 whole lesson and what are your 
 strategies for i guess 
 picking whether you do everything in the 
 browser in a lesson or whether you get 
 them to install things locally 
 i'll take that if yeah please 
 um 
 so the very first lesson i have with 
 sixth seventh and eighth grade mostly 
 seventh and eighth um 
 is investigating their editor and what 
 they're gonna use they always have to 
 have two choices one that's online 
 and one that is 
 local on their on their desktop 
 so we try try to do the screen a 
 screencast and we use moo editor 
 at 
 our school most of the time so we do a 
 screencast and i try to get the students 
 to do it at home because obviously it's 
 going to upload faster when they 
 they have 
 everything uploaded at home and then we 
 also use colab 
 which is an online sort of jupiter 
 notebook and 
 some students also will choose recollet 
 so having those 
 two locals and something that they have 
 on the cloud can help so when for 
 example a computer breaks or they have 
 to borrow a computer from their mom or 
 dad 
 they have an option that is online and 
 they can still work with 
 um so that's what we do 
 amazing agreed actually yeah pretty much 
 the same as well like we would have used 
 very much um kind of likes of tony and 
 pycharm 
 traditionally but covet has just changed 
 everything and we have to be have to 
 have availability online and for 
 students and staff so that in the event 
 that i'm teaching in a classroom and 
 half of my students at home that they 
 can complete the coursework as well so 
 yeah it's very much mixed now 
 yeah we'd be the same except for the 
 uh the actual exam so the leave insert 
 exam is done on the computer 
 and but they can't have any internet 
 access so so they have to know how to 
 use tony you know they have to have seen 
 it and before the end but we have the 
 same we'd have a couple of 
 it's on the go yet okay 
 that takes us up to time and thank you 
 all very much for your questions and an 
 enormous thank you to chris kelly sarah 
 jane and roshin for your perspectives um 
 i'm sure there's lots of food of food 
 for thought for all the members of the 
 audience and all the things you were 
 sharing with us today and thank you 
 kelly for joining us remotely and you 
 are very much here uh it feels like 
 you're sitting with us in dublin so 
 thank you we hope to watch kelly's 
 podcast yeah 
 absolutely yeah absolutely check it 
 teaching pipe and podcast for sure um 
 but yes thank you all so much and thanks 
 to your python and the organizers this 
 has been very straightforward um which 
 has been a very nice thing and but yeah 
 uh thank you all for being here and 
 around the closet for our lovely 
 panelists and for amy as well 
 [Applause] 
 great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at europe when i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the europe python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for europe 
 iphone i've learned some animal parts 
 like 
 that graphs have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and all those things 
 knowing people and 
 knowing 
 many different society europa society 
 and type of 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quiet is just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd cam for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 was i got five minutes five minutes to 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and say that they loved 
 it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 yes 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to 
 organize maybe the next europe python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 things were before how things are right 
 now there were some really interesting 
 conversations about what could be done 
 to be like more community centered for 
 us to be more community centered how we 
 can help more open source um 
 organizations and more specifically just 
 be more closer to the community 
 so today at europe when i learned about 
 how the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for europe iphone i've 
 learned some animal parts like 
 giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i thought i learned 
 a lot about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 member and finance 
 community members 
 but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about europa 
 though is well the people the people 
 real quick are just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i learned for 
 example about linters for the import 
 statements which i still have to read 
 about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing it was i got five minutes 
 five minutes to prepare for a session 
 share and then after all i got loads of 
 people coming saying thank you and say 
 that they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic highly 
 recommend your python and hopefully see 
 you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to 
 organize maybe the next europe python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at europa python i learned 
 about how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for european 
 i've learned some animal parts like uh 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i thought i learned 
 a lot about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 member and python 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to 
 i think my participate thing about euro 
 python is well the people the people 
 around python is just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that this 
 year meeting a lot of friends in person 
 so i've been in europe for three years 
 and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 it was i got five minutes five minutes 
 to prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and they say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny i think it's 
 just fantastic i highly recommend your 
 python and hopefully see you next year 
 um is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umnitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 take one 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague and it would 
 be great to 
 organize maybe the next euro python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered uh for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about your python is uh 
 now that we're not remote anymore it's 
 actually talking to people meeting 
 people and interacting and especially 
 comparing uh 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for europe 
 iphone i've learned some animal parts 
 like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and knowing 
 many different society european society 
 network 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quiet are just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd cam for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing it was i got five minutes 
 five minutes to prepare for a session 
 share and then after all i got loads of 
 people coming saying thank you and say 
 that they loved it so i think that was a 
 great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how omnitsa can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 so 
 yes 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague 
 and it would be great to organize maybe 
 the next euro python there that will be 
 fantastic a great city great people 
 great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about you hello everyone 
 so uh 
 we are about to proceed with the 
 conference uh thank you alden for coming 
 um i'm i'm really glad actually that uh 
 at euro python we have this track about 
 c python internals and that so many 
 people show up and listen about it's not 
 just how to use python but also what's 
 going on inside 
 and 
 this talk from sebastian zev is 
 one of the most interesting to me i 
 would say here so i'm really glad that i 
 can 
 share this one 
 so please join me in welcoming 
 our speaker 
 yeah thank you very much for that 
 introduction uh so you've made it we're 
 nearly at the end of europe python i'm 
 so glad that are still people here i 
 noticed some people going off to the 
 airport already so i'm really happy that 
 you're all here so thank you very much 
 for joining my talk 
 i won't do an anecdote i think you've 
 heard enough during the conference i'll 
 just dive into my talk i'll first 
 briefly introduce myself who am i and 
 then we're going to talk about the 
 actual substance 
 so my name is sebastian i'm from the 
 netherlands i live near the hague 
 i love it there and i work for a company 
 called ordina and more specifically the 
 ordina pythoners which is a smaller 
 practice within our company that really 
 focuses on python development 
 i'm also one of the codesmiths which 
 means that i get some time for 
 innovation for conferences being here 
 but also just to explore python with all 
 the other python developers at my 
 company 
 and at other companies as well just to 
 have a little bit of fun with python i 
 think that's really important to have 
 fun with python to really 
 dive into it and make it your passion at 
 least for me 
 that's really what i love in my spare 
 time i'm one of the volunteers for 
 europe python here this year i was the 
 finnaid lead for the financial aid 
 program 
 and i also did some session sharing was 
 really interesting i'm really happy that 
 we've made it so far 
 into the conference and i'm also one of 
 the founders of python discord which is 
 a larger online python community 
 with a lot of teenagers but also other 
 folks who are trying to learn python 
 discuss python and do other stuff with 
 python so definitely check it out if you 
 haven't heard about it anyway that's 
 enough about me let's talk about python 
 so what are we going to do today well 
 basically we're going to make a journey 
 a journey all the way from the source 
 code of python to the execution 
 and for me it's kind of like writing 
 magic spells i used to play games like d 
 and d and stuff like that and with 
 programming languages you get to write 
 something and then something happens 
 often it's not what i want but at least 
 something happens so that's what we're 
 going to see today i'm going to take you 
 on a journey i'm going to show you how 
 python gets from the source code all the 
 way to the magic all the way to the 
 execution i'm not just going to give you 
 a lecture about that i think that would 
 be rather boring 
 but i'm going to show you how to 
 implement a new operator in python and 
 that will naturally take us all the way 
 from that source code to that execution 
 however do note i have a serious 
 disclaimer for this talk 
 we have time constraints so i'm going to 
 omit things there will be blatant 
 emissions there will be gross 
 oversimplifications i will take 
 shortcuts the implementation will not be 
 ideal but hopefully it will give you an 
 overview of what happens within in the 
 python internals 
 all right 
 if you do like to know more details if 
 you're interested after this talk 
 definitely check out the python 
 developers guide on devguy.python.org 
 it contains a lot of information about 
 how you can mess with the python 
 internals how to compile it but it also 
 has excellent explanations about the 
 parser grammar and everything else and 
 then obviously there's anthony shaw's 
 book c python internals published by 
 real python it's a great book definitely 
 check it out if you're interested in 
 this 
 all right 
 so what is our journey today well we're 
 going to go from source code to 
 execution basically in two parts in the 
 first part we're going to look at the 
 tokenizer and the parser to create 
 something called an abstract syntax tree 
 and then in the second part we're going 
 to take that abstract syntax tree and go 
 all the way to the magic 
 using the compiler and evaluation loop 
 by the way if you want to check out the 
 slides or the source code for the the 
 version of python that we're creating 
 today check out the github repository 
 everything's there a couple of versions 
 of the slides one version of the source 
 code but do note it's an educational 
 implementation 
 don't use it in production i'm not 
 maintaining it it's a crappy 
 implementation please don't use it for 
 anything serious 
 all right 
 what is a pipe operator 
 well a pipe operator is something that's 
 part of a lot of languages but not 
 python and it's basically another way of 
 calling functions so say you have a 
 function that takes one argument like 
 this double over here it just takes a 
 number and it multiplies the number by 
 two and it returns to value well the 
 pipe operator allows you to call this 
 function in a different way you provide 
 a value on the right hand side of the 
 operator then you use the operator 
 itself then you name the function and 
 then the argument will be passed into 
 the function and you get the result out 
 of it 
 but this is obviously not really 
 interesting just like calling the 
 function double one 
 but what you can do with this is you can 
 build pipelines so you can start with a 
 single value and you can pipe it into 
 various functions process it you get 
 something out the other end so in this 
 case this would be equivalent to calling 
 double 
 one and then insert that into another 
 double call the nested function call so 
 this is what we're going to do today 
 well just to be clear this is not a part 
 of python i don't think it will ever be 
 a part of python there were a few 
 proposals for this they were rejected 
 for good reasons maybe in the future who 
 knows ask a core developer not me 
 and the implementation is purely 
 educational i've already mentioned that 
 so the first part 
 we want to get from the source code 
 so the characters 
 on the right hand side all the way to 
 that abstract syntax tree that you see 
 there 
 so this tree like representation of your 
 source code so if you have a single 
 python file with this line in it only 
 this line you'll get something like you 
 see there the tree representation of 
 your source code you have a module a 
 single expression it's a binary 
 operation an operation with two operands 
 of value to the right hand side and a 
 value to the left hand side 
 and that binary operation has a constant 
 at 10 it has the operator itself the 
 call pipe and then it loads the name the 
 name of the function obviously this 
 won't work in a file and so on because 
 there is no function here but this is 
 the general idea of what we're trying to 
 do in the first part we're trying to get 
 from that part to that nice tree over 
 there 
 so first look at our source code 
 we humans we are very good in reading we 
 recognize patterns we immediately see 
 that we have a 10 that we have a name 
 double that we have a weird operator in 
 the middle that is unfamiliar in python 
 but at least we immediately recognize 
 the bits but if you think about it for 
 python at the start this is just a 
 stream of individual characters there 
 are 12 characters here and they make up 
 our source code and python has to 
 understand those characters and the 
 first step python fakes 
 is basically extracting the tokens from 
 this source code and tokens are the 
 minimal parts that still have a meaning 
 so for instance we have a number token 
 over here if you split this up even 
 further into a 1 and a 0 you lose the 
 meaning of the number 10. 
 we have a name over here obviously if 
 you remove a character it's no longer 
 the same name so this is a name token 
 and the first thing that we need to 
 implement is that python will recognize 
 this 
 token here in the middle this operator 
 this two character operator has one 
 single token 
 this isn't very difficult to do this is 
 just a configuration in a file if you 
 look in the python repository there's a 
 file grammar slash tokens and it's just 
 a big mapping of token names to token 
 character sequences 
 so all that we have to do is we have to 
 add our own token into this file 
 and there's no meaning here yet this is 
 just a description of the token so i've 
 called it vbar greater fill the vertical 
 bar grader and i've mapped it to the 
 token sequence that we want to introduce 
 this isn't 
 all of it but what we still need to do 
 is regenerate the tokenizer itself the 
 actual 
 piece of python that will get this 
 tokens from your source code because 
 python will not read this file every 
 time it tries to parse source code for 
 that we just have to run some commands 
 and this will be a recurring theme in 
 this presentation change something run a 
 command and then you can see the result 
 so these are the commands i'm not going 
 to go into detail in all those in all 
 these commands because you can find them 
 on the internet and you're not going to 
 remember them here anyway 
 but after we've done this python will 
 now be able to recognize our new token 
 our 
 vbar greater token 
 and that's already a big step but it 
 doesn't really know what to do with that 
 token 
 so there's no grammar rule that tells 
 python if you see this token then this 
 has to happen 
 so the next thing that we will need to 
 do is we need to add support for this 
 new token in python sparser by adding it 
 to python's grammar 
 while the grammar also has to produce 
 something which is the abstract syntax 
 tree that we saw earlier so we also have 
 to tell the grammar how to generate the 
 abstract syntax tree and make sure that 
 there's something for our coal pipe 
 available in that abstract syntax tree 
 so let's look at our grammar yet 
 so 
 since python 3.0 i forgot 3.9 
 the new pack parser has been introduced 
 and this has a completely new grammar 
 it's very flexible it's very powerful 
 but we first have to look into the 
 syntax of the grammar just a little bit 
 to add our own rule so i'm just going to 
 take a 
 very small dive into the parsing 
 expression grammar that python uses just 
 enough to know to define our new rule 
 for the call pipe operator 
 so if you imagine a very simple 
 programming language 
 and it only has two expression types it 
 has a sum 
 and it has something called an atom 
 and in this very simple language there 
 are only two grammar rules 
 the sum and the atom there might be some 
 other for statements and stuff like that 
 but we we're going to ignore that for 
 now we're going to focus on these two 
 then this is basically what you can 
 define in pack parser this is a little 
 bit simplified 
 but these could be grammar rules and 
 just to color code them grammar rules 
 can reference each other and this is how 
 python goes down all the grammar rules 
 to see what it matches so its first try 
 starts by trying to match the sum rule 
 and within the sum rule there are 
 options that reference the atom rule 
 which is just a number and that is how 
 we ever consider the atom rule 
 so if we just have this single piece of 
 source code it's just a number it will 
 first try to to match the sum rule it 
 has two alternatives that's what the 
 vertical bars mean it has an atom plus 
 an atom and it has an atom on its own so 
 this matches the second alternative in 
 the sum rule which is an atom then we 
 look at the atom because it's just a 
 number so we can parse this 
 so in this very simple grammar example 
 we can parse a number on its own 
 how what about this one 
 on this one we have an atom a number 
 plus and then another atom which matches 
 the first rule of the sum so it's very 
 easy to see that this grammar rule will 
 now be able to match this simple piece 
 of grammar as well 
 but now what about this one 
 think about it for a moment 
 are our grammar rules able to parse this 
 very simple statement 
 i see some people shaking yes other 
 shaking no but the problem here is that 
 when you start parsing your expression 
 you will consume these parts we can 
 parse this very easily and what we're 
 then left with is a plus and a three 
 and we have no rule that matches a plus 
 and a 3 on its own 
 so how are we going to match something 
 with two pluses obviously we can add 
 another rule 
 but what if we want an atom plus an atom 
 plus an atom plus another atom do we 
 have to add another rule and if we want 
 four pluses or five or six or if we want 
 an infinite pluses we'd be busy quite a 
 long time if we wanted to add 
 alternatives for all those different 
 scenarios 
 but there's a very simple solution for 
 that and you're probably going to love 
 this it's just recursion so what we can 
 do is we can change the first 
 alternative in the sum rule we can make 
 it reference itself 
 and now we can have sums that are 
 embedded in other sums embedded in other 
 sums and just remember a sum can also 
 just be an atom on its own so we can 
 still match an atom plus an atom 
 but now we can also match 
 a sum contained in another sum 
 and this is basically all that you need 
 to do to get an arbitrary number of 
 operators in a row and if you think 
 about it this is precisely what we need 
 for our new pipe operator 
 we also want to be able to build an 
 arbitrary long pipeline so the grammar 
 rule that we will need to add is a 
 grammar rule that has such a recursive 
 relationship 
 so let's see that 
 this is the existing grammar file in 
 python grammar python.gram here you see 
 the shift expression if you want to do 
 bit shifting and you see the sum 
 expression i'm just going to insert our 
 new grammar rule between those two so 
 let's make some space 
 this is probably isn't the best place to 
 insert it but it means that it's very 
 easy to insert it so that's why i've 
 chosen it 
 so here we're going to add a new rule 
 let's call it pipe and as you can see 
 here this is just our recursive 
 relationship 
 there's just one problem our grammar 
 rule isn't referenced by any other 
 grammar rule in python so the the parser 
 will never consider it when parsing 
 source code so what do we have to do 
 well if you look at the the shift 
 expression it actually references the 
 sum expression that's how the grammar 
 rules flow down so the only thing that 
 we need to do to insert it we have to 
 change the references in the shift 
 expression to the pipe one and in the 
 pipe that can then reference to someone 
 so if we change this 
 the shift expression now references the 
 pipe one the pipe to someone and now our 
 grammar rules can flow down again 
 and this is basically the only thing 
 that we need to do to add our new 
 grammar rule for our new 
 pipeco operator 
 so now we can parse this right we're 
 done 
 well not quite 
 but because we also still need to be 
 able to create 
 the tree structure that you see there on 
 the right we have to be able to fit it 
 into our abstract syntax tree so how are 
 we going to do that 
 in the old parser there used to be an 
 intermediate step the concrete syntax 
 tree but with the new pack parser we 
 don't need that anymore and the reason 
 why is that because we now have 
 something called grammar actions if you 
 look here this is a grammar action 
 between the curly braces and because 
 we're targeting c python 
 this is basically just a piece of c code 
 that is embedded into the grammar file 
 so whenever python matches a sum rule it 
 will then call this c function to create 
 the classes that we see there to create 
 a tree tree structure that we see there 
 but to create a binary operation tree 
 structure we need the right hand side of 
 the operator so the value we need we 
 need the left hand side and we need the 
 operator so that's the information that 
 we're going to pass into this function 
 and that we can do by assigning names to 
 the parts that we match in our 
 expression so we match an a to the 
 right-hand side pass it into the 
 function we match a b to the hand side 
 pass it into the function we know that 
 this is an add operation because this is 
 the sum rule so we can hard code the add 
 operator and there are some extra bits 
 having to do with line number and stuff 
 like that we're going to ignore that for 
 now but they're very handy for 
 tracebacks and other kinds of 
 interesting things 
 so this is all we need to create a 
 binary operation with an add operator 
 can we now do that for our own rule 
 obviously we can just copy the approach 
 because our new operator is also a 
 binary operation so we can just make it 
 call the same function but instead of 
 using the add operator we can use the 
 call pipe operator here 
 just one tiny problem 
 the ast uses classes and there is no 
 class called call pipe yet 
 it just doesn't exist yet so we have to 
 create that so that we can actually 
 build this abstract syntax tree with 
 that call pipe node somewhere in the 
 middle for the operator field so how do 
 we do that is it difficult do we have to 
 code a lot luckily not because this is 
 another configuration file this is in 
 parser 
 python.asdl which stands for abstract 
 syntax definition language 
 and as you can see here somewhere in the 
 middle there's a part for the operator 
 and here's our add option just in an 
 option list 
 and this is all you need to do to 
 have a generator create classes for you 
 so what do we have to do 
 just add our new operator at the end as 
 an other option 
 then we regenerate the asd we run 
 another command and now our classes will 
 be created for us 
 so this is all we have to do to add 
 support in the ast 
 now we can regenerate the entire parser 
 and now we are actually able to parse 
 expressions with the call pipe operator 
 in it you can see here that we have a 
 binary bin up node somewhere in our ast3 
 and it actually uses a call pipe class 
 object in there to represent the 
 operator so this is all that we need to 
 do for the new grammar 
 and now we're done now we can go from 
 source code to an abstract syntax tree 
 but this is all fairly static nothing 
 happens yet 
 so to do that we need to move on to part 
 two where we're actually going to 
 run where we're actually going to 
 transform this into something we can run 
 and then actually execute it 
 so in part two 
 we will look at the compiler 
 so if you've ever joined an online 
 discussion about is python a compiled 
 language or not please don't they're all 
 very toxic 
 but we are going to compile this into 
 some form of an intermediate language 
 we're going to compile this into a 
 little bit of byte bytecode 
 and to do that 
 we need to have a byte code for our new 
 operator because bytecode is just a long 
 list of instructions for python 
 a long sequence of bytes a long sequence 
 of numbers and each instruction that 
 we're going to execute has its own 
 number or its own byte and we need one 
 for our new operation 
 and obviously there is already a byte 
 code for calling functions but i'm going 
 to ignore that one because it isn't fun 
 to use what's already in python 
 so we're going to add support to the 
 compiler by creating our own instruction 
 then we're going to make the compiler 
 actually use that instruction write it 
 into the bytecode and then we're going 
 to 
 to add support in the evaluation loop to 
 actually do something with that code 
 so let's do that this is the only python 
 file that we'll see today we can use it 
 to define our operation codes our op 
 codes 
 our opcode doesn't have an argument 
 don't worry about that for now but it 
 means it has to have a number lower than 
 the half argument constant so i'm just 
 going to add it here i'm going to call 
 it binary pipe call that's for us so 
 that we can understand it and the byte 
 code the number that we associate with 
 the operation is 90. and i have to 
 increase all the numbers below it and 
 that's a tedious job but we'll have to 
 do it 
 now we can regenerate all the op codes 
 do you see the pattern yet and now the 
 op code will actually be generated for 
 us right now we have an opcode now we 
 still need to make the compiler actually 
 write that opcode into the bytecode 
 so how are we going to do that 
 well the compiler is just going to visit 
 all the nodes in our ast and it has 
 functions that handle that visit 
 and somewhere in our compiler there's a 
 function called compiler visit exp1 
 expression1 which eventually gets called 
 to handle expressions we don't actually 
 have to change it but there's an 
 important fact here 
 if you look at this function it's just a 
 massive switch case operations and for 
 each type of expression including the 
 binary bin up kind 
 there's a special case and here's our 
 case 
 we first are going to visit the 
 left-hand side of the operator which is 
 really important because we need that 
 value write all the instructions for it 
 then we're going to visit the right hand 
 side write all the instructions to 
 evaluate the right hand side and then 
 we're going to add the operation for the 
 operator 
 and to know which op card to write 
 there's a helper function bin up and 
 this is the function that we actually 
 need to change 
 this is another switch case statement 
 this will get an ast note like this add 
 here and it will return the bin up that 
 we actually want to execute or add to 
 the byte code so we need to add another 
 case 
 write our binary pipe call operator and 
 now we can write it into the byte code 
 there's one final thing that we need to 
 change in the compiler it's the stack 
 effect python uses a value stack you'll 
 see that later 
 and the effect of our operation is that 
 our value stack decreases by one value 
 but don't worry about that for now 
 and this is the compiler and now we can 
 go from an ast to a long list of 
 instructions and this is all we need to 
 write our new operator our new opcode 
 into the bytecode 
 and now we get to the evaluation loop 
 and this is really where the magic 
 happens 
 the evaluation loop like the name says 
 is just one giant loop that goes around 
 and around and around and around 
 executing all the instructions in the 
 bytecode and inside of that loop there 
 is a massive switch case statement and 
 i'm not 
 exaggerating it's really massive look at 
 the source code in python ceval dot c 
 and for each op code it has a case so 
 for instance here is the binary subtract 
 and this is the code that actually gets 
 executed whenever it sees such an op 
 code for a binary subtract 
 something minus something else 
 but here we have a problem because how 
 do we get the values that were to the 
 right and to the left of the operator 
 how do we get them 
 back to actually process them here well 
 this is why python uses a value stack 
 and from that value stack we can get the 
 values that we need to perform the 
 operation how does that work say that we 
 have this simple expression 4 minus 1. 
 what we saw earlier is that python will 
 first write the instructions to evaluate 
 the left hand side when it's done it 
 will put that value onto the value stack 
 to remember it then it will evaluate the 
 right hand side and it will put it on to 
 the value stack and the value stack is 
 really a stack it will put a 3 on top of 
 the 4 on the value stack just so that 
 we're able to use them later 
 so when we enter this new function for 
 the operator the 3 and 4 are on our 
 value stack so now that we can use the 
 pop macro just to get the 3 out of the 
 value stack and make write point to that 
 value 
 for left we do something similar we 
 leave it on the value stack but we make 
 left refer to that value that's there on 
 the value stack 
 now we have our 
 values we can call a c api function pi 
 number subtract pass in the two values 
 we get a result out of it result will 
 now point to the one 
 we are now done with those values we can 
 decrease the reference counts for the 
 values and then at the end we need to do 
 something with the result with the 
 resulting value so what do we do we just 
 put it back on the value stack we're 
 going to replace the value that was 
 already there 
 so after performing the operation 
 there's one less value on the value 
 stack and that was the minus one that we 
 saw earlier then there's some error 
 handling and then we do a dispatch to 
 say to the evaluation please move on to 
 the next value 
 so how do we do that for a binary pipe 
 call well we just copy-paste this code 
 because this does basically what we need 
 we change the targets to our binary pipe 
 co-operator we get the values like we 
 did before but now we don't want to 
 subtract them we want to call a function 
 with a value 
 there's a very handy c api function in 
 python 3.9 it's not in the long term 
 stable one so it might be deprecated but 
 it's very handy here and here you can 
 call a function with one argument 
 and remember the function was on the 
 right hand side so we 
 pass in function right first the value 
 was on the left hand side so we pass it 
 in second we get the result decrease 
 your reference counts and we 
 put the resulting value back on the 
 values value stack 
 and this is all we need to do to get 
 from the asd to the magic 
 and now we've completed our journey we 
 can go all the way from source code to 
 execution and all the steps that are in 
 between there's just one thing left to 
 do let's compile our new version of 
 python 
 and if you're waiting for it you can you 
 might as well just have a sword fight 
 and after that's done you can run your 
 new version of python and you can use 
 your operator it will actually 
 work if you follow these steps there are 
 some quirks especially in operator 
 precedence with this implementation but 
 it will work in principle 
 and basically that's it we've seen a lot 
 of python internals 
 in a short time don't worry about it 
 this is just for a framework check out 
 the books the dev guide source source 
 code and slides are available and if you 
 get weird errors try running make clean 
 or clean all on windows 
 and look into something called the magic 
 number because we've changed the 
 bytecode version so we need to change 
 the bytecode version in c python as well 
 before we go 
 i hope you've been you've enjoyed your 
 python it's been great for me but we 
 also need to organize the next edition 
 in 
 2033 i don't know when or where it's 
 going to be but if you want to be a 
 volunteer just like me 
 join us to help organize python 23 you 
 can send an email there or you can just 
 talk to me after my talk and that's it i 
 hope you've enjoyed my talk thank you 
 very much 
 thank you very much thank you 
 wow wow wow 
 i 
 to expected we're going to see a lot of 
 forks of python nowadays 
 um so do we have questions 
 so when you'll be ready just queue up 
 and we have we can okay go on 
 uh 
 just something silly uh in the beginning 
 when you created the tokenizer 
 you had a symbol there 
 did you use that afterwards i don't 
 remember 
 the symbol the the the the vertical bar 
 and uh yeah the v bar 
 grader 
 well we don't use the name that that we 
 can use it to tokenize our output but we 
 haven't used the name in the grammar um 
 so we haven't used the name but the 
 token sequence is obviously our new 
 operator so that's the actual operator 
 that we use 
 um 
 so so why did we give it a name 
 because we had to mostly for us humans 
 to make it readable 
 so uh yeah 
 okay another one please 
 thank you for the talk i really enjoyed 
 it i have like a stupid question like 
 every time i'm here that like the 
 bytecode evaluation evaluations just a 
 loop looking at the top of the stack it 
 seems so like limiting like you have 
 just like one 
 value you can look at how does it happen 
 that it like has like normal performance 
 like it doesn't yeah 
 it's very interesting so there are 
 obviously a lot of optimalization since 
 there but basically this is just kind of 
 like a virtual machine you have 
 instructions you have a value stack that 
 you keep track of some kind of register 
 and and that's really powerful you can 
 really do a lot with it 
 so maybe in the advent of code which is 
 a online puzzle i think in the 2019 
 edition you will actually 
 build your own kind of like intcode 
 computer using your own kind of bytecode 
 and targets so i recommend you to check 
 that out and you can really see how 
 powerful it can be 
 so 
 i'm not quite sure how 
 performance you can get it but 
 have fun 
 thanks 
 so um i don't see anyone else keen i 
 have a question though yeah so 
 one minute 
 to describe what's the magic number the 
 magic number 
 so i actually had a file about it so 
 whenever python compiles your code it 
 will write to a pi c file you've 
 probably seen it somewhere and that 
 bytecode is versioned it has all the 
 instruction numbers in there but if 
 you're going to change the instruction 
 numbers and obviously all the old 
 bytecodes they're no longer valid they 
 use the old numbers so there's a kind of 
 a versioning in python it's called the 
 magic number and it will version that 
 bytecode you can actually change that 
 magic number if you change the the 
 bytecode opcodes so that all the old pi 
 c files will be marked as 
 how do you say that still and it will 
 recompile all your python so just to 
 avoid very weird things happening with 
 all bytecodes with changed bytecodes it 
 gets a mess so that's what that's the 
 magic number yeah thanks 
 well thank you and this is all the time 
 we have so please 
 uh give a round of applause now thank 
 you very much 
 and thank you everyone for coming and 
 the next one the next thing we have is 
 lightning talks i believe so 
 uh see y'all there i guess 
 thank you 
 and you know how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered uh for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the european is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during 
 our preparations for europe iphone i've 
 learned some animal parts like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and those things knowing 
 people and knowing 
 many different society europa society 
 and typhoon 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 join us 
 i think my favorite thing about euro 
 python is well the people the people 
 real quick are just fantastic it's the 
 best people i've ever met 
 for me it's like a 
 nerd cam for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but i learned quite a lot 
 from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 was i got five minutes five minutes 
 prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and say that they loved 
 it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend europe python and hopefully 
 see you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life 
 achieving five key benefits 
 find out how umitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 so 
 [Music] 
 [Music] 
 [Music] 
 so hello welcome 
 this is the 
 last 
 learning talks of this week 
 please everyone with aligning talk 
 q there 
 that we need all of you ready 
 to 
 to be in the stage 
 um 
 if you are not here your lining talk is 
 not going to go live 
 so please do 
 what time is 
 um but the way we phone a wallet 
 if someone lost the wallet is with 
 security downstairs 
 oh maria is there 
 yes 
 that's you so then while he is hooking 
 up 
 no i need a presentation 
 um 
 this one 
 okay 
 sorry i need 
 to leave my laptop here 
 again if you have a lining talk please 
 stay there with your laptop already 
 all the people that i was trying to sign 
 last night after the social event to be 
 first in the list i throw that to a 
 garbage and i put a new one this morning 
 at eight 
 okay 
 ready yes 
 okay so 
 wait wait wait wait wait wait wait go 
 okay welcome everybody today i'm 
 vladimir piskin and i'm going to talk 
 about professional vulnerability of 
 software engineers 
 yeah good controls work so i want to 
 start with a question what is the 
 ability every developer has 
 to answer it let's take a look into 
 what is developer learning loop 
 when you implement something you begin 
 with learning new things 
 then you 
 implement and 
 receive knowledge to the code base 
 and then you're very likely to have some 
 obstacles 
 it is not pretty general though it 
 depends on your experience 
 and the 
 complexity of the issue 
 but we all know it 
 and you repeat it over and over until we 
 die now until we solve it 
 and 
 there is something which 
 is always there when we are 
 struggling with the problems and it is 
 frustration 
 while solving a problem we really 
 frustrate a lot 
 and while you are growing as developer 
 you develop your skills of dealing with 
 frustration 
 and 
 while we grow 
 this frustration which is big and takes 
 overview 
 becomes something like this 
 small tiny thing in background when you 
 just 
 so focused that you don't really notice 
 that you're frustrated 
 and you with this you're really getting 
 better at ignoring your own emotions 
 which is leading to different problems 
 as procrastination or anxiety or even 
 sleeping issues that could be something 
 else 
 and one small thing i want to share with 
 you during this lightning talk is that 
 you should never forget to listen to 
 yourself 
 and for this you could use different 
 tech techniques 
 like journaling or you can just 
 stop for a second and ask yourself how 
 do you feel from one to five 
 and 
 how do you feel now guys 
 thank you enjoy the weekend it was 
 pleasure 
 sorry 
 yes 
 okay second one 
 marika masha 
 and lisa from ukraine and they're going 
 to share some 
 things 
 hello everyone we are a small team of 
 junior python developers from ukraine 
 and we are very glad to be here we have 
 just started our career in software 
 development my name is lisa this is 
 marcia and marika 
 to start with we want to 
 thank or thanks all countries that 
 supports ukraine especially ireland that 
 opened their country 
 for 40 000 ukrainian refugees continue 
 to help ukraine 
 in humanitarian aspects used in every 
 opportunity this is incredible 
 and we're really grateful for that 
 thank you 
 how can i sorry 
 i want to share with you my own story 
 about 
 how the war came in my life on this 
 slide on the left side you can see my 
 neighbor's house that i see every day 
 from 
 window in european city 
 yeah 
 on the right side you can see 
 something i don't know how it's naming 
 that was founded on the yard in the yard 
 of my parents house 
 near hostile mall 
 so 
 and 
 unfortunately every ukrainian now have 
 similar story 
 about his 
 parents his friends or his own story 
 for today there's 
 no single uh ukrainian that was not 
 affected by the war 
 it's 
 pity 
 we want to ask you 
 to afford help 
 to help ukraine here you can see a 
 volunteer organizations that we support 
 and we ask you to to help 
 the first organization is based on 
 detroit i attend 
 via engage 
 engaged in evacuation of people from 
 dangerous places 
 and humanitarian aid 
 delivery to hospitals town and cities 
 that are in rig or have just been 
 liberated by 
 armed 
 forces of ukraine that helps with most 
 urgent 
 needs such as reconstruction of houses 
 of people who suffered 
 the second is shelter for animals that 
 takes 
 abundant or injured animals from the 
 areas affected by the warfare 
 financially there is 
 no small help 
 any sum is appreciated 
 and what else you can do for us please 
 don't fear to hire ukrainians especially 
 young developers as 
 like us we are really happy to have a 
 job most of us started our 
 career at the beginning of the war but 
 many people in ukraine are not as lucky 
 it's too hard to find a job in ukraine 
 at the moment 
 so please donate help ukrainians and 
 help junior developers especially women 
 we are really needed thank you uh we are 
 open for any questions you can find us 
 somewhere here in the whole uh 
 aftertalks 
 thank you 
 thank you thank you very much 
 okay 
 sebastian is the next one 
 what's the name of your talk it 
 and i'm going to repeat that 
 the red one the red one i don't have a 
 they told the dongle yeah but 
 me one second 
 yeah projector is not happy with the 
 name of your talk 
 i thought this one was better okay where 
 is with you probably 
 yes 
 go 
 all right hello guys so i'm going to 
 teach you oh one second 
 i'm going to teach you how to fix 
 production code in five minutes 
 um so first let's start a little bit 
 with who i am i'm a franco mexican 
 python developer i mean i develop in 
 python i don't develop python uh i'm 
 luckily i'm a numberly data engineer i'm 
 a peer-to-peer lover obviously and i've 
 been attending euro python since 2019 
 so 
 a little disclaimer here if you use this 
 at your job you might not have a job for 
 a very long time 
 okay 
 all right 
 this is what it is um so don't you hate 
 it when you know you push some code to 
 production you don't test it because why 
 would you ever do that and uh there are 
 some errors that come up and the code 
 doesn't work 
 today i'm going to teach you how to fix 
 all that 
 i'm introducing it 
  it is an official python library 
 you can just pip install it and 
 then whenever you have a function that 
 fails you just use the decorator 
 and it doesn't fail anymore 
 isn't that great 
 [Applause] 
 all right this is good this is good 
 oh wow okay 
 um so this uh this package obviously is 
 not developed by me it's developed by aj 
 alt so you know you should clap for him 
 not for me please go ahead and 
 um and as was written in the official 
 github but you can't see because it 
 didn't load uh this module is like 
 violence if it doesn't work you're just 
 not applying enough of it so you can 
 just chain it calls and uh make 
 stuff that still breaks not break 
 anymore let's see some examples 
 um so if you have a bunch of code and 
 you don't know which part of it is 
 failing but some of it is failing you 
 can just use the context manager 
 and 
 all of your failing code will work 
 and if you have a module and the module 
 is broken you can just import the module 
 with it and the module no longer 
 breaks 
 so yeah 
 next time uh your pm your po your cto or 
 anyone comes to you and says uh 
 production is 
  it 
 so before i knew what this talk was 
 going to be about i asked my cto if you 
 would approve the talk 
 he said okay 
 please don't fire me 
 thank you guys 
 so 
 the pycon portugal while so come here 
 oh you have slides okay no wait next 
 sorry 
 if anyone wants to announce a conference 
 there is a one minute thing that we can 
 do 
 in the middle 
 you just like to make your life harder 
 yes 
 after this 
 ready 
 oh okay 
 this 
 okay 
 five minutes okay 
 hi 
 uh i'm takadi and today i my talk title 
 is spread the community after that 
 corbett 19 in japan 
 before my topic 
 did you enjoy your python 
 yeah 
 i know i really enjoyed the europa's 
 song with good people and nice beer and 
 nice beer and a nice beer 
 i'm taking suzuki uh please call me 
 takanori because suzuki is a famous uh 
 famous family name in japan i'm from 
 tokyo japan tokyo is far from europe 
 i have a question do you know japan 
 right hand 
 oh almost uh have you been japan 
 oh thirty percent do you know pycon 
 japan 
 or teamwork 
 uh have you attended pycon japan 
 one two three thank you 
 hi i'm vice chairperson of bike and gp 
 association we launched the python gp in 
 2011 
 at that time the pricing committee in 
 japan was so small 
 the first pycon gp had about 150 
 participants 
 now pycon gp has grown to one thousand 
 participants over 
 yes 
 in this year pycon gp will be held as an 
 impassioned event please come to japan 
 have a beer with me 
 apart from piconstrip event we also work 
 to spread python in japan 
 why is price of boot camp due to events 
 for beginners all over japan 
 we have held 44 camps 
 with about 
 800 participants 
 by the way i introduced it at the 
 european procession in 2019 
 does anyone remember me 
 oh thanks yeah 
 another one is pirate skeleman the event 
 connects local women's communities 
 across japan 
 however 
 as you all know comet 19 has changed the 
 world 
 we are no longer able to organize 
 in person events 
 but 
 we must not stop our activities spread 
 python 
 we have started two new activities 
 the first is pycon gptv 
 we stream youtube live every month 
 we talk about python news conference 
 overview and price of new features and 
 something 
 it's selfie time 
 i will present euro python at the next 
 bike on jp tv 
 i'd like to take pictures with you 
 or and share it on youtube live on 
 twitter 
 [Applause] 
 [Music] 
 whisky 
 okay 
 thank you 
 i will 
 share i would share okay 
 all right 
 sorry sorry sorry 
 other one is personality talks 
 we wondered if there was a way to 
 combine our splitting python in japan 
 and with 
 donation donating to the psf 
 it is 
 the python 
 detoxes of the event it is a half day 
 online event 
 with all participation and sponsorship 
 fees donated to the psa 
 we held three events 
 and donated 
 25 000 us there are over 
 so huge 
 yes 
 thank you 
 in recognition of these activities both 
 members of pykonjpa association 
 including me 
 won the psf community service award 
 oh yeah it was a great pleasure for us 
 please check this 
 finally i'm saying i'm sorry but i have 
 not to say goodbye because i'm not 
 heading to i'm now heading to denmark 
 because the regular house and regular 
 round waiting for me super excited 
 thank you see you again at pycon jp 
 anyway 
 thank you 
 you connect your laptop 
 yeah yeah and she is going to announce 
 that uh we are trying to stream things 
 yeah perfect cooperation thank you 
 sorry like someone just said that i can 
 do a one one minute uh licensing talk so 
 i'm just gonna announce uh announce a uh 
 conference that is called pyjamas con so 
 pajamas like the one the thing you wear 
 when you go to sleep and then calm conf 
 you can google it online i have no 
 slides um so if you google it you'll 
 still see our website from last year uh 
 that is actually uh you know 
 we haven't worked on it yet for this 
 year because uh people who involved in 
 pajamas most of them are still working 
 for europeans so we have no time to do 
 anything but uh i will start working on 
 it probably next month hopefully um so 
 please uh search for us again next month 
 and maybe cf cfp will be open the only 
 thing i'm sure is that 
 that conference is going to be online so 
 you don't have to wake up super you know 
 tired and go to the conference venue 
 because there's no venue and also you 
 don't have to worry about no space to 
 take a nap because you can take a nap in 
 your bed so that's it 
 thank you 
 thank you 
 that was exactly one minute 
 we don't know drinking guinness we are 
 like senior guinness drinkers by now 
 yeah 
 it's kind of i'm not professional 
 i know my stuff okay 
 hello i'm melan lesnik i'm from cubicon 
 i'm software over engineer and i want to 
 start with the beginning the video story 
 i have to come here i like you first 
 from the kiwicom and i have to wait for 
 them for six hours so like every normal 
 person i waited in pub 
 and 
 right down i came there or the guinness 
 and start checking it we are from czech 
 republic so check style 
 top down and the bartender just stopped 
 me 
 it was the hell on 
 in the pub it was a stream he just went 
 for me like i i'm mental what are you 
 doing did your mama drop you on the head 
 and then he told me something like when 
 he calmed down that you shouldn't drink 
 your nest immediately and the problem 
 problem is that 
 the guinness is a nitrogen-enhanced beer 
 which is delivered in the glass which is 
 property with the drug 
 as you can see the bubbles are dragged 
 by the glass and the current is in the 
 middle of the glass so the problematic 
 part is that the glass contains much 
 more air 
 and the beer is not tasteful from the 
 beginning 
 so 
 we concluded a lot of research don't 
 worry is going to get better i promise 
 also my pride in the pub 
 the guy is ugly on me and i'm from czech 
 republic and our consumption is 135 
 liters per person in the year including 
 infants and elderly 
 and i up drinking beer 
 so research 
 every day we are here we are researching 
 the best what we can do about guinness 
 drinking what is the best average time 
 having to start to drink how to look the 
 best foam and everything 
 also 
 we treated this beautiful graph about 
 bartender link intent and gina's taste 
 on the average it's enough to just wait 
 10 seconds and the dns is completely 
 fine sometimes it happens that we have 
 to wait 20 seconds but it's the worst 
 part and you can find out by the price 
 of the guinness that the guinness is 
 like nine euros 
 so 
 yeah bartender does not take care 
 anymore in like nine seconds because he 
 has much more work than just take care 
 of for you 
 the solution 
 we wanted to create machine learning 
 application like every other 
 to check out the foam thickness color 
 the average price quality of this 
 business 
 how much you have to wait and everything 
 like that 
 so for this purpose we already prepared 
 a roadmap about research preparation 
 which happened on the tuesday because i 
 was here alone so it wasn't proper 
 research 
 when my colleagues came and they are 
 awesome everyone helped every one of 
 them helped a lot 
 evening research it was awesome 
 another evening research another evening 
 research will happen today it is planned 
 on the roadmap and we are searching for 
 the investors today on this presentation 
 on the saturday we are going to research 
 more sunday also monday also and on 
 tuesday we have to return back 
 and unfortunately in the czech republic 
 we don't have a good dinners 
 so 
 golf for investors current total arena's 
 cost was 488 euros 
 and we are going to need approximately 1 
 000 euros and burst of aspirants i think 
 1000 is enough if we wanted to have six 
 beers everyone i think yeah yeah 1000 
 euros it's fine 
 and for the investment you are going to 
 get the whole company whole research 
 everything i promise so contact me on my 
 business opportunity social medias 
 you can choose any one of them i all i 
 use all of them except the tv from email 
 and let's see 
 that's it thank you very much 
 thank you 
 sounds like a really interesting company 
 to invest in 
 yeah i'm sorry it was a little bit 
 product placement i know it's not it's 
 prohibited yeah it's okay it's okay 
 it's legal in dublin thank you 
 [Music] 
 yes 
 oops 
 yeah 
 perfect cool 
 yep yep go okay hi everyone i'm amar and 
 i'm going to talk about ml so who here 
 likes ml 
 yeah a couple of people 
 so probably in the last couple of weeks 
 you've seen something like this this is 
 called dali mini it's an online tool 
 that you can write anything such as 
 lamas visiting dublin 
 and you will create a images so these 
 are fully generated 
 and now you might be wondering like 
 where are you going to talk about 
 machine learning 
 and the answer is no i'm not going to 
 talk about machine learning it's friday 
 i'm going to talk about memes and lemmas 
 and maybe a bit of machine learning as 
 well uh just to make this syntactic but 
 so this is a pikachu that looks like a 
 pug 
 these are lamas participating in a 
 hackathon in dublin 
 this is iron man but it's a lemon 
 and now you might be saying this is 
 probably probably magic so what if i 
 told you this is not magic 
 so right now i'm going to tell you a new 
 kind of model architecture called 
 diffusion models in an elevator pitch 
 and at the right you can see some lamas 
 having a rave in an elevator as well 
 so you say voldemort and alama taking a 
 selfie 
 there is voldemort there is dilemma and 
 the selfie 
 so what's going on 
 so you have the picture right 
 and pretty much this diffusion models 
 what they do is that they get noise so 
 they are destroying the picture until 
 you have just a bunch of noise 
 and then they will try to recreate the 
 original image from the noise okay a lot 
 of text 
 so 
 you say something voldemort and alama 
 taking a selfie and then you can use a 
 model called clip 
 so like lippy to create something called 
 the imagine coding and it sounds really 
 fancy but it's just a bunch of numbers 
 so an array of numbers that has a 
 semantic representation or a 
 representation of 
 the text and then using diffusion models 
 you will convert that to the last image 
 at the right so that's pretty much what 
 efficient models do 
 and that's how you can create a sketch 
 of a conspiracy theory that must build 
 the pyramids in egypt 
 darth vader maguin dalon 
 among us by the sauce is salamander 
 in the matrix 
 and lamas and minos attending a python 
 conference 
 so thanks everyone this demo is open 
 source 
 it's free anyone can go on the web and 
 try it out and we are having a hackathon 
 for the next week and you can join 
 yeah thanks everyone 
 thank you very much 
 so christian is next while christian is 
 connecting the laptop pycon uk is going 
 to do a short announcement 
 you you can use this one so 
 work with me here 
 hello europa python 
 after two years pycon uk is returning to 
 cardiff in wales from friday the 16th 
 till sunday the 18th of september 
 ticket sales are open hope to see you 
 there thank you very much 
 thank you so happy to see all the 
 conference 
 [Music] 
 it's okay 
 there is a few lining talks that we 
 don't have the speaker so if you're not 
 here we are skipping you 
 [Music] 
 and 
 yes 
 looks like you have a mirror 
 come on 
 yeah 
 perfect do it ah great 
 cool uh yeah is this it is uh funny how 
 some python conferences try to 
 kind of crystallize around a certain 
 topic and this year i think it was very 
 much 
 there was a lot talk about um 
 uh statically uh checking your code 
 and uh for formatting your your code and 
 also uh about type checking 
 and uh john carmack said 
 who doesn't know who john carmack is 
 show offense 
 who doesn't know what quake and doom is 
 okay i was john carmack and um john 
 romero actually other guys behind quake 
 and 
 doom 
 well that's a decimal context 
 the most important thing i have done in 
 the program in recent years is to 
 aggressively pursue static code analysis 
 even more valuable than the hundreds of 
 serious bugs i have prevented 
 with it is a change in mindset about the 
 way 
 i view software reliability in code 
 quality 
 and i think coming from 
 john carmack well he talks about c and c 
 uh c plus plus code there 
 but i think the same is applicable to to 
 python and yeah if john comic says that 
 i it's good enough for me 
 um yeah anyway i i 
 held a talk about uh around this uh 
 also and i just wanted to say my slice 
 up 
 here on the 
 uh 
 yeah this url 
 and uh yeah and i linked 
 on and i have a whole linked list 
 uh to 
 um yeah 
 to to uh refer to the tools i only could 
 yeah 
 i could not really address it in in my 
 talk 
 um 
 so 
 i 
 while i'm standing here i want to have 
 say a 
 big great thank you of the organizers of 
 this python 
 we came to think about you like uh like 
 our angels in in yellow so thanks a lot 
 guys you were brilliant 
 and i like to do another uh 
 shout out and that is to all of you guys 
 to the 
 to the python community you were are so 
 warm and welcoming and it you made it 
 for such a great conference so we came 
 for the language but we stayed for the 
 community 
 so so uh sad that we have to say goodbye 
 but oh that is the wrong meme 
 we'll be back in in in autumn's two two 
 pike two pico con islands in in dublin 
 thanks a lot 
 okay so we have an announcement here 
 [Music] 
 good afternoon everyone my name's 
 palmenda 
 i just want to reiterate the last 
 speaker's 
 comments about euro python and how it's 
 been so warm and welcoming this is my 
 first conference 
 just a quick announcement there will be 
 a social event happening tonight 
 at about hopper seven and there's a 
 small group going out for drinks and 
 dinner so if you'd like to join us 
 please meet us outside the convention 
 center around 7 30. 
 all right thank you hope to see you 
 there 
 thank you 
 are you ready 
 after trying for two days 
 you have a line in time finally 
 okay 
 thank you uh my name is constantine i 
 call me kostya uh and i'm gonna talk 
 about interviews tech interviews to be 
 specific and this is another talk of 
 like five hours squeeze to five minutes 
 so fasten your bills please sorry 
 um and originally the talk was for 
 interviewers but i mean if you're a 
 candidate it's kinda silly not to listen 
 to advices to interviewers so i decided 
 to cover kind of both 
 uh first the first kind of disclaimer so 
 um i'm quite open night and 
 i'm doing a lot of interviews on tv and 
 kiwi's large 
 we have 200 pythonistas or so and if 
 you're gonna apply it's likely that i'm 
 gonna be 
 one of your tech interviewers 
 but other people have other opinions 
 and i try to convince them but they try 
 to convince me and this is one of the 
 reasons why i'm doing this now so you 
 can approach me and convince me back and 
 but anyway 
 i am doing this talk to convince you too 
 and uh 
 i think it's gonna work so uh what's the 
 problem with interviews 
 basically you have only a few minutes a 
 few hours maybe a few days to figure out 
 whatever the person 
 is okay and you can work with them and 
 you're gonna happy 
 working with them 
 but how can you do that then it's pretty 
 unrealistic i would say so 
 what are shortcuts that people are 
 taking 
 so sometimes they just assume that if 
 you follow for all of the newest python 
 uh changelog 
 changes then you're gonna know things 
 but i doubt it like there are people who 
 just follow the same twitter accounts 
 and memes and i mean it just doesn't 
 work in the end it doesn't show that 
 they actually know something 
 or can do the work and the other thing 
 is when sometimes have people have a lot 
 of questions that are 
 impenetrable like you can't 
 pass these interviews and this is 
 somehow a goal of the interview and well 
 it doesn't work as well of course if a 
 candidate is smart they well they will 
 laugh at you and if they really smart 
 they will find the question that you 
 don't know about and they were like okay 
 so i know what you're doing 
 so what we are 
 thinking about usually on the interviews 
 and technically it's universal advice 
 that you can 
 do with anyone who are 
 anxious or in a nervous situation make 
 sure they understand what's going on be 
 transparent about what's 
 who you are uh what's the structure 
 point of view what's going to happen 
 and be clear about everything and be 
 transparent with the 
 issues that they might have during the 
 work and etc 
 so our structure of the technical 
 interviews is like this so first there 
 is a kind of soft part where there is 
 some conversation which is going on and 
 we want to just figure out what was what 
 are the interests what the person is 
 uh having in their mind at the moment 
 and during the technical interview uh we 
 have so first kind of a quiz 
 then we asked to share an opinion and 
 finally we do some difficult tasks 
 so the quiz is just a five minutes to 
 just clearly verify that person actually 
 talks truth 
 because i mean if you ask questions on 
 the interviews sometimes the person can 
 do this like google the answer 
 uh with their phone under this under the 
 camera and like with the quiz you can't 
 usually do that it's just fast 
 uh but it's not it's kind of a ping pong 
 questions should be really simple to 
 answer but not too hard like 
 don't go too deep it should be fun 
 then the opinions part well it's about 
 to figure out if the person can learn so 
 like people have different opinions some 
 people have uh 
 opinions that not much yours but we want 
 what we want to learn from this what we 
 want to figure out is how people came to 
 this what they have learned to get with 
 this opinion 
 but in general unfortunately or happily 
 interviewers have to know a lot of 
 things 
 so i kind of feel like this in this 
 regard so i i can't really help you here 
 you need to know things to 
 actually test whatever candidate knows 
 technically what they should know but 
 there are few tips we can give so first 
 if it's a challenge 
 we 
 for junior 
 you better know the task really well and 
 be able to help the junior really well 
 so 
 everything goes smooth then 
 uh with a senior well 
 it's better if you don't know the task 
 and in this case you kind of work 
 together and this feels like 
 the majority 
 take care 
 just in time 
 okay 
 so 
 next one 
 um 
 while you connect your computer 
 pycon apac 
 let's go into this short announcement 
 hello folks my name is iqbal i've been 
 sent over by our compatriots from 
 in taiwan to send you a very special and 
 very important message i hope i'm 
 successful my mission is to invite you 
 to pycon apec which is going to be done 
 online on september 3 and 4. um there 
 are two important things that we're 
 trying to do with uh within pycon apec 
 number one is a young inspirers 
 session where school children from 
 middle school to high school will 
 present their projects and number two is 
 sprint talks 
 on this new platform called getter town 
 so i hope you can look online for python 
 apex september 3 september 4 
 waiting to see you folks join us there 
 thank you 
 thank you very much 
 and 
 the name of designing talk is trump's 
 twitter terrain yes 
 hey everyone i'm peter from a small 
 startup in hungary called vizu and i 
 thought to share a story with you about 
 a former president of the united states 
 who assume is very popular in this round 
 uh specifically about his uh tweeting 
 habits 
 so uh he started tweeting in in may 2009 
 and actually in the first couple of 
 years he wasn't such a big user of the 
 platform so basically his top month is 
 like 36 tweets whereas in the years 
 afterwards he got hooked on quite well 
 and then he got uh to be a nominee for 
 becoming the president as you can see 
 the closer the election day comes the 
 the more they took away his phone it 
 seems so it has a downward trend 
 and then 
 he won that election and became the 
 president and there are these you know 
 bubbles of of growing number of tweets 
 over there so these are almost all the 
 tweets i have to admit these are only 
 for may 2020 
 and you know so six months is missing 
 before he was kicked out of the platform 
 um 
 and yeah 
 so 
 yeah sorry some we're gonna have a 
 glitch now and it's gonna come back in a 
 second 
 until then 
 yeah it's gonna it's gonna be okay just 
 one second 
 not so much 
 but um 
 yeah here we are 
 right 
 and let's get back okay so the 
 interesting thing is like these were the 
 number of tweets 
 and this is the number of times these 
 tweets were shared 
 so you can say no one really cared about 
 the guy before he became a serious 
 nominee and then when he became 
 president we call this graphic the trump 
 twitter trumpet 
 wow thanks 
 okay so the number of tweets for now uh 
 there are obviously three types of 
 tweets original tweets retweets and 
 replies and if you check the trends 
 there are some interesting things here 
 so in the bottom you can see the replies 
 that's a function he kind of forget of 
 after he became president whereas there 
 is a huge number of retweets uh towards 
 the the end of this period so basically 
 this huge growth in the number of tweets 
 comes mainly from just retweeting things 
 and obviously he wasn't the only one 
 using the accounts so he put in the 
 minimal effort let's just say 
 uh to get there it's even more apparent 
 if you see the share of the tweets among 
 time 
 and then another aspect you can take a 
 look at is like what tool he used to 
 send these tweets uh 
 first in the first period he was uh 
 overwhelmingly using the web interface 
 and then he switched to his favorite 
 android phone and then when he became 
 president he was banned from it because 
 of security reasons so he 
 chose uh he had to use the iphone 
 exclusively as you can see 
 if we take a look at the number of 
 tweets 
 in total sent from these platforms you 
 can see the the iphone is ahead by far 
 just another aspect you can take a look 
 at 
 at this data set is the time of day 
 trump sent these tweets 
 um 
 so uh 
 yeah it's like a 24 hour clock we see 
 here am is on the right pm is on the 
 left and uh yeah as you can see there 
 are these famous tweet trends in the 
 morning early morning hours so like 78 
 between 2 15 and 2 30 in the morning 
 and if we filter the results 
 based on the periods that we see in the 
 beginning so when trump was still a 
 businessman he was using uh the web 
 platform throughout the day and there 
 were these tweet trends uh mostly from 
 uh from his android phone like you know 
 typing in the middle of the night when 
 he got angry when he saw something on 
 fox news or 
 god forbid cnn 
 and when he became president these these 
 uh early morning and and night sessions 
 uh became less uh apparent and actually 
 if you check the peak so when he was a 
 businessman let me just go back the peak 
 is around the afternoon so sometimes so 
 around here it's like uh four in the 
 morning in the afternoon whereas when he 
 became president the the peak went to 
 the early morning hours so around 9am 
 so that was the story that i wanted to 
 share but there's a catch here because 
 actually all i used here is a 
 jupiter notebook 
 to to do all this this is like 400 lines 
 of python code within a notebook 
 i put this story together during the 
 conference and you can do that too by 
 visiting ipyvisu.com there are two open 
 source packages ipad visual and ipad is 
 a story with which you can build 
 animated data stories yourself thank you 
 very much for your attention thank you 
 thank you 
 just okay can i take a quick picture 
 with the audience yes okay thank you 
 i will disconnect your laptop 
 so last lining talk of today 
 are our friends for the djangocon porto 
 um 
 pycon portugal 
 yeah you're welcome 
 so this is the last one please don't 
 leave stay we have the closing session 
 after this so we didn't use the 
 one minute uh 
 opportunity because we wanted to share 
 with you what 
 all of you will be missing if you don't 
 come to porto this september we are 
 hosting djangocon europe 
 and 
 the very first spike on portugal 
 we hope to share with you with all of 
 you our beers i don't know if they are 
 better or not but they are they are good 
 enough uh 
 and they are cheaper uh portugal is a 
 country that is not that expensive so 
 even if you have already come to 
 aeropython you you probably still have 
 budget for uh pycon portugal 
 and 
 to leave you with 
 with something 
 you can all apply for free tickets in 
 this 
 qr code hope to see you in portugal 
 [Applause] 
 thank you i lost promising 
 uh okay that was the last one in a few 
 minutes we are going to do the closing 
 session 
 and then we can all go and cry in the 
 ferryman 
 see in a minute 
 have actually vocal uh 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i thought i learned 
 a lot about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 member and python 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 joining me i think my favorite thing 
 about euro python is well the people the 
 people around python is just fantastic 
 it's the best people i've ever met 
 for me it's like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that this 
 year meeting a lot of friends in person 
 so i've been in europe for three years 
 and this is my first time meeting 
 all of you 
 in real life and that was just amazing 
 it was i got five minutes five minutes 
 to prepare for a session share and then 
 after all i got loads of people coming 
 saying thank you and they say that they 
 loved it so i think that was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny i think it's 
 just fantastic i highly recommend europe 
 python and hopefully see you next year 
 umnitza is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud networking 
 and accessories 
 with imnitza you can automate processes 
 from purchase to end of life achieving 
 five key benefits 
 find out how umnitza can give you 
 complete control and insight across your 
 technology portfolios book a live demo 
 today at umnitza.com 
 [Music] 
 [Music] 
 [Music] 
 [Music] 
 take one 
 you are actually very serious when you 
 are recording me 
 what did i learn today 
 well i learned that there is a great 
 python community in prague and it would 
 be great to 
 organize maybe the next euro python 
 there that would be fantastic a great 
 city great people great beer 
 that that would be fantastic 
 today today i learned 
 well how to do an interview i guess 
 the community the people 
 and talking 
 and 
 learning new things 
 i don't know it's fun 
 we had a really interesting discussion 
 about euro python society and you know 
 how 
 um things were before how things are 
 right now there were some really 
 interesting conversations about what 
 could be done to be like more community 
 centered for us to be more community 
 centered how we can help more open 
 source um organizations and more 
 specifically just be more closer to the 
 community 
 so today at euro python i learned about 
 how 
 the new python versions will be 
 optimized and how they will run faster i 
 think that's great news for the future 
 of python 
 the euro python is the gathering of 
 different groups different faults 
 different ideas and but everybody is 
 sticking together with a common language 
 which is python something i really liked 
 learning about which was really cool was 
 these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 during uh our preparations for european 
 i've learned some animal parts like 
 that giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europa i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and knowing 
 many different society europa society 
 members 
 community members but i think it's 
 very important if you want to be 
 occupied 
 if you want to participate 
 i think my favorite thing about euro 
 python is well the people the people 
 real quiet is just fantastic it's the 
 best people i've ever met 
 for me it's like a nerd cam for 
 all the nerds so it's really nice to 
 meet all the people that i see only once 
 per year at the conference 
 talks are really nice i 
 i learned for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for two 
 years 
 alright 
 that was fun did you have fun 
 are you tired also 
 because 
 there are many volunteers i'm sure we're 
 very tired but i'm sure we're also 
 overjoyed 
 because that was so much fun we're so 
 happy to have done this we've been 
 waiting for two years and if we've done 
 it 
 that was 
 people have been asking in different 
 random channels about stats 
 now here they are some ticket breakdowns 
 we have sold one thousand and 194 
 tickets in person 
 in person tickets i should say and 143 
 online tickets 
 i think it was quite interesting to see 
 that the remote participation was not 
 just 
 from people who are not in dublin 
 actually there were quite a few people 
 joining also from dublin 
 i also actually saw quite a few people 
 joining right outside on their phone 
 which is true spirit of remote i think 
 and we have on on venulis we have 
 247 users 
 there are quite a lot of chats over 900 
 of them at the same time there are lots 
 of people also watching on youtube 
 the streams currently have been all up 
 published on the website and if you go 
 to the streams you can probably still 
 see the numbers are growing so there are 
 quite a lot of 
 people still watching on youtube and 
 there were also a lot of people watching 
 live on youtube and probably on their 
 tv at home 
 and the gender breakdown 
 according to the ticket sales 
 this uh people who have identified as 
 male we have sold 
 834 and female 210 those who identify as 
 other 18. 
 and there's this is a country breakdown 
 you can read about it i'm really glad to 
 see that 
 ireland is number one at some point i 
 was trending 
 not in a good place so i'm really happy 
 that now it's 
 ireland is indeed number one i think we 
 also saw quite a lot of tickets being 
 sold 
 during the last few days 
 with irish 
 developers joining and irish communities 
 joining in the last few days i'm really 
 really happy to welcome so many local 
 communities joining the conference 
 you can take you can take a moment and 
 look and 
 can see that uh the uk and 
 germany and netherlands and us are the 
 top five 
 and 
 in april we run the talk proposals we 
 received 429 proposals 
 and i do believe we broke the record vb 
 am i right we broke the record yes we 
 broke the record 
 for receiving 
 number one like top 
 numbers of proposals this year um 
 and then we went through community 
 voting this year and we received 23 
 926 votes we did not break the record 
 for this 
 which means all of you will be able to 
 participate in breaking the record next 
 year for us 
 because we have been asking people who 
 have joined 
 who have um joined the europe high zone 
 since 2015 to the current year every 
 single year we run community voting 
 those who have participated can 
 participate in those who had joined in 
 person conference before 
 or remote in the long line years they 
 can participate in the community voting 
 and this 
 informs us what kind of talks or 
 discussions or topics you would like to 
 see 
 and so please next year 
 help us help us select what you like to 
 see 
 and out of all of the proposals received 
 29 of the speakers identify as being 
 from underrepresented groups 
 and 
 this year we also ran a lot of events 
 outside of the main program 
 we have i've listed all of the eight 
 events over here i'm particularly proud 
 of the transcode event organized by 
 naomi cedar on tuesday and the maker 
 fest organized by vicky and nicholas 
 hope you're both here and naomi as well 
 and um vicky and nicholas put in a lot 
 of effort into 
 making 
 the euro python conference maker 
 friendly 
 there was there was a sort of we were 
 slightly worried that in this kind of 
 conference center 
 with everything being very 
 health and safety cautious shall we say 
 it was not going to work out so they 
 went through so much effort to make sure 
 that this conference is maker friendly 
 and i really thank them for the effort 
 that they put in 
 to prove that 
 we europaison can also welcome makers 
 and we would really really really like 
 to continue doing that so in the future 
 in the future years wherever we go i 
 would really also like to welcome the 
 maker community to join us make 
 something wonderful just 
 invent things with us 
 and i would also like to report that we 
 have zero coc incident this year 
 i think we definitely should welcome 
 nao's naomi cedar every single year to 
 do a brief at the opening that sounds 
 like a really good idea 
 i would also like to give a report on 
 financial aid 
 this year we received a lot of a large 
 number of financial aid applications 130 
 applications from over 40 different 
 countries 
 and 
 110 of these applicants um are joining 
 us for the first time 
 or applying for the first time to your 
 poison 
 and 60 of the applicants identify as a 
 member of an underrepresented group 
 this year's financial aid budget from 
 european society is twenty thousand 
 and i'm really grateful for the work of 
 sebastian and chuuk 
 who have done incredible work and vicky 
 as well who have done incredible work to 
 make sure every single application is 
 considered carefully when somebody drops 
 out we immediately goes to allocate this 
 this 
 the remaining funds to the next 
 um the the amount of care that they put 
 in is absolutely incredible i think this 
 is exactly the kind of community spirit 
 that we should embrace so thank you very 
 much sebastian chick 
 now we are experienced 
 we are experimenting with a hybrid 
 format 
 as you can see we have cameras 
 everywhere 
 we well not everywhere but just two in 
 every room but i guess that's quite a 
 lot um we so this year i think it worked 
 i think a lot of things have worked well 
 in that we involved 
 our streaming team 
 to have helped us to design a workflow 
 and this is something that i'm 
 personally very passionate about that i 
 think that we could design a sort of 
 workflow that is 
 easy to implement and 
 not too expensive to to to take to take 
 to basically to port around 
 so i'm sharing this wiring diagram that 
 like 
 our team drew 
 this is the implementation of this 
 current year's conference there are 
 things to improve as well so you're very 
 welcome 
 to 
 share and to give us feedback if you're 
 interested in how to 
 do something like this or do with 
 something of a smaller scale or just 
 have good ideas have like ideas about 
 how to motorize some things we're really 
 looking forward to hearing these kind of 
 feedback so please just email us get in 
 touch we're really really happy to hear 
 feedback 
 um and this year we're also 
 we're also putting a lot of effort 
 making europe high some more welcoming 
 for everybody 
 um theofanus and vb and diego run a 
 really incredible mentorship program 
 that helps people especially first time 
 speakers from underrepresented 
 communities to learn from more 
 experienced speakers so that they build 
 more confidence 
 to to be able to to to feel that they 
 can speak 
 as well as somebody who's poured from 
 more privileged backgrounds and this 
 year we also have a lot of first-time 
 speakers 
 who have benefited from this program 
 and just want to say great thanks to 
 theophanus vb and diego for carrying 
 this through for doing this with great 
 humor as well thank you so much 
 and we and chook on thursday in the open 
 space also ran a mentor sprint to help 
 people 
 to help less experienced people feel the 
 confidence to join us 
 tomorrow and sunday and in the future to 
 to sprint with 
 others in addition we also made sure 
 that we we can make it easy for people 
 to join the conference so we had free 
 childcare service this is a picture 
 uh taken 
 we the babysitter we hired transformed 
 one of the conference rooms 
 to make it more child friendly to give 
 children activities to play so that 
 their parents can just 
 just come to the conference and have fun 
 like other any other people without 
 worrying about 
 what how their children are doing so i 
 i'm really happy that we managed to do 
 this very smoothly and 
 i think this is something that but 
 there's no reason why we wouldn't do 
 this every other year every year because 
 this is something i think quite basic 
 and we also 
 have pronoun stickers to make people 
 feel that 
 well i don't think i need to explain 
 this because these are very basic things 
 so we have pronoun speakers stickers and 
 we also have thing we also have signage 
 in the toilets 
 we originally wanted to put more signage 
 on the toilets to to to be 
 to make non-binary people feel more 
 welcome 
 um this was 
 not very easy to do in in the 
 venue so we decided to just remind 
 people to respect other people's gender 
 identity and expression 
 and i'm really grateful that we have 
 received no complaints no incident 
 thank you 
 really thank you for being respectful 
 and now for something 
 different 
 we are having a price time 
 i am now welcoming andrew and sam from 
 northern ireland raspberry raspberry jam 
 to prevent to present the awards for the 
 fastest completion of the robot maze 
 hello um so andrew decided to drop out 
 so he's obviously not here so i'll be on 
 behalf of him as well 
 just a brief explanation so i'm sam i'm 
 part of the 
 many member of teams or many members of 
 a team 
 or volunteers in belfast who participate 
 and run a raspberry jam in belfast we 
 would love to invite you all if you want 
 to join us we have tickets that go out 
 every month usually during the academic 
 year if you're interested in going it's 
 usually a family event so there's 
 nothing like you know taking down 
 enterprise networks if you're interested 
 in that i feel like there's an event for 
 you but we uh hack traffic lights and 
 the such so if that suits your ability 
 or if you're interested by all means 
 there'll be tickets online um just 
 google around and you should be able to 
 find it 
 more importantly the actual event that 
 took board the workshop in the maker 
 fest was the 
 [Music] 
 the robot challenge so the quickest time 
 was 17 and a half seconds by brute force 
 because there's no way you got the 
 sensors to work just kind of like ramped 
 against the walls to see how far and how 
 quickly it got round and i would like to 
 present the award to hubert 
 broughtolotsky and i would like him to 
 invite him to collect his prize after 
 the event and for a photo but thank you 
 so much to everybody who took part i 
 apologize for equipment but everybody 
 took part was fantastic and 
 genuinely it was a great and great 
 impression to see all the makers who 
 took part in the event thank you 
 [Applause] 
 and i also i was also reminded to tell 
 you that tomorrow there is sprint so 
 don't 
 over indulge tonight because please come 
 over tomorrow and there will be 
 in this somebody must have messed up 
 with the slide i have no idea what it's 
 supposed to say this 
 in this building okay 
 you mess up right 
 refresh 
 i think we got a just joke yes 
 so 
 yes so tomorrow starting at 9 00 a.m 
 there will at this bill 
 there will be sprint orientation am i 
 correct jerk 
 no let's do this like you 
 come and join us 
 run run run 
 sorry really really sorry technical 
 difficulties we did make the slides but 
 it doesn't update here um so what 
 happened is that tomorrow there will be 
 sprints in the building so that would be 
 in the living hall 
 um some rooms in liffey i can't remember 
 which one and the which snow hall on the 
 second level so that will be sprints um 
 so if you want to check out which 
 project you want to work on please go to 
 our website 
 just go to your python website and find 
 the sprints and then you can check all 
 the projects there all the details are 
 there and 
 thank you 
 slash sprints 
 yes 
 and i do believe that you still have 
 time to propose more sprints if you want 
 to so please and go 
 and just tell us all the wonderful and 
 or 
 weird stuff that you do like 
 just make a pr there and then we will 
 merge it we'll 
 promise to merge it by tonight 
 and now 
 it's 
 thank you time 
 i just want to thank all of these 
 volunteers 
 who have 
 been with us 
 throughout the entire year 
 throughout this very difficult and 
 challenging times 
 to have made euro python 2022 happen 
 so i think some of you have left 
 and i don't see any of you here so i'm 
 not sure you're going up 
 i just want to invite every volunteer 
 who have contributed 
 a lot of their time a lot of their love 
 and care onto stage 
 and let's just join the party 
 so 
 i think alex 
 is not here but alex i think everybody 
 knows alex 
 he is 
 he is a scheduling master he is 
 yes so he he really designed our 
 program 
 and almo is also not here with us 
 ammo is 
 the person that's 
 basically run all of the remote 
 operators he designed the whole workflow 
 he made 
 charts 
 it's it's great 
 he's not here with us but but he will be 
 here with us over there in true spirit 
 of remotes and anna jang and bess they 
 are not here either but they helped 
 naomi and the rest of the team plan for 
 the transcodes 
 and our tool 
 well he's the infrastructure 
 master he 
 this year we made a lot of 
 infrastructure changes including 
 decoupling our 
 program and our tickets 
 and that's all down to our tool and 
 cassie i hope you're here if you're not 
 thank you for all of your work you've 
 all of the work you've done for 
 transcode 
 everybody knows chook i've already said 
 so much nice work for diversity 
 inclusion and finnaid 
 and diego is here 
 and diego is the person if you ever see 
 a linkedin post that's him 
 um 
 and francesco 
 if something is wrong with our 
 infrastructure i do not know how he does 
 it just several seconds later things are 
 just fixed 
 uh and nicole 
 yeah this is the guy that just run the 
 whole remote making everything so 
 seamless 
 thank you so much 
 and andres is our treasurer 
 if anybody ever 
 needs us to pay something this is a 
 person you should beg 
 joanna also helped us a lot with finnaid 
 kevin is the coc person one of the coc 
 person 
 laissez 
 lais is the person that designed all of 
 our stickers and quite last minute i 
 should say when i asked her 
 and i asked her can you find us a 
 designer she said 
 not really but i will learn everything 
 in one day and she did 
 all of the stickers and this big banner 
 many many things she designs 
 martin 
 there's a lot of things martin did to 
 streamline our whole remote setup 
 and naomi is the person 
 we go to for advice 
 that's basically it 
 and nicholas is our biggest champion he 
 keeps us 
 in touch with what the community is 
 really about 
 ernesto helped us design so much about 
 the schedule 
 he he he gave a lot of inputs 
 for what kind of talks are more 
 interesting 
 um patrick is the website guy if you 
 think the part if you think the website 
 is pretty that's because of patrick and 
 if there is any bug that's also 
 well patrick will fix it 
 and sanger shannon 
 all of the speaker tweets that you've 
 seen all of the other blogs that you've 
 seen 
 he's part of everything 
 communication related 
 and sebastian is the person that just 
 made all these magic with spreadsheets 
 and then finish just magically run 
 without 
 any hassle 
 and he would follow up every single help 
 desk tickets 
 regarded regarding finance 
 and 
 there's no ticket open currently i think 
 two tickets open only 
 out of i don't remember how many how 
 many 
 applications so that's him 
 and sylvia 
 sylvia 
 i think 
 every sponsor downstairs would want to 
 meet sylvia because hundreds of hundreds 
 of emails later she's still not confused 
 she's just knows who is who out of we 
 have 23 sponsors she just knows every 
 single person answers every single email 
 and collects all of the data 
 spreadsheeting 
 that's sylvia and sylvanas 
 keeps talking about animal 
 facts 
 and sometimes incorrect ones 
 sylvanus is the person 
 that helped us answer all of the 
 helpdesk tickets and if it's not answers 
 he will pester every single person 
 nonstop 
 so that's every single user of 
 europaison is satisfied 
 and vb 
 he leads our communication he leads 
 he co-leads our program he's the person 
 that looks at 
 three talks and just tells people don't 
 do this don't do that this is not 
 correct 
 and this is why our schedule works for 
 some reason 
 and and this is also why this year will 
 have i hope that you can see that will 
 have much more friendly tone because 
 bb 
 is the chief editor we'd be like to sign 
 off with 
 your friendly 
 neighborhood spider-man i don't know why 
 but i think people like it 
 um 
 and vic vicky is the person why we 
 are connected with ireland 
 i cannot express 
 my gratitude 
 for vicky 
 she 
 she loses sleep over social events 
 because we didn't have any social event 
 value for a while she would just go go 
 around in dublin and then just 
 suddenly get new ideas and follow up 
 with every single one of them and she 
 would recommend all of the great people 
 in ireland all of the great minded 
 people in ireland and connect with us 
 and this is why we feel that this year 
 we belonging in dublin so thank you so 
 much vicky 
 thank you so much 
 and saiyan is 
 what works with silvia and 
 doing sponsoring stuff and yeah they're 
 both super organized 
 that's not right 
 and 
 now we have all of the on-site 
 volunteers and remote volunteers i think 
 joining us i hope 
 if this works 
 we can see all of the people who are 
 working in yellow t-shirts 
 and also all of the people 
 who you're not seeing 
 because 
 they are somewhere 
 around the world 
 coordinating with all of the people 
 speaking remotely or all of the people 
 who are attending remotely 
 please let's give them a few thank you 
 i think i missed jasmine from this slide 
 i just 
 i just want to say yasmine thank you so 
 much 
 for being with us this whole year 
 you 
 yasmin has been volunteering with us for 
 two years last year she did remote 
 volunteering and 
 normally we were not monitoring a lot of 
 different channels of communication she 
 would be sending message saying this 
 this is spam that needs to be banned she 
 just sees things i do not know how but 
 she just sees things and she would be 
 the person who would be the first one to 
 start a newsletter and say she doesn't 
 pester people she just leaves comments 
 saying i think we should do this 
 and then we do that 
 yes 
 thank you so much jasmine 
 okay 
 do we need to take a picture or you 
 already done that you did that 
 you need to be in it 
 okay let's take a picture 
 it's all one at the back 
 [Laughter] 
 foreign 
 now all of our volunteers are part of 
 europa's and society and i hope that you 
 through all our volunteers through 
 getting to know all of our volunteers 
 you're interested in also joining this 
 society and help us plan and run the 
 next year's europe python 
 if you're interested in giving us 
 feedback please 
 email us at volunteers at europison.edu 
 or just talk to us tomorrow 
 don't get too indel overindulged talk to 
 us tomorrow during the sprints 
 so see you in 2023 somewhere in europe 
 now 
 if any of you has a laptop take it out 
 and do this 
 i will give you a second in case 
 if you don't have pip x you can still 
 pip install and run it that's okay too 
 okay 
 [Music] 
 okay 
 i think you're taking too long 
 oops 
 how do i swipe okay swipe okay 
 there it is 
 yes 
 thank you so much everyone 
 have fun 
 and tomorrow join us at sprints 
 enjoy dublin thank you 
 [Applause] 
 but everybody is sticking together with 
 a common language which is python 
 something i really liked learning about 
 which was really cool was these 
 vs code pets which you can have some 
 pets running around in vs code and what 
 i really like about europe python is uh 
 now that we're not remote anymore is 
 actually talking to people meeting 
 people and interacting and especially 
 comparing 
 developer setups which we were just 
 doing just now that's really cool 
 [Music] 
 during uh our preparations for europe 
 iphone i've learned some animal parts 
 like 
 giraffes have actually vocal 
 vocals and they can speak 
 everything everyone does with python and 
 that's probably one of my favorite 
 things and is the surprises you get from 
 even when you read the abstracts of the 
 talks and you get you think you know 
 what they're going to be talking about 
 and then you go to a talk that you think 
 you will not enjoy that much and it just 
 completely blows your mind 
 and that's that's really really cool 
 this year in europe i learned a lot 
 about the streaming and 
 video cameras and other things knowing 
 people and 
 knowing 
 many different society europa society 
 member and finance 
 community members but i think it's very 
 important if you want to be occupied 
 if you want to participate 
 [Music] 
 i think my favorite thing about europa 
 town is well the people the people 
 around python is just fantastic it's the 
 best people i've ever met for me it's 
 like a 
 nerd camp for all the nerds so it's 
 really nice to meet all the people that 
 i see only once per year at the 
 conference 
 talks are really nice i 
 i learn for example about linters for 
 the import statements which i still have 
 to read about but 
 i learned quite a lot from that 
 this year meeting a lot of friends in 
 person so i've been in europe for three 
 years and this is my first time meeting 
 all of you in real life and that was 
 just amazing it was i got five minutes 
 five minutes to prepare for a session 
 share and then after all i got loads of 
 people coming saying thank you and they 
 say that they loved it so i think that 
 was a great job 
 and i had fun doing it 
 i think every every day there is 
 something new and funny 
 i think it's just fantastic i highly 
 recommend your python and hopefully see 
 you next year 
 umnitsa is the enterprise technology 
 management solution that consolidates 
 data from existing siloed tools to 
 provide a single source of truth for 
 endpoints applications cloud network
